<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mysql | 忐忑の博客</title><link>https://twbhub.com/tags/mysql/</link><atom:link href="https://twbhub.com/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><description>Mysql</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>[![忐忑的博客](https://img.shields.io/badge/©-2020%20%2D-%202024_忐忑-yellow)](/authors/admin/) [![忐忑的博客](https://img.shields.io/github/tag/twbworld/twbworld.GitHub.io?logo=github)](https://github.com/twbworld/twbworld.GitHub.io) [![Hugo](https://img.shields.io/badge/powered-hugo-ff4088?logo=hugo)](https://gohugo.io/) [![wowchemy](https://img.shields.io/badge/theme-wowchemy-00d1b2)](https://wowchemy.com/)</copyright><lastBuildDate>Sat, 30 May 2020 20:47:16 +0800</lastBuildDate><image><url>https://twbhub.com/media/avatar.jpg</url><title>Mysql</title><link>https://twbhub.com/tags/mysql/</link></image><item><title>Centos源码安装Mysql8笔记</title><link>https://twbhub.com/post/install_mysql8_note/</link><pubDate>Sat, 30 May 2020 20:47:16 +0800</pubDate><guid>https://twbhub.com/post/install_mysql8_note/</guid><description>&lt;h2 id="笔记一-安装时发生警告">笔记一: 安装时,发生警告&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
--character-set-server: &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span> is currently an alias &lt;span style="color:#66d9ef">for&lt;/span> the character set UTF8MB3, but will be an alias &lt;span style="color:#66d9ef">for&lt;/span> UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous
--collation-server: &lt;span style="color:#e6db74">&amp;#39;utf8_general_ci&amp;#39;&lt;/span> is a collation of the deprecated character set UTF8MB3. Please consider using UTF8MB4 with an appropriate collation instead
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因 :&lt;/p>
&lt;blockquote>
&lt;p>安装mysql8的时候,配置了官方不推荐的&amp;quot;utf8&amp;quot;,其实&amp;quot;utf8&amp;quot;就是mysql中&amp;quot;UTF8MB3&amp;quot;的别名,然而又同时存在着&amp;quot;UTF8MB4&amp;quot;,所有,建议改为&amp;quot;UTF8MB4&amp;quot;;&lt;/p>
&lt;/blockquote>
&lt;p>解决 :&lt;/p>
&lt;blockquote>
&lt;p>把cmake的参数 &lt;code>-DDEFAULT_CHARSET=utf8&lt;/code> 改为 &lt;code>-DDEFAULT_CHARSET=utf8mb4 &lt;/code> , &lt;code>-DDEFAULT_COLLATION=utf8_general_ci&lt;/code> 改为 &lt;code>-DDEFAULT_COLLATION=utf8mb4_unicode_ci&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>给出完整cmake命令 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
&lt;span style="color:#75715e"># 切换到mysql8解压后的目录&lt;/span>
cd /usr/local/mysql8/
&lt;span style="color:#75715e"># 新建并切换build目录&lt;/span>
mkdir build
cd build
&lt;span style="color:#75715e"># 编译前的配置;其中的&amp;#34;DCMAKE_INSTALL_PREFIX&amp;#34;, &amp;#34;DMYSQL_DATADIR&amp;#34;, &amp;#34;DWITH_BOOST&amp;#34; 按照自己的情况配置&lt;/span>
cmake .. -DCMAKE_INSTALL_PREFIX&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DMYSQL_DATADIR&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DSYSCONFDIR&lt;span style="color:#f92672">=&lt;/span>/etc &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_MYISAM_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_INNOBASE_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_MEMORY_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWTH_READLINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DMYSQL_TCP_PORT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3306&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DENABLED_LOCAL_INFILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_PARTITION_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DEXTRA_CHARSETS&lt;span style="color:#f92672">=&lt;/span>all -DDEFAULT_CHARSET&lt;span style="color:#f92672">=&lt;/span>utf8mb4 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DDEFAULT_COLLATION&lt;span style="color:#f92672">=&lt;/span>utf8mb4_unicode_ci &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_BOOST&lt;span style="color:#f92672">=&lt;/span>/usr/local/boost_1_70_0
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>安装后,可以看到 &lt;code>/etc/my.cnf&lt;/code> 设置为 &lt;code>collation-server = utf8mb4_unicode_ci&lt;/code> &lt;code>character-set-server = utf8mb4&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="笔记二-创建mycnf">笔记二: 创建my.cnf&lt;/h2>
&lt;p>在/etc目录下没有发现my.cnf(我的mysql版本是mysql-8.0.20), 只能自己创建了 :&lt;/p>
&lt;p>&lt;code>vim /etc/my.cnf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
&lt;span style="color:#75715e"># 客户端设置&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>client&lt;span style="color:#f92672">]&lt;/span>
port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3306&lt;/span>
&lt;span style="color:#75715e"># 默认情况下，socket文件应为/usr/local/mysql/mysql.socket,所以可以ln -s xx /tmp/mysql.sock&lt;/span>
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;span style="color:#75715e"># 服务端设置&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>mysqld&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 基础信息&lt;/span>
&lt;span style="color:#75715e">#Mysql服务的唯一编号 每个mysql服务Id需唯一&lt;/span>
server-id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e">#服务端口号 默认3306&lt;/span>
port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3306&lt;/span>
&lt;span style="color:#75715e"># 启动mysql服务进程的用户&lt;/span>
user &lt;span style="color:#f92672">=&lt;/span> mysql
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 安装目录相关&lt;/span>
&lt;span style="color:#75715e"># mysql安装根目录&lt;/span>
basedir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8
&lt;span style="color:#75715e"># mysql数据文件所在位置&lt;/span>
datadir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/data
&lt;span style="color:#75715e"># 临时目录 比如load data infile会用到,一般都是使用/tmp&lt;/span>
tmpdir &lt;span style="color:#f92672">=&lt;/span> /tmp
&lt;span style="color:#75715e"># 设置socke文件地址&lt;/span>
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 事务隔离级别，默认为可重复读（REPEATABLE-READ）。（此级别下可能参数很多间隙锁，影响性能，但是修改又影响主从复制及灾难恢复，建议还是修改代码逻辑吧）&lt;/span>
&lt;span style="color:#75715e"># 隔离级别可选项目：READ-UNCOMMITTED READ-COMMITTED REPEATABLE-READ SERIALIZABLE&lt;/span>
&lt;span style="color:#75715e"># transaction_isolation = READ-COMMITTED&lt;/span>
transaction_isolation &lt;span style="color:#f92672">=&lt;/span> REPEATABLE-READ
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库引擎与字符集相关设置&lt;/span>
&lt;span style="color:#75715e"># mysql 5.1 之后，默认引擎就是InnoDB了&lt;/span>
default_storage_engine &lt;span style="color:#f92672">=&lt;/span> InnoDB
&lt;span style="color:#75715e"># 内存临时表默认引擎，默认InnoDB&lt;/span>
default_tmp_storage_engine &lt;span style="color:#f92672">=&lt;/span> InnoDB
&lt;span style="color:#75715e">#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）&lt;/span>
character-set-server &lt;span style="color:#f92672">=&lt;/span> utf8mb4
&lt;span style="color:#75715e">#数据库字符集对应一些排序等规则，注意要和character-set-server对应&lt;/span>
collation-server &lt;span style="color:#f92672">=&lt;/span> utf8mb4_unicode_ci
&lt;span style="color:#75715e"># 设置client连接mysql时的字符集,防止乱码&lt;/span>
&lt;span style="color:#75715e"># init_connect=&amp;#39;SET NAMES utf8&amp;#39;&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库连接相关设置&lt;/span>
&lt;span style="color:#75715e"># 最大连接数，可设最大值16384，一般考虑根据同时在线人数设置一个比较综合的数字，鉴于该数值增大并不太消耗系统资源，建议直接设10000&lt;/span>
&lt;span style="color:#75715e"># 如果在访问时经常出现Too Many Connections的错误提示，则需要增大该参数值&lt;/span>
max_connections &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span>
&lt;span style="color:#75715e"># 默认值100，最大错误连接数，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST&lt;/span>
&lt;span style="color:#75715e"># 考虑高并发场景下的容错，建议加大。&lt;/span>
max_connect_errors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span>
&lt;span style="color:#75715e"># MySQL打开的文件描述符限制，默认最小1024;&lt;/span>
&lt;span style="color:#75715e"># 当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，&lt;/span>
&lt;span style="color:#75715e"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。&lt;/span>
open_files_limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65535&lt;/span>
&lt;span style="color:#75715e"># 注意：仍然可能出现报错信息Can&amp;#39;t create a new thread；此时观察系统cat /proc/mysql进程号/limits，观察进程ulimit限制情况&lt;/span>
&lt;span style="color:#75715e"># 过小的话，考虑修改系统配置表，/etc/security/limits.conf和/etc/security/limits.d/90-nproc.conf&lt;/span>
&lt;span style="color:#75715e"># MySQL默认的wait_timeout 值为8个小时, interactive_timeout参数需要同时配置才能生效&lt;/span>
&lt;span style="color:#75715e"># MySQL连接闲置超过一定时间后(单位：秒，此处为1800秒)将会被强行关闭&lt;/span>
interactive_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1800&lt;/span>
wait_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1800&lt;/span>
&lt;span style="color:#75715e"># 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中&lt;/span>
&lt;span style="color:#75715e"># 官方建议back_log = 50 + (max_connections / 5),封顶数为900&lt;/span>
back_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">900&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库数据交换设置&lt;/span>
&lt;span style="color:#75715e"># 该参数限制服务器端，接受的数据包大小，如果有BLOB子段，建议增大此值，避免写入或者更新出错。有BLOB子段，建议改为1024M&lt;/span>
max_allowed_packet &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 内存，cache与buffer设置&lt;/span>
&lt;span style="color:#75715e"># 内存临时表的最大值,默认16M，此处设置成128M&lt;/span>
tmp_table_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 用户创建的内存表的大小，默认16M，往往和tmp_table_size一起设置，限制用户临师表大小。&lt;/span>
&lt;span style="color:#75715e"># 超限的话，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下，增大IO压力，建议内存大，增大该数值。&lt;/span>
max_heap_table_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 表示这个mysql版本是否支持查询缓存。ps：SHOW STATUS LIKE &amp;#39;qcache%&amp;#39;，与缓存相关的状态变量。&lt;/span>
&lt;span style="color:#75715e"># have_query_cache&lt;/span>
&lt;span style="color:#75715e"># 在一个事务中binlog为了记录SQL状态所持有的cache大小&lt;/span>
&lt;span style="color:#75715e"># 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.&lt;/span>
&lt;span style="color:#75715e"># 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中&lt;/span>
&lt;span style="color:#75715e"># 如果事务比此值大, 会使用磁盘上的临时文件来替代.&lt;/span>
&lt;span style="color:#75715e"># 此缓冲在每个连接的事务第一次更新状态时被创建&lt;/span>
binlog_cache_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e">#*** MyISAM 相关选项&lt;/span>
&lt;span style="color:#75715e"># 指定索引缓冲区的大小, 为MYISAM数据表开启供线程共享的索引缓存,对INNODB引擎无效。相当影响MyISAM的性能。&lt;/span>
&lt;span style="color:#75715e"># 不要将其设置大于你可用内存的30%,因为一部分内存同样被OS用来缓冲行数据&lt;/span>
&lt;span style="color:#75715e"># 甚至在你并不使用MyISAM 表的情况下, 你也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.&lt;/span>
&lt;span style="color:#75715e"># 默认值 8M，建议值：对于内存在4GB左右的服务器该参数可设置为256M或384M。注意：该参数值设置的过大反而会是服务器整体效率降低！&lt;/span>
key_buffer_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 为每个扫描MyISAM的线程分配参数设置的内存大小缓冲区。&lt;/span>
&lt;span style="color:#75715e"># 默认值128kb，建议值：16G内存建议1M，4G：128kb或者256kb吧&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。&lt;/span>
&lt;span style="color:#75715e"># 一般不需要太关心该数值，稍微增大就可以了，&lt;/span>
read_buffer_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">262144&lt;/span>
&lt;span style="color:#75715e"># 支持任何存储引擎&lt;/span>
&lt;span style="color:#75715e"># MySQL的随机读缓冲区大小，适当增大，可以提高性能。&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。&lt;/span>
read_rnd_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># order by或group by时用到&lt;/span>
&lt;span style="color:#75715e"># 支持所有引擎，innodb和myisam有自己的innodb_sort_buffer_size和myisam_sort_buffer_size设置&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M.&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。&lt;/span>
sort_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合)&lt;/span>
&lt;span style="color:#75715e"># 类似的联合在极大多数情况下有非常糟糕的性能表现,但是将此值设大能够减轻性能影响.&lt;/span>
&lt;span style="color:#75715e"># 通过 “Select_full_join” 状态变量查看全联合的数量&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb;建议值：16G内存，设置8M.&lt;/span>
join_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># 缓存linux文件描述符信息，加快数据文件打开速度&lt;/span>
&lt;span style="color:#75715e"># 它影响myisam表的打开关闭，但是不影响innodb表的打开关闭。&lt;/span>
&lt;span style="color:#75715e"># 默认值2000，建议值：根据状态变量Opened_tables去设定&lt;/span>
table_open_cache &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2000&lt;/span>
&lt;span style="color:#75715e"># 缓存表定义的相关信息，加快读取表信息速度&lt;/span>
&lt;span style="color:#75715e"># 默认值1400，最大值2000，建议值：基本不改。&lt;/span>
table_definition_cache &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1400&lt;/span>
&lt;span style="color:#75715e"># 该参数是myssql 5.6后引入的，目的是提高并发。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，建议值：cpu核数，并且&amp;lt;=16&lt;/span>
table_open_cache_instances &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># 当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁。可重用，减小了系统开销。&lt;/span>
&lt;span style="color:#75715e"># 默认值为9，建议值：两种取值方式，方式一，根据物理内存，1G —&amp;gt; 8；2G —&amp;gt; 16； 3G —&amp;gt; 32； &amp;gt;3G —&amp;gt; 64；&lt;/span>
&lt;span style="color:#75715e"># 方式二，根据show status like &amp;#39;threads%&amp;#39;，查看Threads_connected值。&lt;/span>
thread_cache_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;span style="color:#75715e"># 默认值256k,建议值：16/32G内存，512kb，其他一般不改变，如果报错：Thread stack overrun，就增大看看,&lt;/span>
&lt;span style="color:#75715e"># 注意，每个线程分配内存空间，所以总内存空间。。。你懂得。&lt;/span>
thread_stack &lt;span style="color:#f92672">=&lt;/span> 512k
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 日志文件相关设置，一般只开启三种日志，错误日志，慢查询日志，二进制日志。普通查询日志不开启。&lt;/span>
&lt;span style="color:#75715e"># 普通查询日志，默认值off，不开启&lt;/span>
general_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 普通查询日志存放地址&lt;/span>
general_log_file &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-general.log
&lt;span style="color:#75715e"># 全局动态变量，默认3，范围：1～3&lt;/span>
&lt;span style="color:#75715e"># 表示错误日志记录的信息，1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息。&lt;/span>
log_error_verbosity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># 错误日志文件地址&lt;/span>
log_error &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-error.log
&lt;span style="color:#75715e"># 开启慢查询&lt;/span>
slow_query_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 开启慢查询时间，此处为1秒，达到此值才记录数据&lt;/span>
long_query_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># 检索行数达到此数值，才记录慢查询日志中&lt;/span>
min_examined_row_limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#75715e"># mysql 5.6.5新增，用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认值为0，不限制。&lt;/span>
log_throttle_queries_not_using_indexes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 慢查询日志文件地址&lt;/span>
slow_query_log_file &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-slow.log
&lt;span style="color:#75715e"># 开启记录没有使用索引查询语句&lt;/span>
log-queries-not-using-indexes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 开启二进制日志&lt;/span>
log_bin &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-bin.log
&lt;span style="color:#75715e"># mysql清除过期日志的时间，默认值30*24*60*60，&lt;/span>
binlog_expire_logs_seconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">604800&lt;/span>
&lt;span style="color:#75715e"># 如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于1GB或小于4096字节。 默认值是1GB。&lt;/span>
max_binlog_size &lt;span style="color:#f92672">=&lt;/span> 1000M
&lt;span style="color:#75715e"># binlog的格式也有三种：STATEMENT，ROW，MIXED。mysql 5.7.7后，默认值从 MIXED 改为 ROW&lt;/span>
&lt;span style="color:#75715e"># 关于binlog日志格式问题，请查阅网络资料&lt;/span>
binlog_format &lt;span style="color:#f92672">=&lt;/span> row
&lt;span style="color:#75715e"># 默认值N=1，使binlog在每N次binlog写入后与硬盘同步，ps：1最慢&lt;/span>
&lt;span style="color:#75715e"># sync_binlog = 1&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># innodb选项&lt;/span>
&lt;span style="color:#75715e"># 说明：该参数可以提升扩展性和刷脏页性能。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，建议值：4-8；并且必须小于innodb_buffer_pool_instances&lt;/span>
innodb_page_cleaners &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 说明：一般8k和16k中选择，8k的话，cpu消耗小些，selcet效率高一点，一般不用改&lt;/span>
&lt;span style="color:#75715e"># 默认值：16k；建议值：不改，&lt;/span>
innodb_page_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16384&lt;/span>
&lt;span style="color:#75715e"># 说明：InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.&lt;/span>
&lt;span style="color:#75715e"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的60%-80%&lt;/span>
&lt;span style="color:#75715e"># 注意别设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率&lt;/span>
&lt;span style="color:#75715e"># 默认值：128M，建议值：物理内存的60%-80%&lt;/span>
innodb_buffer_pool_size &lt;span style="color:#f92672">=&lt;/span> 512M
&lt;span style="color:#75715e"># 说明:只有当设置 innodb_buffer_pool_size 值大于1G时才有意义，小于1G，instances默认为1，大于1G，instances默认为8&lt;/span>
&lt;span style="color:#75715e"># 但是网络上有评价，最佳性能，每个实例至少1G大小。&lt;/span>
&lt;span style="color:#75715e"># 默认值：1或8，建议值：innodb_buffer_pool_size/innodb_buffer_pool_instances &amp;gt;= 1G&lt;/span>
innodb_buffer_pool_instances &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：mysql 5.7 新特性，defines the chunk size for online InnoDB buffer pool resizing operations.&lt;/span>
&lt;span style="color:#75715e"># 实际缓冲区大小必须为innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances*倍数，取略大于innodb_buffer_pool_size&lt;/span>
&lt;span style="color:#75715e"># 默认值128M，建议值：默认值就好，乱改反而容易出问题，它会影响实际buffer pool大小。&lt;/span>
innodb_buffer_pool_chunk_size &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e"># 在启动时把热数据加载到内存。默认值为on，不修改&lt;/span>
innodb_buffer_pool_load_at_startup &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 在关闭时把热数据dump到本地磁盘。默认值为on，不修改&lt;/span>
innodb_buffer_pool_dump_at_shutdown &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：影响Innodb缓冲区的刷新算法，建议从小到大配置，直到zero free pages；innodb_lru_scan_depth * innodb_buffer_pool_instances defines the amount of work performed by the page cleaner thread each second.&lt;/span>
&lt;span style="color:#75715e"># 默认值1024，建议值: 未知&lt;/span>
innodb_lru_scan_depth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;span style="color:#75715e"># 说明：事务等待获取资源等待的最长时间，单位为秒，看具体业务情况，一般默认值就好&lt;/span>
&lt;span style="color:#75715e"># 默认值：50，建议值：看业务。&lt;/span>
innodb_lock_wait_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>
&lt;span style="color:#75715e"># 说明：设置了Mysql后台任务（例如页刷新和merge dadta from buffer pool）每秒io操作的上限。&lt;/span>
&lt;span style="color:#75715e"># 默认值：200，建议值：方法一，单盘sata设100，sas10，raid10设200，ssd设2000，fushion-io设50000；方法二，通过测试工具获得磁盘io性能后，设置IOPS数值/2。&lt;/span>
innodb_io_capacity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2000&lt;/span>
&lt;span style="color:#75715e"># 说明：该参数是所有缓冲区线程io操作的总上限。&lt;/span>
&lt;span style="color:#75715e"># 默认值：innodb_io_capacity的两倍。建议值：例如用iometer测试后的iops数值就好&lt;/span>
innodb_io_capacity_max &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4000&lt;/span>
&lt;span style="color:#75715e"># 说明：控制着innodb数据文件及redo log的打开、刷写模式，三种模式：fdatasync(默认)，O_DSYNC，O_DIRECT&lt;/span>
&lt;span style="color:#75715e"># fdatasync：数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># O_DSYNC： 数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># O_DIRECT： 数据文件，buffer pool-&amp;gt;磁盘； 日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># 默认值为空，建议值：使用SAN或者raid，建议用O_DIRECT，不懂测试的话，默认生产上使用O_DIRECT&lt;/span>
innodb_flush_method &lt;span style="color:#f92672">=&lt;/span> O_DIRECT
&lt;span style="color:#75715e"># 说明：mysql5.7之后默认开启，意思是，每张表一个独立表空间。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，开启&lt;/span>
innodb_file_per_table &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：The path where InnoDB creates undo tablespaces.通常等于undo log文件的存放目录。&lt;/span>
&lt;span style="color:#75715e"># 默认值./;自行设置&lt;/span>
innodb_undo_directory &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log
&lt;span style="color:#75715e"># 说明：5.7.5后开始使用，在线收缩undo log使用的空间。&lt;/span>
&lt;span style="color:#75715e"># 默认值：关闭，建议值：开启&lt;/span>
innodb_undo_log_truncate &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：结合innodb_undo_log_truncate，实现undo空间收缩功能&lt;/span>
&lt;span style="color:#75715e"># 默认值：1G，建议值，不改。&lt;/span>
innodb_max_undo_log_size &lt;span style="color:#f92672">=&lt;/span> 1G
&lt;span style="color:#75715e"># 说明：重作日志文件的存放目录&lt;/span>
innodb_log_group_home_dir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log
&lt;span style="color:#75715e"># 说明：日志文件的大小&lt;/span>
&lt;span style="color:#75715e"># 默认值:48M,建议值：根据你系统的磁盘空间和日志增长情况调整大小&lt;/span>
innodb_log_file_size &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e"># 说明：日志组中的文件数量，mysql以循环方式写入日志&lt;/span>
&lt;span style="color:#75715e"># 默认值2，建议值：根据你系统的磁盘空间和日志增长情况调整大小&lt;/span>
innodb_log_files_in_group &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间&lt;/span>
innodb_log_buffer_size &lt;span style="color:#f92672">=&lt;/span> 16M
&lt;span style="color:#75715e"># 说明：可以控制log从系统buffer刷入磁盘文件的刷新频率，增大可减轻系统负荷&lt;/span>
&lt;span style="color:#75715e"># 默认值是1；建议值不改。系统性能一般够用。&lt;/span>
innodb_flush_log_at_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：参数可设为0，1，2；&lt;/span>
&lt;span style="color:#75715e"># 参数0：表示每秒将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。&lt;/span>
&lt;span style="color:#75715e"># 参数1：表示每次事物提交，将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。&lt;/span>
&lt;span style="color:#75715e"># 参数2：表示每次事物提交，将log buffer内容刷新到系统buffer中，隔1秒后再调用系统flush操作写入磁盘文件。&lt;/span>
innodb_flush_log_at_trx_commit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。&lt;/span>
&lt;span style="color:#75715e"># 值默认是2000，建议值：参考数据库表总数再进行调整，一般够用不用调整。&lt;/span>
innodb_open_files &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8192&lt;/span>
&lt;span style="color:#75715e"># innodb处理io读写的后台并发线程数量，根据cpu核来确认，取值范围：1-64&lt;/span>
&lt;span style="color:#75715e"># 默认值：4，建议值：与逻辑cpu数量的一半保持一致。&lt;/span>
innodb_read_io_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
innodb_write_io_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量&lt;/span>
innodb_thread_concurrency &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 默认值为4，建议不变。InnoDB中的清除操作是一类定期回收无用数据的操作。mysql 5.5之后，支持多线程清除操作。&lt;/span>
innodb_purge_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 说明：mysql缓冲区分为new blocks和old blocks；此参数表示old blocks占比；&lt;/span>
&lt;span style="color:#75715e"># 默认值：37，建议值，一般不动&lt;/span>
innodb_old_blocks_pct &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span>
&lt;span style="color:#75715e"># 说明：新数据被载入缓冲池，进入old pages链区，当1秒后再次访问，则提升进入new pages链区。&lt;/span>
&lt;span style="color:#75715e"># 默认值：1000&lt;/span>
innodb_old_blocks_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>
&lt;span style="color:#75715e"># 说明：开启异步io，可以提高并发性，默认开启。&lt;/span>
&lt;span style="color:#75715e"># 默认值为1，建议不动&lt;/span>
innodb_use_native_aio &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：默认为空，使用data目录，一般不改。&lt;/span>
innodb_data_home_dir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data
&lt;span style="color:#75715e"># 说明：Defines the name, size, and attributes of InnoDB system tablespace data files.&lt;/span>
&lt;span style="color:#75715e"># 默认值，不指定，默认为ibdata1:12M:autoextend&lt;/span>
innodb_data_file_path &lt;span style="color:#f92672">=&lt;/span> ibdata1:12M:autoextend
&lt;span style="color:#75715e"># 说明：The crash recovery mode。只有紧急情况需要恢复数据的时候，才改为大于1-6之间数值，含义查下官网。&lt;/span>
&lt;span style="color:#75715e"># 默认值为0；&lt;/span>
&lt;span style="color:#75715e">#innodb_force_recovery = 0&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 其他。。。。&lt;/span>
&lt;span style="color:#75715e"># 参考http://www.kuqin.com/database/20120815/328905.html&lt;/span>
&lt;span style="color:#75715e"># skip-external-locking&lt;/span>
&lt;span style="color:#75715e"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。&lt;/span>
&lt;span style="color:#75715e"># 缺点：所有远程主机连接授权都要使用IP地址方式，因为只认得ip地址了。&lt;/span>
&lt;span style="color:#75715e"># skip_name_resolve = 0&lt;/span>
&lt;span style="color:#75715e"># 默认值为off,timestamp列会自动更新为当前时间，设置为on|1，timestamp列的值就要显式更新&lt;/span>
explicit_defaults_for_timestamp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>mysqldump&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e"># quick选项强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中&lt;/span>
quick
max_allowed_packet &lt;span style="color:#f92672">=&lt;/span> 16M
&lt;span style="color:#f92672">[&lt;/span>mysql&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e"># mysql命令行工具不使用自动补全功能，建议还是改为&lt;/span>
&lt;span style="color:#75715e"># no-auto-rehash&lt;/span>
auto-rehash
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建my.cnf后&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># 切换到安装目录&lt;/span>
cd /usr/local/mysql8
&lt;span style="color:#75715e"># 创建相关文件&lt;/span>
mkdir data log
chown -R mysql:mysql data log
&lt;span style="color:#75715e"># 初始化mysql, --defaults-file的参数就是刚才创建的配置文件, --basedir的参数就是mysql安装目录, --datadir的参数就是mysql数据目录&lt;/span>
./bin/mysqld --defaults-file&lt;span style="color:#f92672">=&lt;/span>/etc/my.cnf --initialize --user&lt;span style="color:#f92672">=&lt;/span>mysql --basedir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/ --datadir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data/
&lt;span style="color:#75715e"># 会返回类似代码&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013169&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span> /usr/local/mysql8/bin/mysqld &lt;span style="color:#f92672">(&lt;/span>mysqld 8.0.20&lt;span style="color:#f92672">)&lt;/span> initializing of server in progress as process &lt;span style="color:#ae81ff">48055&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013576&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>InnoDB&lt;span style="color:#f92672">]&lt;/span> InnoDB initialization has started.
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013577&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>InnoDB&lt;span style="color:#f92672">]&lt;/span> InnoDB initialization has ended.
&lt;span style="color:#f92672">[&lt;/span>Note&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-010454&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span> A temporary password is generated &lt;span style="color:#66d9ef">for&lt;/span> root@localhost: &lt;span style="color:#f92672">=&lt;/span>tsSl-.Wt3ud
&lt;span style="color:#75715e"># &amp;#34;root@localhost:&amp;#34; 后边跟着就是mysql为root生成的临时密码,记下来,开启mysql后,可以用这个密码登录(如果没返回上述代码,则查看日志,如: vim log/mysql-error.log)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启并修改root密码&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
cd /usr/local/mysql8
&lt;span style="color:#75715e"># 开启mysql&lt;/span>
./support-files/mysql.server start
&lt;span style="color:#75715e"># 登录并输入刚才记下的临时密码&lt;/span>
./bin/mysql -uroot -p
&lt;span style="color:#75715e"># 修改root密码&lt;/span>
mysql&amp;gt; alter user &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>@&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span> identified by &lt;span style="color:#e6db74">&amp;#34;123456&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="笔记三-开关mysql">笔记三: 开关mysql&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cd /usr/local/mysql8
&lt;span style="color:#75715e"># 开启mysql进程&lt;/span>
./bin/mysqld -u mysql
&lt;span style="color:#75715e"># 关闭mysql进程&lt;/span>
./bin/mysqladmin -uroot shutdown
&lt;span style="color:#75715e"># 开启mysqld的守护进程,实际上是开启mysqld,当mysqld意外关闭时,mysqld_safe自动重启mysqld(可添加--skip-grant-tables参数,root可免密登录)&lt;/span>
./bin/mysqld_safe --user&lt;span style="color:#f92672">=&lt;/span>mysql &amp;amp;
&lt;span style="color:#75715e"># 关闭mysqld的守护进程&lt;/span>
./bin/mysqladmin -uroot shutdown
&lt;span style="color:#75715e"># 开启mysql服务,实际是开启mysqld_safe&lt;/span>
./support-files/mysql.server start
&lt;span style="color:#75715e"># 关闭mysql服务&lt;/span>
./support-files/mysql.server stop
&lt;span style="color:#75715e"># 登录mysql&lt;/span>
./bin/mysql -uroot -p
&lt;span style="color:#75715e"># 软连接(软连接的源文件路径要写成绝对路径)&lt;/span>
ln -s /usr/local/mysql8/bin/* /usr/local/bin/
&lt;span style="color:#75715e"># 启动设置&lt;/span>
cp support-files/mysql.server /etc/init.d/mysql.server
&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>