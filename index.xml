<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>忐忑の博客</title><link>https://twbworld.github.io/</link><atom:link href="https://twbworld.github.io/index.xml" rel="self" type="application/rss+xml"/><description>忐忑の博客</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>[![忐忑的博客](https://img.shields.io/badge/©-2020%20%2D-%202021_忐忑-yellow)](/authors/admin/) [![忐忑的博客](https://img.shields.io/github/tag/twbworld/twbworld.GitHub.io?logo=github)](https://github.com/twbworld/twbworld.GitHub.io) [![Hugo](https://img.shields.io/badge/powered-hugo-ff4088?logo=hugo)](https://gohugo.io/) [![wowchemy](https://img.shields.io/badge/theme-wowchemy-00d1b2)](https://wowchemy.com/)</copyright><lastBuildDate>Thu, 20 May 2021 23:00:00 +0800</lastBuildDate><image><url>https://twbworld.github.io/media/avatar.jpg</url><title>忐忑の博客</title><link>https://twbworld.github.io/</link></image><item><title>Postman无法抓包Chrome</title><link>https://twbworld.github.io/post/postman_cannot_connection_chrome/</link><pubDate>Thu, 20 May 2021 23:00:00 +0800</pubDate><guid>https://twbworld.github.io/post/postman_cannot_connection_chrome/</guid><description>&lt;h2 id="原因">原因&lt;/h2>
&lt;p>Mac安装了两个版本(我的是正式版和&lt;code>Dev&lt;/code>版)的 &lt;code>Chrome&lt;/code> ,一个正常, 另一个版本无法与 &lt;code>Postman&lt;/code> 连接, 无法被抓包(Windows不会出现这样的情况)&lt;br>
原因是不正常的版本缺少了一个 &lt;code>Interceptor&lt;/code> 插件的配置文件, 按&lt;a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/interceptor/#how-it-works" target="_blank" rel="noopener">文档&lt;/a>所述,正常文件位于 &lt;code>/Users/&amp;lt;username&amp;gt;/Library/Application Support/Google/Chrome/NativeMessagingHosts/com.postman.postmanapp.json&lt;/code>&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>也简单,配置文件位于 正式版的 &lt;code>Chrome&lt;/code> 下, 解决方法就是复制一份到对应的版本的 &lt;code>Chrome&lt;/code> 的对应目录下
如复制文件到Dev版的 &lt;code>Chrome&lt;/code>对应目录: &lt;code>/Users/&amp;lt;username&amp;gt;/Library/Application Support/Google/Chrome Dev/NativeMessagingHosts/com.postman.postmanapp.json&lt;/code>&lt;/p></description></item><item><title>Postman抓包https</title><link>https://twbworld.github.io/post/postman_capture_https/</link><pubDate>Thu, 20 May 2021 22:00:00 +0800</pubDate><guid>https://twbworld.github.io/post/postman_capture_https/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;blockquote>
&lt;p>虽然会使用 &lt;code>Charles&lt;/code>(花瓶) , 但如果 &lt;code>Postman&lt;/code> 也可以实相同的功能, 少用一个工具, 那谁能不爱呢, 借 &lt;code>Postman&lt;/code> 强大的发包功能, 就更方便了&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>今天要展示的是, 抓取iOS的https包(Android7以后, 只能获取Root权限才能安装并信任CA证书, 所以就不以Android为例了)&lt;/p>
&lt;/blockquote>
&lt;h2 id="安装并信任证书">安装并信任证书&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>安装Postman后, 根据&lt;a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-http-requests/#macos" target="_blank" rel="noopener">文档&lt;/a>的指示, Postman的CA证书位于&lt;br>
Mac: &lt;code>~/Library/Application Support/Postman/proxy/postman-proxy-ca.crt&lt;/code>&lt;br>
Windows: &lt;code>C:\Users&amp;lt;user&amp;gt;\AppData\Roaming\Postman\proxy/postman-proxy-ca.crt&lt;/code>&lt;br>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210520225920.png" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>找到证书后,想办法把证书传到iOS, 并打开, iOS会识别并提示&lt;br>
打开 &lt;code>设置=&amp;gt;通用=&amp;gt;描述文件&lt;/code> , 可以看到一个 &lt;code>已下载&lt;/code> 但未安装的证书, 安装就好&lt;br>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210520230353.jpeg" alt="">&lt;br>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210520230534.jpeg" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>安装完证书,还要让iOS信任该证书&lt;br>
打开 &lt;code>设置=&amp;gt;通用=&amp;gt;关于本机=&amp;gt;证书信任设置&lt;/code> 找到对应的Postman证书并开启信任&lt;br>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210520231655.png" alt="">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="设置代理并抓包">设置代理并抓包&lt;/h2>
&lt;p>到此,后面的步骤就也就不难了,网上也有不少教程,在此不详解&lt;/p>
&lt;ol>
&lt;li>在Mac或Windows上的Postman开启代理,设置端口&lt;/li>
&lt;li>iOS与Mac或Windows连接同一个网络(WIFI)&lt;/li>
&lt;li>打开iOS的WiFI页, &lt;code>配置手动代理&lt;/code>, 填写Mac或Windows的IP地址和前一步设置的端口&lt;/li>
&lt;li>不出意外, Postman就可以抓取到https的数据包了,位于左侧的 &lt;code>History&lt;/code> 栏下&lt;/li>
&lt;/ol>
&lt;p>官方操作传送门 &lt;a href="https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-http-requests/#using-postmans-proxy-example">https://learning.postman.com/docs/sending-requests/capturing-request-data/capturing-http-requests/#using-postmans-proxy-example&lt;/a>&lt;/p></description></item><item><title>使用Github Actions发布docker镜像到仓库</title><link>https://twbworld.github.io/post/github-actions_publish_images/</link><pubDate>Sat, 13 Mar 2021 14:00:00 +0800</pubDate><guid>https://twbworld.github.io/post/github-actions_publish_images/</guid><description>&lt;h2 id="前文">前文&lt;/h2>
&lt;p>关于发布Docker镜像到仓库, 思路有不少, 比如:&lt;/p>
&lt;ol>
&lt;li>本地生成Docker镜像后, 使用 &lt;code>docker login&lt;/code> 登录, 然后再 &lt;code>docker push&lt;/code> 发布到仓库(Docker Hub等)&lt;/li>
&lt;li>Docker仓库平台(Docker Hub等) 关联 &lt;code>Github项目&lt;/code> , &lt;code>git push&lt;/code> 后, 仓库平台会获取 &lt;code>Github项目&lt;/code> 下的 &lt;code>Dockerfile&lt;/code> 等相关文件, 自动构建Docker镜像&lt;/li>
&lt;/ol>
&lt;p>本文要讲的是第3种思路, 利用 &lt;code>Github Actions&lt;/code> 自动化构建和发布, 与 &lt;code>Github&lt;/code> 更高度的结合&lt;/p>
&lt;h2 id="仓库平台区别">仓库平台区别&lt;/h2>
&lt;p>&lt;code>Docker Hub&lt;/code> 再熟悉不过, 它是Docker的官方平台, 不作多介绍&lt;/p>
&lt;p>对于 &lt;code>Github&lt;/code> 下却有两个发布Docker镜像的平台, &lt;code>ghcr.io&lt;/code> 和 &lt;code>docker.pkg.github.com&lt;/code>&lt;/p>
&lt;h4 id="区别1">区别1&lt;/h4>
&lt;p>前者发布的镜像在 &lt;code>用户&lt;/code> 之下, 地址格式 : &lt;code>https://ghcr.io/[用户名]/[镜像名]&lt;/code>&lt;/p>
&lt;p>后者发布的镜像在 &lt;code>项目&lt;/code> 之下, 地址格式 : &lt;code>https://docker.pkg.github.com/[用户名]/[项目名]/[镜像名]&lt;/code>&lt;/p>
&lt;h4 id="区别2">区别2&lt;/h4>
&lt;p>前者下的镜像可选择公开, 任何人都可 &lt;code>docker pull&lt;/code>&lt;/p>
&lt;p>后者却只能用户授权才能 &lt;code>docker pull&lt;/code>&lt;/p>
&lt;p>&lt;em>&lt;strong>本文重点讲如何发布到 &lt;code>ghcr.io&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="发布到ghcrio">发布到ghcr.io&lt;/h2>
&lt;h3 id="步骤一">步骤一&lt;/h3>
&lt;p>想要在 &lt;code>GitHub&lt;/code> 使用 &lt;code>ghcr.io&lt;/code> , 首先要 &lt;a href="https://docs.github.com/cn/packages/guides/enabling-improved-container-support" target="_blank" rel="noopener">启用改进的容器支持&lt;/a>&lt;/p>
&lt;h3 id="步骤二">步骤二&lt;/h3>
&lt;p>需要生成 GitHub账号 的 &lt;code>Token&lt;/code> ; 用于 &lt;code>GitHub-Actions&lt;/code> 有权限操作 &lt;code>GitHub账号&lt;/code> 下的项目 ;&lt;br>
登录 &lt;code>GitHub&lt;/code> , 右上角点击用户头像, 找到 &lt;code>settings &amp;gt; Developer settings &amp;gt; Personal access tokens&lt;/code> , 点击 &lt;code>Generate new token&lt;/code> , &lt;a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">传送门直达&lt;/a> , 如图 :
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313151850.png" alt="">
接着, 设置 &lt;code>Token&lt;/code> 的权限, 选择 &lt;code>write:packages&lt;/code> (这样,连同 &lt;code>repo&lt;/code> 都一起勾选了), 如图 :
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313152515.png" alt="">
最后生成了一个 &lt;code>Token&lt;/code> , 一定要记录下来, 下一步要用到&lt;/p>
&lt;h3 id="步骤三">步骤三&lt;/h3>
&lt;p>把生成的 &lt;code>Token&lt;/code> 添加到您的GitHub项目 &lt;code>secrets&lt;/code> 下 ; 找到项目下 &lt;code>Setting &amp;gt; secrets&lt;/code> , 右上角点击 &lt;code>New repository secret&lt;/code> , 如图
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313153743.png" alt="">&lt;/p>
&lt;p>如图&lt;br>
&lt;code>Name&lt;/code> 值填写 &lt;code>PACKAGES_TOKEN&lt;/code> (可自定义, 但下一步用到的 &lt;code>secrets.PACKAGES_TOKEN&lt;/code> 同步要改)&lt;br>
&lt;code>Value&lt;/code> 值填写 上一步获得的 &lt;code>Token&lt;/code> , 最后点击 &lt;code>Add secret&lt;/code> ;&lt;br>
&lt;code>GitHub-Actions&lt;/code> 就可通过&lt;code>secrets.PACKAGES_TOKEN&lt;/code> 获取 &lt;code>Token&lt;/code> , 用于发布镜像到 &lt;code>ghcr.io&lt;/code> 了
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313154015.png" alt="">&lt;/p>
&lt;h3 id="步骤三-1">步骤三&lt;/h3>
&lt;p>如何使用 &lt;code>GitHub-Actions&lt;/code> 在此不过多简释, 直接贴出代码 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ci&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">workflow_dispatch&lt;/span>: &lt;span style="color:#75715e">#github页面手动触发&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">tags&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;v*.*&amp;#34;&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">IMAGE_NAME&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span> &lt;span style="color:#75715e">#这是您的镜像名&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">get-tags&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">outputs&lt;/span>:
&lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.set-output-id.outputs.tags }}&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">set-output&lt;/span>
&lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">set-output-id&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> VERSION=edge
&lt;/span>&lt;span style="color:#e6db74"> if [[ $GITHUB_REF == refs/tags/* ]]; then
&lt;/span>&lt;span style="color:#e6db74"> VERSION=${GITHUB_REF#refs/tags/v}
&lt;/span>&lt;span style="color:#e6db74"> fi
&lt;/span>&lt;span style="color:#e6db74"> echo ::set-output name=tags::${VERSION}&lt;/span>
&lt;span style="color:#f92672">push-ghcr&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">REGISTRY&lt;/span>: &lt;span style="color:#ae81ff">ghcr.io&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Login&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/login-action@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">registry&lt;/span>: &lt;span style="color:#ae81ff">${{ env.REGISTRY }}&lt;/span>
&lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ github.repository_owner }}&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PACKAGES_TOKEN }}&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build &amp;amp;&amp;amp; Push&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/build-push-action@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">.&lt;/span>
&lt;span style="color:#f92672">file&lt;/span>: &lt;span style="color:#ae81ff">./Dockerfile&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tags&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;a href="https://github.com/metcalfc/docker-action-examples/blob/main/.github/workflows/release.yml" target="_blank" rel="noopener">借鉴代码&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如图, &lt;code>GitHub-Actions&lt;/code> 运行成功后, 在用户首页下的 &lt;code>Packages&lt;/code> 模块下, 新增了一个 &lt;code>Packages&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313162701.png" alt="">
但是, 可看到 &lt;code>Private&lt;/code> 标签, 也就是说, 这个Docker镜像默认不公开的 ; 如需要公开, 请往下看&lt;/p>
&lt;h3 id="步骤四">步骤四&lt;/h3>
&lt;p>公开 &lt;code>Packages&lt;/code> 下的Docker镜像 ; 进入需要公开的镜像后, 点击右上角 &lt;code>Package Settings&lt;/code> , 进入配置页面
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313163101.png" alt="">
拉到低, 点击 &lt;code>Change visibility&lt;/code> , 就可设置为公开 ;&lt;br>
在任何地方, 都可以下载镜像: &lt;code>docker pull ghcr.io/[用户名]/[镜像名]:[标签]&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313163237.png" alt="">&lt;/p>
&lt;h3 id="步骤五">步骤五&lt;/h3>
&lt;p>虽然这个镜像是通过您的GitHub项目发布的, 但默认是不会关联到对应GitHub项目的 ;&lt;br>
在上文 &lt;a href="#%e4%bb%93%e5%ba%93%e5%b9%b3%e5%8f%b0%e5%8c%ba%e5%88%ab">仓库平台区别&lt;/a> 已经知道, &lt;code>ghcr.io&lt;/code> 下的镜像是对应账号, 而不是 &lt;code>项目&lt;/code> 的 ;&lt;br>
如果需要将该镜像关联到对应项目, 也很简单 :&lt;br>
如图 , 进入该镜像的页面, 在页面下就可以看到 &lt;code>Connect Repository&lt;/code> 按钮, 点击关联对应的项目 ; 项目下的 &lt;code>README.md&lt;/code> 也会加载进来
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313164825.png" alt="">&lt;/p>
&lt;p>来到对应的GitHub项目下, 也可以看到关联的Docker镜像, 如图 :
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210313165559.png" alt="">&lt;/p>
&lt;h2 id="发布到其他仓库">发布到其他仓库&lt;/h2>
&lt;p>给出全部代码, 同时发布到 &lt;code>Docker Hub&lt;/code> / &lt;code>ghcr.io&lt;/code> / &lt;code>docker.pkg.github.com&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ci&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">workflow_dispatch&lt;/span>: &lt;span style="color:#75715e">#github页面手动触发&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>:
&lt;span style="color:#f92672">tags&lt;/span>:
- &lt;span style="color:#e6db74">&amp;#34;v*.*&amp;#34;&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">IMAGE_NAME&lt;/span>: &lt;span style="color:#ae81ff">test&lt;/span> &lt;span style="color:#75715e">#这是您的镜像名&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">get-tags&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">outputs&lt;/span>:
&lt;span style="color:#f92672">tags&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.set-output-id.outputs.tags }}&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">set-output&lt;/span>
&lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">set-output-id&lt;/span>
&lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> VERSION=edge
&lt;/span>&lt;span style="color:#e6db74"> if [[ $GITHUB_REF == refs/tags/* ]]; then
&lt;/span>&lt;span style="color:#e6db74"> VERSION=${GITHUB_REF#refs/tags/v}
&lt;/span>&lt;span style="color:#e6db74"> fi
&lt;/span>&lt;span style="color:#e6db74"> echo ::set-output name=tags::${VERSION}&lt;/span>
&lt;span style="color:#f92672">push-ghcr&lt;/span>:
&lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">get-tags&lt;/span>
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">REGISTRY&lt;/span>: &lt;span style="color:#ae81ff">ghcr.io&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Login&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/login-action@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">registry&lt;/span>: &lt;span style="color:#ae81ff">${{ env.REGISTRY }}&lt;/span>
&lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ github.repository_owner }}&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PACKAGES_TOKEN }}&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build &amp;amp;&amp;amp; Push&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/build-push-action@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">.&lt;/span>
&lt;span style="color:#f92672">file&lt;/span>: &lt;span style="color:#ae81ff">./Dockerfile&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tags&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest&lt;/span>
&lt;span style="color:#f92672">push-docker-hub&lt;/span>:
&lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">get-tags&lt;/span>
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Login&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/login-action@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.DOCKERHUB_USERNAME }}&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.DOCKERHUB_TOKEN }}&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build &amp;amp;&amp;amp; Push&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/build-push-action@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">.&lt;/span>
&lt;span style="color:#f92672">file&lt;/span>: &lt;span style="color:#ae81ff">./Dockerfile&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tags&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
&lt;/span>&lt;span style="color:#e6db74"> ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest&lt;/span>
&lt;span style="color:#f92672">push-docker-pkg-github&lt;/span>:
&lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">get-tags&lt;/span>
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;span style="color:#f92672">env&lt;/span>:
&lt;span style="color:#f92672">REGISTRY&lt;/span>: &lt;span style="color:#ae81ff">docker.pkg.github.com&lt;/span>
&lt;span style="color:#f92672">TZ&lt;/span>: &lt;span style="color:#ae81ff">Asia/Shanghai&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v2&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Login&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/login-action@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">registry&lt;/span>: &lt;span style="color:#ae81ff">${{ env.REGISTRY }}&lt;/span>
&lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ github.actor }}&lt;/span>
&lt;span style="color:#f92672">password&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PACKAGES_TOKEN }}&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Build &amp;amp;&amp;amp; Push&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">docker/build-push-action@v2&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">context&lt;/span>: &lt;span style="color:#ae81ff">.&lt;/span>
&lt;span style="color:#f92672">file&lt;/span>: &lt;span style="color:#ae81ff">./Dockerfile&lt;/span>
&lt;span style="color:#f92672">push&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;span style="color:#f92672">tags&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ needs.get-tags.outputs.tags }}
&lt;/span>&lt;span style="color:#e6db74"> ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:latest&lt;/span>
- &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Delete Package&lt;/span>
&lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/delete-package-versions@v1&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">package-name&lt;/span>: &lt;span style="color:#ae81ff">${{ env.IMAGE_NAME }}&lt;/span>
&lt;span style="color:#f92672">num-old-versions-to-delete&lt;/span>: &lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#75715e">#删除最旧的一个包&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>GitHub-Actions 真香 !&lt;/p>
&lt;/blockquote></description></item><item><title>GitHub Actions无法触发</title><link>https://twbworld.github.io/post/github_actions_invalid/</link><pubDate>Sat, 23 Jan 2021 19:00:00 +0800</pubDate><guid>https://twbworld.github.io/post/github_actions_invalid/</guid><description>&lt;h2 id="问题">问题&lt;/h2>
&lt;blockquote>
&lt;p>刚刚接触github actions实现CI/CD, 遇到了一个yml文件触发失败的问题&lt;/p>
&lt;/blockquote>
&lt;p>yml文件配置如下 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-yml" data-lang="yml">&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">ci-test&lt;/span>
&lt;span style="color:#f92672">on&lt;/span>:
&lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;span style="color:#f92672">branches&lt;/span>:
- &lt;span style="color:#ae81ff">dev&lt;/span>
&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;span style="color:#f92672">ssh-login&lt;/span>:
&lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;span style="color:#f92672">steps&lt;/span>:
- &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">appleboy/ssh-action@master&lt;/span>
&lt;span style="color:#f92672">with&lt;/span>:
&lt;span style="color:#f92672">host&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.HOST }}&lt;/span>
&lt;span style="color:#f92672">username&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.USERNAME }}&lt;/span>
&lt;span style="color:#f92672">key&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.KEY }}&lt;/span>
&lt;span style="color:#f92672">port&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.PORT }}&lt;/span>
&lt;span style="color:#f92672">script&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;span style="color:#e6db74"> &lt;/span> &lt;span style="color:#ae81ff">ls ./&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当使用 &lt;code>git pull&lt;/code> 时, 却没有触发该yml文件(在github项目的Actions的选项卡下不存在任务)&lt;br>
但是,当把触发条件 &lt;code>pull_request&lt;/code> 改成 &lt;code>push&lt;/code> , 再push到Github 却意外的成功了触发了Actions&lt;/p>
&lt;h2 id="解决">解决&lt;/h2>
&lt;p>最后多次尝试,才发现问题 :&lt;/p>
&lt;p>&lt;em>&lt;strong>&lt;code>pull_request&lt;/code> 触发条件只能在默认分支上使用, 也就是说我的配置项 &lt;code>branches&lt;/code> 下的 &lt;code>dev&lt;/code> 不是项目的默认分支, 所以触发Actions失败, 除此之外还有 &lt;code>workflow_run&lt;/code> | &lt;code>issue&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;blockquote>
&lt;p>都怪没认真看&lt;a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows" target="_blank" rel="noopener">文档&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>另外再做个笔记 :&lt;br>
如果 &lt;code>workflows&lt;/code> 目录下有多个yml, GitHub-Actions默认是并行触发的, 如果想实现按顺序触发, 请使用 &lt;a href="https://docs.github.com/cn/actions/reference/events-that-trigger-workflows#workflow_run" target="_blank" rel="noopener">&lt;code>workflow_run&lt;/code>&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>GitHub-Actions 真香 !&lt;/p>
&lt;/blockquote></description></item><item><title>学习笔记</title><link>https://twbworld.github.io/post/note/</link><pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate><guid>https://twbworld.github.io/post/note/</guid><description>&lt;h2 id="扩展知识">扩展知识&lt;/h2>
&lt;h3 id="双系统制作">双系统制作&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://blog.csdn.net/mengxiangjia_linxi/article/details/78965103">https://blog.csdn.net/mengxiangjia_linxi/article/details/78965103&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>电脑已有 &lt;code>Windows系统&lt;/code> 的前提下,用 &lt;code>UltraISO&lt;/code> 把 &lt;code>centos系统&lt;/code> 刻入U盘&lt;/li>
&lt;li>启动系统U盘(新机用 &lt;code>uefi启动&lt;/code> ),在系统选择页面,按下 &lt;code>tab健&lt;/code> 修改启动项,把 &lt;code>LABEL=CentOS\x207\x20x86_64&lt;/code> 改为 &lt;code>/dev/sdb4&lt;/code> (不一定是 &lt;code>sdb4&lt;/code> ,可能是 &lt;code>sda4&lt;/code> , &lt;code>sdc4&lt;/code> 等等,具体百度)&lt;/li>
&lt;li>安装系统界面,选择硬盘,自动分配分区得以回收空间&lt;/li>
&lt;li>重做 &lt;code>PE启动盘&lt;/code> ,启动盘用 &lt;code>NTBOOT&lt;/code> 软件做 &lt;code>双系统引导修复&lt;/code>&lt;/li>
&lt;/ol>
&lt;h2 id="常用-命令快捷键">常用 命令&amp;amp;&amp;amp;快捷键&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>..&lt;/td>
&lt;td>上一级目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cd -&lt;/td>
&lt;td>上一次目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctrl+C&lt;/td>
&lt;td>强制中断&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctrl+U&lt;/td>
&lt;td>清除输入命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!v&lt;/td>
&lt;td>执行上一条以&amp;rsquo;v&amp;rsquo;开头的命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ll&lt;/td>
&lt;td>ls -l 缩写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&amp;gt;&amp;amp;1&lt;/td>
&lt;td>输出错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|grep&lt;/td>
&lt;td>过滤结果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctrl+a/e&lt;/td>
&lt;td>命令最前/后&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>clear&lt;/td>
&lt;td>清屏(或ctrl+L)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pwd&lt;/td>
&lt;td>当前目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cat&lt;/td>
&lt;td>查看文件内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mkdir/mv/cp/rm&lt;/td>
&lt;td>文件名操作&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>\cp&lt;/td>
&lt;td>当有同名文件,不需要输&amp;quot;Y&amp;quot;即可覆盖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>useradd&lt;/td>
&lt;td>创建新用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>which&lt;/td>
&lt;td>查找命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chown&lt;/td>
&lt;td>设置文件拥有者&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chmod&lt;/td>
&lt;td>设置u/g/o权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>setfacl -R -m u:apache:rwx /var&lt;/td>
&lt;td>设置单独用户的权限(getfacl查看)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chattr&lt;/td>
&lt;td>设置文件属性,如设置成禁止删除文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ps -ef(ps aux)&lt;/td>
&lt;td>查看所有进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pstree -p&lt;/td>
&lt;td>查看进程树&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pkill httpd&lt;/td>
&lt;td>关闭某进程(或killall)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>uptime&lt;/td>
&lt;td>计算机负载&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>top&lt;/td>
&lt;td>实时负载(可安装htop加强版)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>df -h&lt;/td>
&lt;td>磁盘占用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>du -h &amp;ndash;max-depth=0 * (du -sh *)&lt;/td>
&lt;td>目录下各个文件大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pkill -kill -t pts/1&lt;/td>
&lt;td>强退指定用户&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>who&lt;/td>
&lt;td>在线用户(或缩写w)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>last&lt;/td>
&lt;td>用户登录历史记录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>id&lt;/td>
&lt;td>查看用户所在的组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lsof -i:80&lt;/td>
&lt;td>查看端口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>netstat -antup | grep nginx&lt;/td>
&lt;td>查看进程或端口等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>man&lt;/td>
&lt;td>命令帮助(可安装中文软件)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>curl ifconfig.me&lt;/td>
&lt;td>查看公网ip&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rpm -qa|grep&lt;/td>
&lt;td>查看应用程序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pkill -HUP nginx&lt;/td>
&lt;td>系统级别重载配置文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>systemctl status nginx.service&lt;/td>
&lt;td>查看状态(或service nginx status)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chkconfig iptables off&lt;/td>
&lt;td>永久关闭防火墙&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chkconfig iptables on&lt;/td>
&lt;td>永久关闭后重启&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ln -s&lt;/td>
&lt;td>软连接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>composer dump-autoload&lt;/td>
&lt;td>可解决加载失败&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>nohup &amp;lt;shell&amp;gt;&lt;/td>
&lt;td>在后台运行shell命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tree -LNFC 2&lt;/td>
&lt;td>tree软件常用命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>tar -xaf&lt;/td>
&lt;td>识别压缩文件类型,进行解压(-caf)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>unzip -O cp936&lt;/td>
&lt;td>zip文件解压避免乱码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>scp -r /var &lt;a href="mailto:root@127.0.0.1">root@127.0.0.1&lt;/a>:/var/&lt;/td>
&lt;td>目录传输&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>find / -type f -name &amp;ldquo;*.txt&amp;rdquo; | xargs grep &amp;ldquo;hello&amp;rdquo;&lt;/td>
&lt;td>查找文件内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cat &amp;lt;filename&amp;gt; | openssl dgst -sha256 -binary | openssl base64 -A&lt;/td>
&lt;td>计算文件sha256校验值(css校验方法:&lt;code>&amp;lt;link href=&amp;quot;filename.css&amp;quot; integrity=&amp;quot;sha256-h20CPZ0QyXlBuAw7A+KluUYx/3pK+c7lYEpqLTlxjYQ=&amp;quot;&amp;gt;&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha256sum filename&lt;/td>
&lt;td>计算文件md5校验值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>docker container list -aq |xargs docker container rm&lt;/td>
&lt;td>docker清理容器(同样效果 &lt;code>docker container prune&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>docker volume ls -q |xargs docker volume rm&lt;/td>
&lt;td>docker清理卷(同样效果 &lt;code>docker volume prune&lt;/code>)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="git">Git&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>git diff &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
&lt;td>工作区版本库对比&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git diff &amp;lt;commit-id&amp;gt; &amp;lt;commit-id&amp;gt; --stat&lt;/code>&lt;/td>
&lt;td>比较两个版本变化了的文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git commit --amend&lt;/code>&lt;/td>
&lt;td>修改已commit的备注&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git commit –am &amp;lt;备注&amp;gt;&lt;/code>&lt;/td>
&lt;td>直接跳过add命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git reset --hard HEAD&lt;/code>&lt;/td>
&lt;td>还原最新版&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git reset --hard &amp;lt;commit-id&amp;gt;&lt;/code>&lt;/td>
&lt;td>还原指定版&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git reset HEAD &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
&lt;td>放弃暂存区的修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git checkout -- &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
&lt;td>放弃工作区的修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git checkout . &amp;amp;&amp;amp; git clean -df&lt;/code>&lt;/td>
&lt;td>清除所有新增的文件目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git checkout –b &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
&lt;td>创建并切换分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git branch -D &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
&lt;td>丢弃未合并的分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git branch -r -d origin/&amp;lt;name&amp;gt; &amp;amp;&amp;amp; git push origin :&amp;lt;name&amp;gt;&lt;/code>&lt;/td>
&lt;td>删除远程分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git mergetool&lt;/code>&lt;/td>
&lt;td>解决冲突的合并工具&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git tag -a &amp;lt;name&amp;gt; -m &amp;lt;备注&amp;gt; &amp;lt;commit-id&amp;gt;&lt;/code>&lt;/td>
&lt;td>创建并指定标签信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git show &amp;lt;name&amp;gt;&lt;/code>&lt;/td>
&lt;td>查看标签信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git stash&lt;/code>&lt;/td>
&lt;td>保存当前工作现场&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git stash pop&lt;/code>&lt;/td>
&lt;td>恢复并删除工作现场&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git stash list&lt;/code>&lt;/td>
&lt;td>查看工作现场&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git stash apply &amp;lt;stash@{0}&amp;gt;&lt;/code>&lt;/td>
&lt;td>恢复工作现场&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git stash drop &amp;lt;stash@{0}&amp;gt;&lt;/code>&lt;/td>
&lt;td>删除工作现场&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git reflog &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
&lt;td>命令历史&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git revert &amp;lt;commit-id&amp;gt;&lt;/code>&lt;/td>
&lt;td>撤销某个版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git cherry-pick &amp;lt;commit-id&amp;gt;&lt;/code>&lt;/td>
&lt;td>提取某个分支的某个版本到当前分支&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git check-ignore -v &amp;lt;file&amp;gt;&lt;/code>&lt;/td>
&lt;td>检查哪个规则忽略了文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git rm -rf --cached . &amp;amp;&amp;amp; git add -A&lt;/code>&lt;/td>
&lt;td>清徐缓存,用于更新gitignore&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git submodule add &amp;lt;远程项目地址&amp;gt; &amp;lt;路径&amp;gt;&lt;/code>&lt;/td>
&lt;td>添加子模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git submodule update --init --recursive&lt;/code>&lt;/td>
&lt;td>下载所有子模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git submodule update --remote&lt;/code>&lt;/td>
&lt;td>更新所有子模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git worktree add ../folder master&lt;/code>&lt;/td>
&lt;td>关联某分支到目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git remote show origin&lt;/code>&lt;/td>
&lt;td>详细的远程分支的信息&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git log --oneline --graph --decorate --all -9&lt;/code>&lt;/td>
&lt;td>可视化显示版本树&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git config --global alias.lg &amp;quot;log --color --graph --all --oneline --decorate --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset' --abbrev-commit&amp;quot;&lt;/code>&lt;/td>
&lt;td>可视化显示版本树配置别名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git config --global core.filemode false&lt;/code>&lt;/td>
&lt;td>关闭git对文件权限的监视&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git config --global core.quotepath false&lt;/code>&lt;/td>
&lt;td>正常显示中文文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>git config --global color.ui true&lt;/code>&lt;/td>
&lt;td>彩色显示&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="vim">Vim&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>效果&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>!&amp;lt;shell&amp;gt;&lt;/td>
&lt;td>执行系统命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>u&lt;/td>
&lt;td>后退&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl + r&lt;/td>
&lt;td>前进&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>i/I/a/A/o/O&lt;/td>
&lt;td>前/行首/后/行尾/上行/下行 插入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>b/e/^/$/H/M/L/gg/G&lt;/td>
&lt;td>移动光标到 跳前/跳后/行首/行尾/窗头/窗中/窗尾/头部/尾部&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl + b/f/d/u&lt;/td>
&lt;td>翻一页/半页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>D&lt;/td>
&lt;td>删除到行尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dG&lt;/td>
&lt;td>向下删除&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dd&lt;/td>
&lt;td>删除当前行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>yy&lt;/td>
&lt;td>复制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>粘贴&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ddp&lt;/td>
&lt;td>与下行互换位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>yyp&lt;/td>
&lt;td>新增一行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ggvG&lt;/td>
&lt;td>全选&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>set number&lt;/td>
&lt;td>显示行数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>vim +X &amp;lt;filename&amp;gt;&lt;/td>
&lt;td>文件加密&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>:&amp;lt;number&amp;gt;&lt;/td>
&lt;td>跳到指定行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>/&amp;lt;name&amp;gt;&lt;/td>
&lt;td>搜索(按 n/N 向 下/上 查找)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="sublime">Sublime&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Ctrl+Shift+L&lt;/td>
&lt;td>所有选中的行,在行后后出现光标&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+Shift+M&lt;/td>
&lt;td>选中括号里的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+M&lt;/td>
&lt;td>光标在括号前后跳&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+Shift+[ / ]&lt;/td>
&lt;td>隐藏/显示 内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+J&lt;/td>
&lt;td>多行成一行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+KK&lt;/td>
&lt;td>删除行后的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+K+U / L&lt;/td>
&lt;td>选中的内容 大写/小写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+F2&lt;/td>
&lt;td>标记行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>F6&lt;/td>
&lt;td>检错&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+.&lt;/td>
&lt;td>补充标签&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+数字&lt;/td>
&lt;td>跳转tag&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shift+pgup&lt;/td>
&lt;td>向下选择&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="vimium">Vimium&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>o&lt;/td>
&lt;td>搜索&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>j/k&lt;/td>
&lt;td>滚动&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>gg/G&lt;/td>
&lt;td>头/底部&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>d/u&lt;/td>
&lt;td>翻页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>f&lt;/td>
&lt;td>打开连接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>x/X&lt;/td>
&lt;td>关闭/恢复标签页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>J/K&lt;/td>
&lt;td>上/下一个标签页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>yy&lt;/td>
&lt;td>复制链接&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>H/L&lt;/td>
&lt;td>后退/前进记录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>p&lt;/td>
&lt;td>刷新&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>t&lt;/td>
&lt;td>新建标签页&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="chrome">chrome&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Ctrl+0&lt;/td>
&lt;td>恢复100%&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+j&lt;/td>
&lt;td>下载页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+Shift+Delete&lt;/td>
&lt;td>清除数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Ctrl+u&lt;/td>
&lt;td>html源码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chrome://net-internals/#dns&lt;/td>
&lt;td>清除DNS&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="windows">windows&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>快捷键&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Win+←&lt;/td>
&lt;td>小化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>win+v&lt;/td>
&lt;td>粘贴板&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Win+i&lt;/td>
&lt;td>设置页&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Shift+Ctrl+Esc&lt;/td>
&lt;td>任务管理器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+F4&lt;/td>
&lt;td>关机&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+1/Enter/双击&lt;/td>
&lt;td>查看文件属性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+↑&lt;/td>
&lt;td>上一级目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alt+2(Shift+Ctrl+n)&lt;/td>
&lt;td>新建文件夹&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>右击+v+d&lt;/td>
&lt;td>隐藏图标(等等操作)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctrl+win+D&lt;/td>
&lt;td>新建桌面&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctrl+win+←&lt;/td>
&lt;td>返回桌面(老板键)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="linux-1">Linux&lt;/h2>
&lt;ul>
&lt;li>端口号&amp;lt;1024为系统预留端口&lt;/li>
&lt;li>uid &amp;lt; 500 为系统用户&lt;/li>
&lt;li>非&lt;code>root&lt;/code>用户不能监听&amp;lt;1024的端口(所以一般&lt;code>root&lt;/code>启动&lt;code>nginx&lt;/code>)&lt;/li>
&lt;li>nobody为Linux非登录用户,其作为nginx运行用户可保证安全&lt;/li>
&lt;li>&lt;code>Linux&lt;/code>的共享:&lt;code>NFS&lt;/code>协议&lt;/li>
&lt;li>&lt;code>windows&lt;/code>与&lt;code>linux&lt;/code>共享:&lt;code>SMB&lt;/code>协议(&lt;code>Samba&lt;/code>软件)&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>权限&lt;/th>
&lt;th>符号&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>可执行&lt;/td>
&lt;td>x&lt;/td>
&lt;td>可以进入该目录,无法读取该目录中的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>可执行可读&lt;/td>
&lt;td>xr&lt;/td>
&lt;td>可以进入该目录并读取该目录中的内容,不能创建文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>可执行可写&lt;/td>
&lt;td>xw&lt;/td>
&lt;td>可以创建文件但是不能读取&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>目录描述 :&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210404165626.jpg" alt="">&lt;/p>
&lt;ul>
&lt;li>Linux环境安装流程 :
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">.bashrc命令别名
ufw防火墙关闭
静态ip
ali源
vim安装及.vimrc解决乱码
ssh安装及配置
samba安装及配置;用户:root;密码:root;
传项目文件
python升级
net-tools安装
htop安装
git安装及配置
tig安装
tree安装
screen安装
docker安装
docker-compose安装
golang安装
hugo安装
node安装
php安装
mysql安装
~/.vimrc配置
syntax on
set autoindent
set fileencodings&lt;span style="color:#f92672">=&lt;/span>utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
set enc&lt;span style="color:#f92672">=&lt;/span>utf8
set fencs&lt;span style="color:#f92672">=&lt;/span>utf8,gbk,gb2312,gb18030
set nu!
~/.bashrc配置
alias gs&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git status&amp;#39;&lt;/span>
alias lg&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;git log --color --graph --all --oneline --decorate --pretty=format:&amp;#34;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&amp;#34; --abbrev-commit&amp;#39;&lt;/span>
alias hugo1314&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;hugo server --i18n-warnings --disableFastRender -D --bind 192.168.2.222 -p 1314 --baseURL=http://192.168.2.222:1314&amp;#39;&lt;/span>
alias d&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;docker&amp;#39;&lt;/span>
alias dps&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;docker ps --format &amp;#34;table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Status}}&amp;#34;&amp;#39;&lt;/span>
alias de&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;docker exec -it&amp;#39;&lt;/span>
alias tree&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tree -NFC&amp;#39;&lt;/span>
alias lt&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;tree -aNFCL&amp;#39;&lt;/span>
alias ll&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -alF&amp;#39;&lt;/span>
alias la&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -A&amp;#39;&lt;/span>
alias l&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;ls -CF&amp;#39;&lt;/span>
alias rm&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;rm -i&amp;#39;&lt;/span>
alias cp&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;cp -i&amp;#39;&lt;/span>
alias mv&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#39;mv -i&amp;#39;&lt;/span>
开启BBR
echo &lt;span style="color:#e6db74">&amp;#34;net.core.default_qdisc=fq&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/sysctl.conf
echo &lt;span style="color:#e6db74">&amp;#34;net.ipv4.tcp_congestion_control=bbr&amp;#34;&lt;/span> &amp;gt;&amp;gt; /etc/sysctl.conf
sysctl -p
lsmod | grep bbr
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="git-1">Git&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>初始配置Git&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>设置本地用户和邮箱
&lt;code>git config --global user.name &amp;lt;your_name&amp;gt; &amp;amp;&amp;amp; git config --global user.email &amp;lt;your_email&amp;gt;&lt;/code>&lt;/li>
&lt;li>本地生成公钥
&lt;code>ssh-keygen -t rsa -C &amp;lt;your_email&amp;gt;&lt;/code>&lt;/li>
&lt;li>找到公钥,复制到github账号(即添加过公钥的用户才被允许管理github项目)&lt;/li>
&lt;li>测试公钥
&lt;code>ssh -T git@github.com&lt;/code>&lt;/li>
&lt;li>到github创建项目&lt;/li>
&lt;li>本地创建项目并初始化
&lt;code>git init&lt;/code>&lt;/li>
&lt;li>关联远程库和本地
&lt;code>git remote add &amp;lt;自定义远程仓库名,如origin&amp;gt; &amp;lt;远程项目地址&amp;gt;&lt;/code>&lt;/li>
&lt;li>可查看本地关联的所有仓库主机
&lt;code>git remote -v 或者 git remote show origin&lt;/code>&lt;/li>
&lt;li>把项目添加到缓存区
&lt;code>git add . 和 git commit –m &amp;lt;备注&amp;gt;&lt;/code>&lt;/li>
&lt;li>提交项目到origin仓库的master分支
&lt;code>git push origin master (添加&amp;quot;--tags&amp;quot;可同时上传tag)&lt;/code>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>git hook :&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>第三方仓库git hook&lt;/li>
&lt;li>服务器部署git裸仓库
&lt;a href="http://kongfangyu.com/2016/02/12/git-deploy">http://kongfangyu.com/2016/02/12/git-deploy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>备注规范 :&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>feat: 新功能&lt;/li>
&lt;li>fix: 修复 bug&lt;/li>
&lt;li>perf: 提升性能的改动&lt;/li>
&lt;li>refactor: bug 修复和添加新功能之外的代码改动,重构大改动&lt;/li>
&lt;li>chore: 其他修改,构建过程或辅助工具和库（如文档生成）的更改&lt;/li>
&lt;li>docs: 文档变动&lt;/li>
&lt;li>style: 格式调整 , 对代码实际运行没有改动 , 例如添加空行、格式化等&lt;/li>
&lt;li>test: 添加或修正测试代码&lt;/li>
&lt;li>ci: 持续集成相关文件修改&lt;/li>
&lt;li>release: 发布新版本&lt;/li>
&lt;li>revert: 恢复上一次提交&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>Git工作流&lt;/p>
&lt;blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20210404170704.png" alt="来源:https://nvie.com/posts/a-successful-git-branching-model/">&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h2 id="编译安装">编译安装&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
&lt;span style="color:#75715e"># 配置&lt;/span>
./configure --prefix&lt;span style="color:#f92672">=&lt;/span>/usr/local/nginx
&lt;span style="color:#75715e"># 清除编译文件&lt;/span>
make clean
&lt;span style="color:#75715e"># 编译&lt;/span>
make
&lt;span style="color:#75715e"># 安装&lt;/span>
make install
&lt;span style="color:#75715e"># 软连接&lt;/span>
ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx
&lt;span style="color:#75715e"># 开机自启&lt;/span>
vim /etc/init.d/nginx &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> chmod a+x /etc/init.d/nginx
&lt;span style="color:#75715e"># 加入chkconfig管理列表&lt;/span>
chkconfig --add /etc/init.d/nginx
chkconfig nginx on
systemctl status nginx.service
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="centos指定版本安装">CentOS指定版本安装&lt;/h2>
&lt;pre>&lt;code>1. 到官网找到对应版本的rpm包,如:http://nginx.org/packages
2. 下载rpm包:wget http://nginx.org/packages/.../xxx.rpm
3. 安装:yum install -y xxx.rpm
4. /etc/rc.d/rc.local是系统启动后执行的文件,可在里添加自启的命令(但不推荐用这方式)
5. /etc/profile是系统变量的文件
&lt;/code>&lt;/pre>
&lt;h2 id="网络">网络&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>TCP&lt;/code> :需要三次握手,建立了 &lt;code>TCP&lt;/code> 虚拟通道,之后, &lt;code>TCP&lt;/code> 运输 &lt;code>HTTP流&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>SSL&lt;/code> : 位于 &lt;code>TCP&lt;/code> 与 &lt;code>HTTP&lt;/code> 之间,作为 &lt;code>HTTP&lt;/code> 的安全供应商 , 全权负责 &lt;code>HTTP&lt;/code> 的安全加密工作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TLS&lt;/code> : 在 &lt;code>SSL3.0&lt;/code> 版本的基础上 , 重新设计并命名了这个协议 , 其全新的名字为 &lt;code>TLS&lt;/code> ,形成: &lt;code>TCP连接时间&lt;/code> + &lt;code>TLS 连接时间&lt;/code> + &lt;code>HTTP交易时间&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTPS&lt;/code> : 通常将 &lt;code>TLS&lt;/code> 安全保护的 &lt;code>HTTP&lt;/code> 通信 , 称之为 &lt;code>HTTPS&lt;/code> , 以区别于没有 &lt;code>TLS&lt;/code> 安全防护的 &lt;code>HTTP&lt;/code> 明文通信。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP/2&lt;/code> : 第一次页面与第二次页面都是同一个网站服务器,重用第一个页面 &lt;code>TCP&lt;/code> 连接&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>QUIC&lt;/code> : &lt;code>http/2&lt;/code> 去掉 &lt;code>TCP&lt;/code> ,改用不需要连接的 &lt;code>UDP&lt;/code> ,形成: &lt;code>UDP / QUIC&lt;/code> ,第一次 &lt;code>2.5RTT&lt;/code> ,完成 &lt;code>QUIC&lt;/code> 交易的连接的 &lt;code>Session ID&lt;/code> 会缓存在浏览器内存里,第二次,使用 &lt;code>Session ID&lt;/code> ,重连 &lt;code>TLS&lt;/code> 连接是一个 &lt;code>0 RTT&lt;/code> 事件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>HTTP/3&lt;/code> : 把 &lt;code>QUIC&lt;/code> 与 &lt;code>HTTP&lt;/code> 分离,形成: &lt;code>UDP / QUIC / HTTP&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 &lt;code>IPv4&lt;/code> 进行路由 , 使用 &lt;code>TCP&lt;/code> 进行连接层面的流量控制 , 使用 &lt;code>SSL/TLS&lt;/code> 协议实现传输安全 , 使用 &lt;code>DNS&lt;/code> 进行域名解析 , 使用 &lt;code>HTTP&lt;/code> 进行应用数据的传输。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>IP&lt;/code> 是网络层&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TCP&lt;/code> 是传输层&lt;/p>
&lt;/li>
&lt;li>
&lt;p>网络层 &lt;code>ARP&lt;/code> : 保存 &lt;code>IP&lt;/code> 与 &lt;code>mac&lt;/code> 地址的映射列表,没有则会广播&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>TCP/IP&lt;/code> 连接 + &lt;code>http&lt;/code> 传输 &amp;ndash;&amp;gt; 网卡 &amp;ndash;&amp;gt; 内核(通过资源包的四元组信息,信息的其中之二是访问的 &lt;code>IP+端口&lt;/code> ) &amp;ndash;&amp;gt; &lt;code>socket&lt;/code>(它是文件系统,是资源,储存着端对端的四元组信息,被进程使用) &amp;ndash;&amp;gt; 进程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>socket&lt;/code> 是网络与进程的中介&lt;/p>
&lt;/li>
&lt;li>
&lt;p>https大致流程 :&lt;/p>
&lt;ol>
&lt;li>网站发送自己的 &lt;code>公钥(网站)&lt;/code> 到 信任机构, 机构用自己的 &lt;code>私钥(机构)&lt;/code> 对 &lt;code>公钥(网站)&lt;/code> 进行加盐加密, 生成 &lt;code>签名&lt;/code> , 与其他的信息组合成 &lt;code>证书&lt;/code>, 向网站颁发 这个&lt;code>证书&lt;/code>&lt;/li>
&lt;li>客户端浏览器建立 https 链接 , 接收到网站给的 &lt;code>证书&lt;/code> + &lt;code>公钥(网站)&lt;/code> ; 浏览器用自带的 信任机构 的 &lt;code>公钥(机构)&lt;/code>, 对 &lt;code>证书&lt;/code> 内的 &lt;code>签名&lt;/code> 进行 解密, 解密后对比 &lt;code>公钥(网站)&lt;/code> 是否正确&lt;/li>
&lt;li>https验证成功, 即 &lt;code>非对称加密&lt;/code> 结束; 接下来 , 双方约定一个 &lt;code>对称加密&lt;/code> , 用于对接下来的数据进行加密
&lt;blockquote>
&lt;p>因为 &lt;code>非对称加密&lt;/code> 非常耗资源, 所以为了速度, 使用 &lt;code>对称加密&lt;/code> 而不是 &lt;code>非对称加密&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>
&lt;p>加密种类 :&lt;/p>
&lt;ul>
&lt;li>base64 : 可逆, 可理解为 编码 而不是 真正的加密&lt;/li>
&lt;li>散列 : 又称hash(哈希), 不可逆 , 包含 MD5, SHA(SHA-256,SHA-512)&lt;/li>
&lt;li>对称加密 : 加密和解密共用秘钥&lt;/li>
&lt;li>非对称加密 : 一对一对存在(私钥+公钥), 公钥用于加密, 私钥用于解密&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="隧道">隧道&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://www.zhihu.com/question/39382183">https://www.zhihu.com/question/39382183&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>隧道是一种技术,有 &lt;code>SSH隧道&lt;/code> 和 &lt;code>http隧道&lt;/code> 和 &lt;code>UDP隧道(p2p)&lt;/code>&lt;/li>
&lt;li>隧道的中间服务器是不参与流量分析的,只用来传输流量,只是用于简单的过度&lt;/li>
&lt;li>代理是可以参与流量的处理的,比如 &lt;code>http代理&lt;/code>&lt;/li>
&lt;li>但 &lt;code>http代理&lt;/code> 不能传输 &lt;code>https流量&lt;/code> ,因为 &lt;code>https&lt;/code> 是端对端的加密,没有中间人&lt;/li>
&lt;li>为了解决不能代理 &lt;code>https流量&lt;/code> , &lt;code>http隧道&lt;/code> 配合 &lt;code>http&lt;/code> 的 &lt;code>CONNECT报文&lt;/code> 解决了这个问题;&lt;/li>
&lt;li>&lt;code>SOCKS5&lt;/code> 方式可以代替 &lt;code>CONNECT报文&lt;/code> 的方法, &lt;code>CONNECT报文&lt;/code> 只能用于 &lt;code>http流量&lt;/code> ,而 &lt;code>SOCKS5&lt;/code> 可以传输任意协议,如 &lt;code>https&lt;/code> 或 &lt;code>ftp&lt;/code>&lt;/li>
&lt;li>大致原理: &lt;code>本地---(1)---&amp;gt;代理---(2)---&amp;gt;服务器&lt;/code>; 本地与代理建立动态端口隧道,过程&lt;code>(1)&lt;/code> 使用 &lt;code>SOCKS5&lt;/code> 或 &lt;code>http&lt;/code> 的 &lt;code>CONNECT报文(包裹着https流量)&lt;/code> , 过程 &lt;code>(2)&lt;/code> 使用 &lt;code>https&lt;/code>;&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;a href="https://www.zsythink.net/archives/2450">https://www.zsythink.net/archives/2450&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>动态转发(科学上网)&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># socks5代理的建立&lt;/span>
ssh -N -f -D 127.0.0.1:6666 root@121.199.63.39
&lt;span style="color:#75715e"># 原理:本地(127.0.0.1:6666)与代理(121.199.63.39)服务器建立隧道后,本地(127.0.0.1)使用socks5协议在外层加密https协议,通过本地代理端口(6666)-(隧道)-代理(121.199.63.39)-https访问服务端(https://www.google.com)&lt;/span>
curl -x socks5://127.0.0.1:6666 https://www.google.com &lt;span style="color:#75715e">#http为例&lt;/span>
ssh -o ProxyCommand&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;nc -X 5 -x 127.0.0.1:6666 %h %p&amp;#34;&lt;/span> https://www.google.com &lt;span style="color:#75715e">#ssh为例,参数-X默认socks5&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>本地转发&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ssh -N -f -L 192.168.2.2:6666:121.199.63.39:22 root@121.199.63.39
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>远程转发&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ssh -N -f -R 121.199.63.39:6666:127.0.0.1:22 root@121.199.63.39
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>通过 &lt;code>121.199.63.39&lt;/code> 的 &lt;code>22&lt;/code> 端口,登录 &lt;code>121.199.63.39localhost&lt;/code> 的 &lt;code>6666&lt;/code> 端口&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">ssh -J root@121.199.63.39:22 -p6666 localhost
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="nftables">Nftables&lt;/h2>
&lt;p>防火墙配置例子 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># my.nft&lt;/span>
table inet filter &lt;span style="color:#f92672">{&lt;/span>
chain input &lt;span style="color:#f92672">{&lt;/span>
type filter hook input priority 0; policy drop;
ct state established,related accept
iif &lt;span style="color:#e6db74">&amp;#34;lo&amp;#34;&lt;/span> accept comment &lt;span style="color:#e6db74">&amp;#34;一律接受本地环回&amp;#34;&lt;/span>
ct state invalid drop
ip protocol icmp icmp type echo-request ct state new accept
ip protocol udp ct state new jump UDP
ip protocol tcp tcp flags &amp;amp; &lt;span style="color:#f92672">(&lt;/span>fin | syn | rst | ack&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">==&lt;/span> syn ct state new jump TCP
ip protocol udp reject
ip protocol tcp reject with tcp reset
meta nfproto ipv4 counter packets &lt;span style="color:#ae81ff">0&lt;/span> bytes &lt;span style="color:#ae81ff">0&lt;/span> reject with icmp type prot-unreachable
&lt;span style="color:#f92672">}&lt;/span>
chain forward &lt;span style="color:#f92672">{&lt;/span>
type filter hook forward priority 0; policy drop;
&lt;span style="color:#f92672">}&lt;/span>
chain output &lt;span style="color:#f92672">{&lt;/span>
type filter hook output priority 0; policy accept;
&lt;span style="color:#f92672">}&lt;/span>
chain TCP &lt;span style="color:#f92672">{&lt;/span>
tcp dport ssh ct state new limit rate 15/minute accept comment &lt;span style="color:#e6db74">&amp;#34;避免对SSH施加暴力&amp;#34;&lt;/span>
tcp dport &lt;span style="color:#f92672">{&lt;/span> http, https, mysql &lt;span style="color:#f92672">}&lt;/span> accept comment &lt;span style="color:#e6db74">&amp;#34;80,443,3306&amp;#34;&lt;/span>
tcp dport domain accept comment &lt;span style="color:#e6db74">&amp;#34;DNS:53&amp;#34;&lt;/span>
tcp dport &lt;span style="color:#f92672">{&lt;/span> netbios-ns, netbios-dgm, netbios-ssn, microsoft-ds &lt;span style="color:#f92672">}&lt;/span> accept comment &lt;span style="color:#e6db74">&amp;#34;Samba:137,138,139,445&amp;#34;&lt;/span>
tcp dport &lt;span style="color:#f92672">{&lt;/span> xtel, xtelw &lt;span style="color:#f92672">}&lt;/span> accept comment &lt;span style="color:#e6db74">&amp;#34;:Hugo:1313,1314&amp;#34;&lt;/span>
ip saddr &lt;span style="color:#f92672">{&lt;/span> 192.168.2.100 &lt;span style="color:#f92672">}&lt;/span> drop
&lt;span style="color:#f92672">}&lt;/span>
chain UDP &lt;span style="color:#f92672">{&lt;/span>
udp dport domain accept
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ftp">Ftp&lt;/h2>
&lt;ol>
&lt;li>关闭防火墙&lt;/li>
&lt;li>安装 &lt;code>ftp&lt;/code>&lt;/li>
&lt;li>修改三份文件 &lt;code>ftpusers&lt;/code> &lt;code>user_list&lt;/code> &lt;code>vsftpd.conf&lt;/code>&lt;/li>
&lt;li>重启 &lt;code>ftp&lt;/code>&lt;/li>
&lt;li>防火墙配置文件允许 &lt;code>21&lt;/code> 端口&lt;/li>
&lt;li>开启防火墙&lt;/li>
&lt;li>&lt;code>ftp&lt;/code> 限制用户访问目录思路:修改 &lt;code>/etc/vsftpd/vsftpd.conf&lt;/code> 文件中 &lt;code>chroot_local_user&lt;/code> , &lt;code>chroot_list_enable&lt;/code> , &lt;code>chroot_list_file&lt;/code> 三项; 修改用户默认进入的家目录,则修改 &lt;code>/etc/passwd&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;code>vsftpd.conf&lt;/code> 文件参考配置 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">listen_ipv6&lt;span style="color:#f92672">=&lt;/span>YES
pam_service_name&lt;span style="color:#f92672">=&lt;/span>vsftpd
tcp_wrappers&lt;span style="color:#f92672">=&lt;/span>YES
write_enable&lt;span style="color:#f92672">=&lt;/span>YES
local_umask&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">022&lt;/span> &lt;span style="color:#75715e">#用户ftp创建目录的权限掩码,022即为755&lt;/span>
listen&lt;span style="color:#f92672">=&lt;/span>NO &lt;span style="color:#75715e">#监听,yes可能导致无法启动ftp&lt;/span>
anonymous_enable&lt;span style="color:#f92672">=&lt;/span>NO &lt;span style="color:#75715e">#拒绝匿名用户&lt;/span>
local_root&lt;span style="color:#f92672">=&lt;/span>/var/www/html &lt;span style="color:#75715e">#本地用户初始目录&lt;/span>
&lt;span style="color:#75715e">#登录限制&lt;/span>
local_enable&lt;span style="color:#f92672">=&lt;/span>YES
userlist_enable&lt;span style="color:#f92672">=&lt;/span>YES
userlist_deny&lt;span style="color:#f92672">=&lt;/span>NO
userlist_file&lt;span style="color:#f92672">=&lt;/span>/etc/vsftpd/user_list
&lt;span style="color:#75715e">#目录限制&lt;/span>
chroot_local_user&lt;span style="color:#f92672">=&lt;/span>YES
chroot_list_enable&lt;span style="color:#f92672">=&lt;/span>YES
chroot_list_file&lt;span style="color:#f92672">=&lt;/span>/etc/vsftpd/chroot_list
allow_writeable_chroot&lt;span style="color:#f92672">=&lt;/span>YES
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nginx">Nginx&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Nginx&lt;/code> (web服务器)偏向于 &lt;code>静态资源&lt;/code> ,处理高并发,可用 &lt;code>反向代理&lt;/code> 从而实现 &lt;code>负载均衡&lt;/code> (类似 &lt;code>dns&lt;/code> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Apache&lt;/code> 偏向于&lt;code> PHP&lt;/code> 的动态资源,bug少稳定&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>负载均衡&lt;/code> 实现思路: &lt;code>动静态资源分离&lt;/code> ,主服务器使用 &lt;code>Nginx&lt;/code> ,动态资源则 &lt;code>反向代理&lt;/code> 到本机或集群的 &lt;code>Apache&lt;/code> 服务器(一台服务器安装两个 &lt;code>Apache&lt;/code> 服务可防止 &lt;code>宕机&lt;/code> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>linux&lt;/code> 有端口复用(套接字端口共享)功能( &lt;code>nginx&lt;/code> 开启 &lt;code>reuseport&lt;/code> );从内核层面做 &lt;code>负载均衡&lt;/code> ,避免 &lt;code>锁竞争&lt;/code> ( &lt;code>惊群效应&lt;/code> ): &lt;a href="https://www.zhihu.com/question/51618274">https://www.zhihu.com/question/51618274&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Nginx&lt;/code> 启用 &lt;code>PHP&lt;/code> 需要配置文件&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Nginx&lt;/code> 等软件自启,需要参考官方的启动代码,添加到 &lt;code>/etc/init.d/&lt;/code> 下&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Nginx&lt;/code> 支持缓存&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Nginx&lt;/code> 支持 &lt;code>gzip&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Nginx实现负载均衡需要源码的同步, 使用 &lt;code>rsync&lt;/code> (或+ &lt;code>sersync&lt;/code> )实现集群服务器源码同步,源服务器执行的命令:
&lt;code>rsync -avH --progress --delete --exclude-from=/etc/exclude.txt --password-file=/etc/pw.txt /var/www/html/ username@192.168.43.175::module1&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>其中按顺序是:含有忽略同步列表的 &lt;code>exclude.txt&lt;/code> 文件,含有密码的 &lt;code>pw.txt&lt;/code> 文件,源服务器的同步目录, &lt;code>username&lt;/code> 用户名,ip地址,对应的模块
&lt;a href="https://blog.51cto.com/chenfei123/1707746">https://blog.51cto.com/chenfei123/1707746&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>负载均衡&lt;/code> 和 &lt;code>前后端分离&lt;/code> 配置 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e">#后端应反向给Apache代理&lt;/span>
upstream proxys &lt;span style="color:#f92672">{&lt;/span>
server 127.0.0.1:8080 weight&lt;span style="color:#f92672">=&lt;/span>2;
server 192.168.43.175:9090 weight&lt;span style="color:#f92672">=&lt;/span>3;
ip_hash;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#前端应反向给Nginx代理&lt;/span>
upstream proxys2 &lt;span style="color:#f92672">{&lt;/span>
server 127.0.0.1:8081 weight&lt;span style="color:#f92672">=&lt;/span>3;
server 192.168.43.175:9090 weight&lt;span style="color:#f92672">=&lt;/span>2;
&lt;span style="color:#f92672">}&lt;/span>
server &lt;span style="color:#f92672">{&lt;/span>
listen 80;
server_name www.domain.top domain.top;
index index.html index.htm index.php;
location / &lt;span style="color:#f92672">{&lt;/span>
proxy_pass http://proxys;
proxy_http_version 1.1;
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
add_header X-Slave $upstream_addr;
&lt;span style="color:#f92672">}&lt;/span>
location ~* &lt;span style="color:#ae81ff">\.&lt;/span>&lt;span style="color:#f92672">(&lt;/span>css|js|png|jpg|jpeg|gif|txt|ico&lt;span style="color:#f92672">)&lt;/span>$|^~/static &lt;span style="color:#f92672">{&lt;/span>
proxy_pass http://proxys2;
proxy_set_header Host $http_host;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
add_header X-Slave $upstream_addr;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#75715e">#前端请求代理的配置&lt;/span>
server &lt;span style="color:#f92672">{&lt;/span>
listen 8081;
server_name www.domain.top domain.top;
location / &lt;span style="color:#f92672">{&lt;/span>
root /var/www/html/tp/public;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>缓存&lt;/code> 和 &lt;code>gzip&lt;/code> 配置 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">http &lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e"># 开启缓存&lt;/span>
proxy_connect_timeout 10;
proxy_read_timeout 180;
proxy_send_timeout 5;
proxy_buffer_size 16k;
proxy_buffers &lt;span style="color:#ae81ff">4&lt;/span> 32k;
proxy_busy_buffers_size 96k;
proxy_temp_file_write_size 96k;
proxy_temp_path /tmp/temp_dir;
proxy_cache_path /tmp/cache levels&lt;span style="color:#f92672">=&lt;/span>1:2 keys_zone&lt;span style="color:#f92672">=&lt;/span>cache_one:100m inactive&lt;span style="color:#f92672">=&lt;/span>1d max_size&lt;span style="color:#f92672">=&lt;/span>10g;
server
&lt;span style="color:#f92672">{&lt;/span>
listen &lt;span style="color:#ae81ff">8081&lt;/span> reuseport;
server_name localhost;
root /usr/share/nginx/tp/public/;
location /
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
server
&lt;span style="color:#f92672">{&lt;/span>
&lt;span style="color:#75715e">#开启gzip压缩资源&lt;/span>
gzip on;
gzip_vary on;
gzip_proxied any;
gzip_comp_level 6;
gzip_buffers &lt;span style="color:#ae81ff">16&lt;/span> 8k;
gzip_http_version 1.0;
gzip_min_length 100;
gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
&lt;span style="color:#75715e">#资源文件缓存&lt;/span>
location ~* &lt;span style="color:#ae81ff">\.&lt;/span>&lt;span style="color:#f92672">(&lt;/span>css|js|json|png|jpg|jpeg|gif|txt|ico|bmp|swf&lt;span style="color:#f92672">)&lt;/span>$|^~/static/
&lt;span style="color:#f92672">{&lt;/span>
proxy_pass http://127.0.0.1:8081;
proxy_redirect off;
proxy_set_header Host $host;
proxy_cache cache_one; &lt;span style="color:#75715e">#cache_one在http设置层proxy_cache_path定义&lt;/span>
proxy_cache_valid &lt;span style="color:#ae81ff">200&lt;/span> &lt;span style="color:#ae81ff">302&lt;/span> 24h;
proxy_cache_valid &lt;span style="color:#ae81ff">301&lt;/span> 30d;
proxy_cache_valid any 5m;
expires 90d;
add_header wall &lt;span style="color:#e6db74">&amp;#34;hey!这文件进行了缓存和压缩哟!&amp;#34;&lt;/span>;
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;span style="color:#f92672">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据库读写分离">数据库读写分离&lt;/h2>
&lt;p>实现 &lt;code>读写分离&lt;/code> 分为两大步 :&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.jianshu.com/p/bfca0cdfb169" target="_blank" rel="noopener">主从同步&lt;/a>&lt;/li>
&lt;li>读写分离;有两种方式 :
&lt;ul>
&lt;li>通过程序实现,如TP框架,性能最好;&lt;/li>
&lt;li>使用代理工具,如 :
&lt;ul>
&lt;li>&lt;a href="https://www.jianshu.com/p/cb7ec06dae05" target="_blank" rel="noopener">Mycat&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.jianshu.com/p/cadf337274c1" target="_blank" rel="noopener">Mysql-Proxy&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>mysql&lt;/code> 之间可相互主从同步,避免 &lt;code>单点&lt;/code> ;当有主从数据库发生宕机,可使用 &lt;code>percona-tooldit&lt;/code> 工具解决恢复宕机后主从数据不同步的问题
&lt;a href="https://blog.51cto.com/moerjinrong/2352317">https://blog.51cto.com/moerjinrong/2352317&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;code>Mysql-Proxy&lt;/code> 配置文件 &lt;code>mysql-proxy.cnf&lt;/code> 参考 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#f92672">[&lt;/span>mysql-proxy&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e">#运行mysql-proxy用户&lt;/span>
user&lt;span style="color:#f92672">=&lt;/span>root
&lt;span style="color:#75715e">#主从mysql共有的用户&lt;/span>
admin-username&lt;span style="color:#f92672">=&lt;/span>proxy
&lt;span style="color:#75715e">#用户的密码&lt;/span>
admin-password&lt;span style="color:#f92672">=&lt;/span>root
&lt;span style="color:#75715e">#mysql-proxy运行ip(不能是127.0.0.1)和端口,不加端口,默认4040&lt;/span>
proxy-address&lt;span style="color:#f92672">=&lt;/span>192.168.1.1:4040
&lt;span style="color:#75715e">#slave从数据库Ip地址,默认端口3306&lt;/span>
proxy-read-only-backend-addresses&lt;span style="color:#f92672">=&lt;/span>192.168.1.2:3306
&lt;span style="color:#75715e">#master主数据库Ip地址,默认端口3306&lt;/span>
proxy-backend-addresses&lt;span style="color:#f92672">=&lt;/span>192.168.1.3:3306
&lt;span style="color:#75715e">#读写分离配置文件&lt;/span>
proxy-lua-script&lt;span style="color:#f92672">=&lt;/span>/usr/lib64/mysql-proxy/lua/rw-splitting.lua
&lt;span style="color:#75715e">#管理脚本&lt;/span>
admin-lua-script&lt;span style="color:#f92672">=&lt;/span>/usr/lib64/mysql-proxy/lua/admin.lua
&lt;span style="color:#75715e">#日志&lt;/span>
log-file&lt;span style="color:#f92672">=&lt;/span>/var/log/mysql-proxy.log
&lt;span style="color:#75715e">#日志级别,高到低有error|warning|info|message|debug&lt;/span>
log-level&lt;span style="color:#f92672">=&lt;/span>info
&lt;span style="color:#75715e">#以守护进程方式运行&lt;/span>
daemon&lt;span style="color:#f92672">=&lt;/span>true
&lt;span style="color:#75715e">#崩溃时,尝试重启&lt;/span>
keepalive&lt;span style="color:#f92672">=&lt;/span>true
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="数据库">数据库&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>mysql8&lt;/code> 特性 :&lt;/p>
&lt;ul>
&lt;li>&lt;code>utf8mb4&lt;/code> 储存表情符号&lt;/li>
&lt;li>默认 &lt;code>InnoDB&lt;/code>&lt;/li>
&lt;li>降序索引&lt;/li>
&lt;li>JSON支持,直接操作json里的数据&lt;/li>
&lt;li>跳过锁等待&lt;/li>
&lt;li>用户角色管理权限&lt;/li>
&lt;li>&lt;code>innodb_dedicated_server&lt;/code> 自适应参数,自动配置 &lt;code>mysql&lt;/code>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;code>redis&lt;/code> 只做缓存使用,避免进行 &lt;code>持久性&lt;/code> &amp;amp;&amp;amp; &lt;code>队列&lt;/code> &amp;amp;&amp;amp; &lt;code>事务&lt;/code> (总之一句话:专人专事)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>redis&lt;/code> 和 &lt;code>DB&lt;/code> 一致性方案:只读 &lt;code>redis&lt;/code> ,当更新 &lt;code>DB&lt;/code> 之后把受影响的缓存全部干掉(注意:是干掉,不是更新),并且设定过期时间: &lt;a href="https://www.zhihu.com/question/319817091">https://www.zhihu.com/question/319817091&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>出现不能连接数据库的情况,除了防火墙,也可能是数据库没有设置对外添加权限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>出现用户不能登录的情况,可能是默认登录了 &lt;code>匿名用户&lt;/code> , 要把用户名为 &lt;code>''&lt;/code> 的用户清除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>MyISAM&lt;/code> 存储引擎偏向于大量查询和插入事件,表锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>InnoDB&lt;/code> 存储引擎偏向于增删改事件,支持事务,支持索引行锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>索引才用 行锁&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>悲观锁&lt;/code> 常用两种 &lt;code>排它锁&lt;/code> (FOR UPDATE) 和 &lt;code>共享锁&lt;/code> (LOCK IN SHARE MODE)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>乐观锁&lt;/code> 通过设置version字段, 用业务判断&lt;/p>
&lt;/li>
&lt;li>
&lt;p>事务并发会出现 &lt;code>脏读&lt;/code> &lt;code>不可重复读&lt;/code> &lt;code>幻读&lt;/code> ; 数据库隔离等级可解决&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过建立 &lt;code>联合索引&lt;/code> , 从而出现 &lt;code>索引覆盖&lt;/code> 和 &lt;code>索引下推&lt;/code>, 达到减少 &lt;code>回表&lt;/code> 的目的&lt;br>
&lt;br/>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库类型
&lt;a href="http://www.jb51.net/article/55853.htm">http://www.jb51.net/article/55853.htm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>免密码登录
&lt;code>skip-grant-tables&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能测试
&lt;code>explain select * from dnname&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>性能测试工具(mysql自带)
&lt;code>mysqlslap ...&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数据库导出
&lt;code>mysqldump -uroot -p dbname &amp;gt; dbname.sql&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>新建数据库
&lt;code>CREATE DATABASE mydb CHARACTER SET utf8 COLLATE utf8_general_ci&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入数据
&lt;code>insert into $my_name (id,name,tel) values('2','tab',null)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除数据
&lt;code>delete from my_name where id = 1;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改数据
&lt;code>update my_name set id='2',name='tab' where id=1;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插入字段
&lt;code>alter table my_name add id varchar(32)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除字段
&lt;code>alter table my_name drop id&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>去掉name重复的
&lt;code>SELECT DISTINCT name FROM my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算个数
&lt;code>select count(*) from my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算总和
&lt;code>select sum(*) from my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算平均
&lt;code>select sum(*)/count(*) from my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>计算平均
&lt;code>select avg(name) from my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>最小值
&lt;code>select min(name) from my_name&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双重查询,查询指定最小值对应的的所有字段
&lt;code>SELECT * FROM my_name WHERE name=(SELECT max(name)FROM my_name)&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>根据指定字段分类
&lt;code>select * from my_name group by name;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>表的联合查询
&lt;code>SELECT * FROM my_name as a INNER JOIN my_name2 as b on a.name=b.id&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>左查询,就是当my_name跟my_name2的的值不相对应则以my_name为主要,my_name2多出的值则省略
&lt;code>SELECT * FROM my_name as a left outer JOIN my_name2 as b on a.name=b.id&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="php">PHP&lt;/h2>
&lt;blockquote>
&lt;p>php7特性&lt;/p>
&lt;ul>
&lt;li>用绝对路径&lt;/li>
&lt;li>重定向后使用exit&lt;/li>
&lt;li>array_walk&lt;/li>
&lt;li>&amp;amp;引用节省内存&lt;/li>
&lt;li>+= array()&lt;/li>
&lt;li>isset($a{1})&lt;/li>
&lt;li>$_SERVER[&amp;lsquo;REQUEST_TIME&amp;rsquo;]&lt;/li>
&lt;li>strtr&lt;/li>
&lt;li>高亮PHP代码highlight_file&lt;/li>
&lt;li>2 &amp;lt;=&amp;gt; 1&lt;/li>
&lt;li>echo &amp;ldquo;\u{41}&amp;quot;,PHP_EOL;&lt;/li>
&lt;li>use some\namespace{ClassA, ClassB, ClassC as C};&lt;/li>
&lt;li>function arraysSum(int &amp;hellip;$ints): string&lt;/li>
&lt;li>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php"> &lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>{&lt;span style="color:#66d9ef">static&lt;/span> &lt;span style="color:#66d9ef">private&lt;/span> $b &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;hello world&amp;#39;&lt;/span>;}
$bb &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> (){&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>&lt;span style="color:#f92672">::&lt;/span>$b;};
&lt;span style="color:#66d9ef">echo&lt;/span> $bb&lt;span style="color:#f92672">-&amp;gt;&lt;/span>&lt;span style="color:#a6e22e">call&lt;/span>(&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;ul>
&lt;li>bug
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">[] &lt;span style="color:#f92672">==&lt;/span> []; &lt;span style="color:#75715e">//为false
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#e6db74">&amp;#39;a&amp;#39;&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>;
$a &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0.3&amp;#39;&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#e6db74">&amp;#39;0.1&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">json_encode&lt;/span>($a);
&lt;span style="color:#ae81ff">0.55&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">55&lt;/span>; &lt;span style="color:#75715e">//为false
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>单点登录使用 &lt;code>jwt&lt;/code> 标准进行用户验证&lt;/li>
&lt;li>&lt;code>PSR&lt;/code> 是php编码规范, &lt;code>Restful&lt;/code> 是API规范&lt;/li>
&lt;li>json_encode((array)$array, JSON_UNESCAPED_UNICODE|JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT)&lt;/li>
&lt;li>有时候exec命令执行失败,却没有报错,请这样使用:&lt;code>exec('ls 2&amp;gt;&amp;amp;1', $a, $b)&lt;/code>&lt;/li>
&lt;li>&lt;code>fastcgi&lt;/code>就是执行 &lt;code>cgi协议&lt;/code> 的,用于定义 &lt;code>Nginx&lt;/code> 调用 &lt;code>php&lt;/code> 时的数据格式,并减少对 &lt;code>php.ini&lt;/code> 的读取&lt;/li>
&lt;li>&lt;code>php-fpm&lt;/code>就是 &lt;code>Nginx&lt;/code> 服务调用的程序,管理 &lt;code>fastcgi&lt;/code> 进程&lt;/li>
&lt;li>&lt;code>php-cli&lt;/code>就是 &lt;code>shell&lt;/code> 命令行调用的程序&lt;/li>
&lt;li>&lt;code>|||nochange|||&lt;/code>表示 &lt;code>input&lt;/code> 输入框为空&lt;/li>
&lt;li>&lt;code>htmlentities&lt;/code> / &lt;code>htmlspecialchars&lt;/code> 可以过滤成 &lt;code>html格式&lt;/code> , 防止 &lt;code>XSS&lt;/code>&lt;/li>
&lt;li>&lt;code>addslashes&lt;/code> 防止 &lt;code>sql注入&lt;/code>&lt;/li>
&lt;li>引用字符串方式: &lt;code>Nowdoc&lt;/code> / &lt;code>Heredoc&lt;/code>&lt;/li>
&lt;li>中文简体格式
&lt;code>header('Content-type:text/html;charset=utf-8')&lt;/code>&lt;/li>
&lt;li>解决textarea标签回车编码问题
&lt;code>str_replace(&amp;quot; &amp;quot;,&amp;quot; &amp;quot;,str_replace(&amp;quot;\n&amp;quot;,&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;,$data))&lt;/code>&lt;/li>
&lt;li>单入口写上: &lt;code>session_start()&lt;/code> 才可以使用 &lt;code>$_SESSION&lt;/code>&lt;/li>
&lt;li>跳转到#页面
&lt;code>header('Location:#')&lt;/code>&lt;/li>
&lt;li>php格式插入html遍历
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#f92672">&amp;lt;?&lt;/span>&lt;span style="color:#a6e22e">php&lt;/span> &lt;span style="color:#66d9ef">foreach&lt;/span> ($my_name &lt;span style="color:#66d9ef">as&lt;/span> $x &lt;span style="color:#f92672">=&amp;gt;&lt;/span> $y){ &lt;span style="color:#75715e">?&amp;gt;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010"> &amp;lt;li&amp;gt;&amp;lt;?php echo $y[&amp;#39;z&amp;#39;] ?&amp;gt;&amp;lt;/li&amp;gt;
&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;?php } ?&amp;gt;
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>解决ajax跨域(CORS)
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#a6e22e">header&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Access-Control-Allow-Origin:demain.com&amp;#39;&lt;/span>); &lt;span style="color:#75715e">//可以用*允许所有
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">header&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Content-Type:application/json; charset=utf-8&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">header&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Access-Control-Allow-Methods: GET, POST, DELETE&amp;#39;&lt;/span>);
&lt;span style="color:#a6e22e">header&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;#39;&lt;/span>);
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>内容返回
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-php" data-lang="php">&lt;span style="color:#a6e22e">ob_start&lt;/span>(); &lt;span style="color:#75715e">//开启echo缓存区
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">echo&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Hello&amp;#34;&lt;/span>; &lt;span style="color:#75715e">//输出
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">ob_end_flush&lt;/span>(); &lt;span style="color:#75715e">//输出全部内容到浏览器,包括echo
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>rand(x,y)&lt;/td>
&lt;td>在xy之间取随机数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>implode(&amp;lsquo;xx&amp;rsquo;,'$my_name')&lt;/td>
&lt;td>用xx隔开my_name中每个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>explode()&lt;/td>
&lt;td>把字符串打散为数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>arry_merge()&lt;/td>
&lt;td>打散混乱数组重新排列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in_array($xy,$my_name)&lt;/td>
&lt;td>数组$my_name是否含$xy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mb_substr($my_name,x,y,&amp;lsquo;utf-8&amp;rsquo;)&lt;/td>
&lt;td>截取字符串,从第x个字符开始截取y个字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strtotime()&lt;/td>
&lt;td>将任何英文文本的日期或时间描述解析为 Unix 时间戳.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>字符串类型&lt;/td>
&lt;td>&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addcslashes()&lt;/td>
&lt;td>返回在指定的字符前添加反斜杠的字符串.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>addslashes()&lt;/td>
&lt;td>返回在预定义的字符前添加反斜杠的字符串.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chop()&lt;/td>
&lt;td>删除字符串右侧的空白字符或其他字符..&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>chunk_split()&lt;/td>
&lt;td>把字符串分割为一系列更小的部分.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>html_entity_decode()&lt;/td>
&lt;td>把 HTML 实体转换为字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>htmlentities()&lt;/td>
&lt;td>把字符转换为 HTML 实体.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>htmlspecialchars_decode()&lt;/td>
&lt;td>把一些预定义的 HTML 实体转换为字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>htmlspecialchars()&lt;/td>
&lt;td>把一些预定义的字符转换为 HTML 实体.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>join()&lt;/td>
&lt;td>implode() 的别名.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ltrim()&lt;/td>
&lt;td>移除字符串左侧的空白字符或其他字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>md5()&lt;/td>
&lt;td>计算字符串的 MD5 散列.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>number_format()&lt;/td>
&lt;td>以千位分组来格式化数字.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>parse_str()&lt;/td>
&lt;td>把查询字符串解析到变量中.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rtrim()&lt;/td>
&lt;td>移除字符串右侧的空白字符或其他字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sha1()&lt;/td>
&lt;td>计算字符串的 SHA-1 散列.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>similar_text()&lt;/td>
&lt;td>计算两个字符串的相似度.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sprintf()&lt;/td>
&lt;td>把格式化的字符串写入变量中.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str_pad()&lt;/td>
&lt;td>把字符串填充为新的长度.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str_repeat()&lt;/td>
&lt;td>把字符串重复指定的次数.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str_replace()&lt;/td>
&lt;td>替换字符串中的一些字符(对大小写敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str_shuffle()&lt;/td>
&lt;td>随机地打乱字符串中的所有字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str_split()&lt;/td>
&lt;td>把字符串分割到数组中.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strip_tags()&lt;/td>
&lt;td>剥去字符串中的 HTML 和 PHP 标签.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stripcslashes()&lt;/td>
&lt;td>删除由 addcslashes() 函数添加的反斜杠.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stripslashes()&lt;/td>
&lt;td>删除由 addslashes() 函数添加的反斜杠.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stripos()&lt;/td>
&lt;td>返回字符串第一次出现的位置(大小写不敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strpos()&lt;/td>
&lt;td>返回字符串第一次出现的位置(大小写敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stristr()&lt;/td>
&lt;td>查找字符串第一次出现的位置(大小写不敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strrchr()&lt;/td>
&lt;td>查找字符串最后一次出现.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strripos()&lt;/td>
&lt;td>查找字符串最后一次出现的位置(大小写不敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strrpos()&lt;/td>
&lt;td>查找字符串最后一次出现的位置(大小写敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strstr()&lt;/td>
&lt;td>查找字符串第一次出现(大小写敏感)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strchr()&lt;/td>
&lt;td>查找字符串第一次出现,strstr() 的别名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strrev()&lt;/td>
&lt;td>反转字符串.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strlen()&lt;/td>
&lt;td>返回字符串的长度.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strtolower()&lt;/td>
&lt;td>把字符串转换为小写字母.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strtoupper()&lt;/td>
&lt;td>把字符串转换为大写字母.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>strtr()&lt;/td>
&lt;td>转换字符串中特定的字符.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>substr()&lt;/td>
&lt;td>返回字符串的一部分.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>substr_count()&lt;/td>
&lt;td>计算子串在字符串中出现的次数.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>substr_replace()&lt;/td>
&lt;td>把字符串的一部分替换为另一个字符串.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ucfirst()&lt;/td>
&lt;td>把字符串中的首字符转换为大写.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ucwords()&lt;/td>
&lt;td>把字符串中每个单词的首字符转换为大写.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数组函数&lt;/td>
&lt;td>&amp;ndash;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_change_key_case()&lt;/td>
&lt;td>把数组中所有键更改为小写或大写.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_chunk()&lt;/td>
&lt;td>把一个数组分割为新的数组块.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_column()&lt;/td>
&lt;td>返回输入数组中某个单一列的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_combine()&lt;/td>
&lt;td>通过合并两个数组来创建一个新数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_count_values()&lt;/td>
&lt;td>用于统计数组中所有值出现的次数.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_diff()&lt;/td>
&lt;td>比较数组,返回差集(只比较键值)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_fill()&lt;/td>
&lt;td>用给定的键值填充数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_fill_keys()&lt;/td>
&lt;td>用指定键名的给定键值填充数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_filter()&lt;/td>
&lt;td>用回调函数过滤数组中的元素.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_flip()&lt;/td>
&lt;td>交换数组中的键和值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_intersect()&lt;/td>
&lt;td>比较数组,返回交集(只比较键值)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_key_exists()&lt;/td>
&lt;td>检查指定的键名是否存在于数组中.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_keys()&lt;/td>
&lt;td>返回数组中所有的键名.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_map()&lt;/td>
&lt;td>把数组中的每个值发送到用户自定义函数,返回新的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_merge()&lt;/td>
&lt;td>把一个或多个数组合并为一个数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_multisort()&lt;/td>
&lt;td>对多个数组或多维数组进行排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_pad()&lt;/td>
&lt;td>用值将数组填补到指定长度.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_pop()&lt;/td>
&lt;td>删除数组的最后一个元素(出栈)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_push()&lt;/td>
&lt;td>将一个或多个元素插入数组的末尾(入栈)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_replace()&lt;/td>
&lt;td>使用后面数组的值替换第一个数组的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_reverse()&lt;/td>
&lt;td>以相反的顺序返回数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_search()&lt;/td>
&lt;td>搜索数组中给定的值并返回键名.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_shift()&lt;/td>
&lt;td>删除数组中首个元素,并返回被删除元素的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_slice()&lt;/td>
&lt;td>返回数组中被选定的部分.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_splice()&lt;/td>
&lt;td>删除并替换数组中指定的元素.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_sum()&lt;/td>
&lt;td>返回数组中值的和.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_udiff()&lt;/td>
&lt;td>比较数组,返回差集&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_unique()&lt;/td>
&lt;td>删除数组中的重复值.(集合的概念)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_unshift()&lt;/td>
&lt;td>在数组开头插入一个或多个元素.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>array_values()&lt;/td>
&lt;td>返回数组中所有的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>arsort()&lt;/td>
&lt;td>对关联数组按照键值进行降序排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>asort()&lt;/td>
&lt;td>对关联数组按照键值进行升序排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>compact()&lt;/td>
&lt;td>创建包含变量名和它们的值的数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>count()&lt;/td>
&lt;td>返回数组中元素的数目.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>current()&lt;/td>
&lt;td>返回数组中的当前元素.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>extract()&lt;/td>
&lt;td>从数组中将变量导入到当前的符号表.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>in_array()&lt;/td>
&lt;td>检查数组中是否存在指定的值.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>key()&lt;/td>
&lt;td>从关联数组中取得键名.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>krsort()&lt;/td>
&lt;td>对数组按照键名逆向排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ksort()&lt;/td>
&lt;td>对数组按照键名排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>list()&lt;/td>
&lt;td>把数组中的值赋给一些变量.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range()&lt;/td>
&lt;td>创建包含指定范围单元的数组.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rsort()&lt;/td>
&lt;td>对数组逆向排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>shuffle()&lt;/td>
&lt;td>将数组打乱.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sizeof()&lt;/td>
&lt;td>count() 的别名.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sort()&lt;/td>
&lt;td>对数组排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>uasort()&lt;/td>
&lt;td>使用用户自定义的比较函数对数组中的键值进行排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>uksort()&lt;/td>
&lt;td>使用用户自定义的比较函数对数组中的键名进行排序.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>usort()&lt;/td>
&lt;td>使用用户自定义的比较函数对数组进行排序.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="前端">前端&lt;/h2>
&lt;ul>
&lt;li>可以设置类似&lt;code>cookie&lt;/code> , 它可永久保存
&lt;code>localStorage.setItem(name, val)&lt;/code>&lt;/li>
&lt;li>死链
&lt;code>&amp;lt;a href=&amp;quot;javascript:void(0);&amp;quot;&amp;gt;&lt;/code>&lt;/li>
&lt;li>CSS加载JS样式
&lt;code>behavior:url()&lt;/code>&lt;/li>
&lt;li>选择div内第二个li,类似js
&lt;code>div li:first-child+li{}&lt;/code>&lt;/li>
&lt;li>选择form下类型为text的input标签
&lt;code>form input[type=&amp;quot;text&amp;quot;]{}&lt;/code>&lt;/li>
&lt;li>居中CSS背景图片
&lt;code>background-position:center&lt;/code>&lt;/li>
&lt;li>居中HTML图片
&lt;code>&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;&lt;/code>&lt;/li>
&lt;li>居中div
&lt;code>{top:0;left:0;bottom:0;right:0;margin:auto}/margin:0 auto;&lt;/code>&lt;/li>
&lt;li>单行文字水平/垂直居中
&lt;code>text-decoration:center;/line-height:10px;&lt;/code>&lt;/li>
&lt;li>多行文字垂直居中:div1&amp;gt;div2&amp;gt;p
&lt;code>div1{display:table;/*转换成表格*/} div2{display:table-cell;vertical-align:middle;}&lt;/code>&lt;/li>
&lt;li>li中间向两边分布
&lt;code>ul{text-align:center}li{display: inline-block;}&lt;/code>&lt;/li>
&lt;li>li水平分布,ul宽度平均分割给li
&lt;code>ul{display:flex}li{flex:1;text-align:center}&lt;/code>&lt;/li>
&lt;li>li水平分布,类似最左和最右浮动两边的效果
&lt;code>div{overflow:hidden;width:11px} div ul{width:12px} li{width:5px;margin_right:1px}&lt;/code>&lt;/li>
&lt;li>轮播图不能有滚动条
&lt;code>在ul父级加overflow:hidden;width:100%;position: relative;//position用于ul居中&lt;/code>&lt;/li>
&lt;li>清除浮动,class是my_name就可以清除浮动
&lt;code>.my_name:after{content:&amp;quot;&amp;quot;; display:block; height:0; visibility:hidden; clear:both;}&lt;/code>&lt;/li>
&lt;li>鼠标悬浮图片放大
&lt;code>.div:hover img{transform: scale(1.03);transition: all 1s ease 0s;-webkit-transform: scale(1.03);-webkit-transform: all 1s ease 0s;}&lt;/code>&lt;/li>
&lt;li>iframe高度
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> window,
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;inner&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">$header&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.header&amp;#34;&lt;/span>);&lt;span style="color:#75715e">//如果页面有头部,则要减去
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;innerWidth&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">in&lt;/span> window)) {
&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;client&amp;#39;&lt;/span>;
&lt;span style="color:#a6e22e">e&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">documentElement&lt;/span> &lt;span style="color:#f92672">||&lt;/span> document.&lt;span style="color:#a6e22e">body&lt;/span>;
}
&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">e&lt;/span>[&lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Height&amp;#39;&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">$header&lt;/span>.&lt;span style="color:#a6e22e">outerHeight&lt;/span>();
&lt;span style="color:#a6e22e">$&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;.iframe&amp;#34;&lt;/span>).&lt;span style="color:#a6e22e">css&lt;/span>({
&lt;span style="color:#a6e22e">height&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">height&lt;/span>,
&lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;100%&amp;#34;&lt;/span>
});
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>&amp;hellip; 以上&lt;/strong>&lt;/p></description></item><item><title>制作多分区启动盘</title><link>https://twbworld.github.io/post/multi_partition_startup_disk/</link><pubDate>Mon, 28 Sep 2020 22:20:13 +0800</pubDate><guid>https://twbworld.github.io/post/multi_partition_startup_disk/</guid><description>&lt;blockquote>
&lt;p>有些小伙伴手里有上百G甚至上T移动硬盘&lt;br>
平时制作启动硬盘,除了启动分区,都是只剩一个分区提供自己使用的&lt;br>
那么问题来了:怎么保留启动盘的功能,又能把硬盘分成多个分区呢?&lt;br>
搜索引擎也很少有相关文章&lt;br>
那么,今天就带大家制作一个多分区启动盘&lt;br>
作者尝试了无数次才成功的,呕心沥血之作&lt;/p>
&lt;/blockquote>
&lt;p>所使用到的:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>硬盘(本文章使用U盘展示,建议硬盘,毕竟日常生活中的十几或几十G的U盘,也没必要进行分区了)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>微PE(作者使用的版本是&lt;code>2.1&lt;/code>;也可以使用&amp;quot;大白菜&amp;quot;或&amp;quot;老毛桃&amp;quot;,有广告植入,不建议)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>微PE下载(不需要安装): &lt;a href="http://www.wepe.com.cn/download.html">http://www.wepe.com.cn/download.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>UltraISO(作者使用的版本是&lt;code>9.7&lt;/code>)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>UltraISO下载: &lt;a href="https://cn.ultraiso.net/xiazai.html">https://cn.ultraiso.net/xiazai.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>DiskGenius(作者使用的版本是&lt;code>5.1&lt;/code>)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>DiskGenius下载: &lt;a href="https://www.diskgenius.cn/download.php">https://www.diskgenius.cn/download.php&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1获取微pe的系统iso">1#获取&lt;code>微PE&lt;/code>的系统ISO&lt;/h2>
&lt;p>(1) 双击打开下载好的 &lt;code>微PE&lt;/code> 安装包,看到以下界面,单击右下角的光盘图标
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929001640.png" alt="">&lt;/p>
&lt;p>(2) 接下来,要把 &lt;code>微PE&lt;/code> 自带的ISO镜像保存到电脑,选择保存的位置, &lt;code>光盘卷标&lt;/code> 也就是盘符的名称,也建议改成喜欢的名称,如&amp;quot;pe盘&amp;quot;,最后点击 &lt;code>立即生成ISO&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003752.png" alt="">&lt;/p>
&lt;h2 id="2写入iso到硬盘">2#写入ISO到硬盘&lt;/h2>
&lt;p>(1) 插入硬盘,准备格式化&lt;/p>
&lt;blockquote>
&lt;p>PS: 备份数据!!!!!备份数据!!!!!备份数据!!!!!&lt;/p>
&lt;/blockquote>
&lt;p>(2) 打开安装好的 &lt;code>UltraISO&lt;/code> ,菜单栏依次点击 &lt;code>文件-&amp;gt;打开&lt;/code> ; 选择上一步保存好的ISO文件&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003225.png" alt="">&lt;/p>
&lt;p>(3) 可以看到,左侧栏出现的ISO文件&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003656.png" alt="">&lt;/p>
&lt;p>(4) 接着,菜单栏依次点击 &lt;code>启动-&amp;gt;写入硬盘映像&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003959.png" alt="">&lt;/p>
&lt;p>(5) 出现一个弹窗, &lt;code>硬盘驱动器&lt;/code> 选择正确的硬盘,首先,需要把硬盘格式化,点击&lt;code>格式化&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929004608.png" alt="">&lt;/p>
&lt;p>(6) 最后,正式把ISO文件写入硬盘,点击 &lt;code>写入&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929004749.png" alt="">&lt;/p>
&lt;h2 id="3备份启动分区">3#备份启动分区&lt;/h2>
&lt;p>(1) 打开安装好的 &lt;code>DiskGenius&lt;/code> ,在左侧栏找到对应的硬盘,单击选中上一步生成的盘
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010004.png" alt="">&lt;/p>
&lt;p>(2) 菜单栏依次点击 &lt;code>工具-&amp;gt;备份分区到镜像文件&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010254.png" alt="">&lt;/p>
&lt;p>(3) 出现一个弹窗, 点击 &lt;code>选择文件路径&lt;/code> ,选择一个目录,输入自定义的&lt;code>pmf&lt;/code>文件的名称,点击 &lt;code>打开&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010619.png" alt="">&lt;/p>
&lt;p>(4) 点击 &lt;code>开始&lt;/code> ,成功后,会生成一个&lt;code>.pmf&lt;/code>后缀文件,这个文件就是你的启动盘备份文件
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929011108.png" alt="">&lt;/p>
&lt;h2 id="4硬盘分区">4#硬盘分区&lt;/h2>
&lt;p>(1) &lt;code>DiskGenius&lt;/code> 左侧栏选中对应的硬盘,点击 &lt;code>快速分区&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929011443.png" alt="">&lt;/p>
&lt;p>(2) 可以看到一个弹窗;这一步是成功的关键,要严格按照以下的规定(作者经过无数次的尝试,得出来的结论) :&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;code>分区表类型&lt;/code> 一定为 &lt;code>MBR&lt;/code> ; 不要问为什么,我也不知道&lt;/li>
&lt;li>&lt;code>分区数目&lt;/code> 最多为3个; 不要问为什么,我也不知道&lt;/li>
&lt;li>&lt;code>高级设置&lt;/code> 以第一个作为启动分区,所以第一个分区选择 &lt;code>FAT32&lt;/code>, 其余为 &lt;code>NTFS&lt;/code> ; 不要问为什么,我也不知道&lt;/li>
&lt;li>&lt;code>高级设置&lt;/code> 把所有的 &lt;code>主分区&lt;/code> 勾上; 不要问为什么,我也不知道&lt;/li>
&lt;li>至于各分区的容量,卷标名称等,请自定义
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013018.png" alt="">&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>(3) 分区后,可以看到作为启动分区已经显示 &lt;code>活动&lt;/code> 了
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013528.png" alt="">&lt;/p>
&lt;h2 id="5恢复启动分区">5#恢复启动分区&lt;/h2>
&lt;p>(1) &lt;code>DiskGenius&lt;/code> ,在左侧栏找到对应的硬盘,单击选中上一步作为启动的分区
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013709.png" alt="">&lt;/p>
&lt;p>(2) 菜单栏依次点击 &lt;code>工具-&amp;gt;从镜像文件还原分区&lt;/code>
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929014447.png" alt="">&lt;/p>
&lt;p>(3) 出现弹窗, 点击 &lt;code>选择文件&lt;/code> , 选择在 &lt;code>第三步&lt;/code> 生成的 &lt;code>pmf&lt;/code> 文件
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929014834.png" alt="">&lt;/p>
&lt;p>(4) 到此为止,成功制作了一个 多分区启动硬盘&lt;/p>
&lt;blockquote>
&lt;p>但是,这样制作的多分区启动硬盘, &lt;code>BIOS&lt;/code> 只能使用 &lt;code>Legacy&lt;/code> 启动模式来启动硬盘(新型的 &lt;code>UEFI&lt;/code> 无法启动PE), 如下图例子(华硕的BIOS)&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929015346.png" alt="">&lt;/p>
&lt;p>&lt;strong>&amp;hellip; 以上&lt;/strong>&lt;/p></description></item><item><title>SSH隧道连接局域网下的虚拟机</title><link>https://twbworld.github.io/post/tunnel_connect/</link><pubDate>Sun, 12 Jul 2020 18:18:13 +0800</pubDate><guid>https://twbworld.github.io/post/tunnel_connect/</guid><description>&lt;blockquote>
&lt;p>连接局域网下的虚拟机,在网上找到的做法通常是:在VMware配置端口转发&lt;br>
最近了解隧道技术,突发奇想:能不能使用SSH隧道连接局域网下的虚拟机呢?&lt;br>
在网上找到的相关资料不多,经过自己摸索,终于实现了&lt;br>
使用SSH隧道连接局域网下的虚拟机,主要有两种方式可以实现&lt;br>
1: 本地端口转发; 2: 动态端口转发&lt;/p>
&lt;/blockquote>
&lt;p>首先,假设网络图如下,A和B在同一局域网下,我们的目的是: 实现 A 连接到 C 的SSH服务
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712191744.png" alt="">&lt;/p>
&lt;h2 id="方法一--本地端口转发">方法一 : 本地端口转发&lt;/h2>
&lt;blockquote>
&lt;p>大体思路: 在A下创建 &lt;code>A --&amp;gt; C&lt;/code> 的SSH隧道,就可以访问A下的指定端口,通过隧道转发,访问到C的22端口了&lt;br>
具体实现如下 :&lt;/p>
&lt;/blockquote>
&lt;h3 id="1b安装ssh服务">1#B安装SSH服务&lt;/h3>
&lt;blockquote>
&lt;p>参考文章 &lt;a href="https://www.cnblogs.com/sparkdev/p/10166061.html">https://www.cnblogs.com/sparkdev/p/10166061.html&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>这是非常关键的一步(作为小白,我刚开始就异想天开,直接就想通过A连接到C,直到多次尝试失败并且想通了)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我的电脑 B 的系统是&lt;code>windows10 1909&lt;/code>,自带了&lt;code>OpenSSH Server&lt;/code>软件;如果版本是&lt;code>wondows10 1809&lt;/code>以下或&lt;code>wondows7&lt;/code>的同学,可以网上搜索windows怎么安装&lt;code>openSSH&lt;/code>服务&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>(1) Win10打开 设置(&lt;code>Win + I&lt;/code>) ==&amp;gt; 应用 ==&amp;gt; 应用和功能 ==&amp;gt; 可选功能 =&amp;gt; 添加功能 =&amp;gt; OpenSSH服务器(点击安装)&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712195856.png" alt="">&lt;/p>
&lt;p>(2) 打开 任务管理器(&lt;code>Shift + Ctrl + Esc&lt;/code>) ==&amp;gt; 任务 ==&amp;gt; 左下角点击&amp;quot;打开服务&amp;quot;; 找到两个OpenSSH服务,右键开启&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712200951.png" alt="">&lt;/p>
&lt;p>(3) 打开 控制面板 ==&amp;gt; 系统和安全 ==&amp;gt; &lt;code>Windows Defender&lt;/code> 防火墙 ==&amp;gt; 启用或关闭&lt;code>windows defender&lt;/code>防火墙;选择关闭防火墙; (或者在入站规则添加允许22端口)&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712202126.png" alt="">&lt;/p>
&lt;blockquote>
&lt;p>到此, B已经配置完成&lt;/p>
&lt;/blockquote>
&lt;h3 id="2a建立-a----c-的隧道">2#A建立 &lt;code>A --&amp;gt; C&lt;/code> 的隧道&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>本人使用的是&lt;code>PuTTY&lt;/code>的工具, 使用其他工具或&lt;code>PowerShell&lt;/code>也是可以的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>首先保证 C 关闭&lt;code>iptables&lt;/code>或&lt;code>nftables&lt;/code>防火墙 (或配置允许22端口)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>通过&amp;quot;中间人&amp;quot; B ; 在 A 电脑上使用&lt;code>PuTTY&lt;/code>建立起与 C 的SSH隧道 (本地端口转发)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在 A 上配置(基于文章开头假设的网络图) :&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712204730.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击open,会出现登录,注意:这里登录的是 B 电脑,也就是要输入B的windows的用户名和密码;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>到这里,你已经建立起 &lt;code>A --&amp;gt; C&lt;/code> 的隧道了, 注意: 请不要关闭&lt;code>PuTTY&lt;/code>窗口, 否则隧道会被关闭&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>PuTTY&lt;/code>如上设置,相当于使用命令 &lt;code>ssh -L 127.0.0.1:6666:192.168.2.2:22 192.168.1.107&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="3a通过隧道连接-c-电脑">3#A通过隧道连接 C 电脑&lt;/h3>
&lt;ul>
&lt;li>终于到最后一步了, 很简单, 在 A 电脑开启新的&lt;code>PuTTY&lt;/code>窗口, 请求 A 本地的 刚才自定义的 6666端口就可以啦&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712210036.png" alt="">&lt;/p>
&lt;ul>
&lt;li>恭喜你, 成功通过SSH隧道连接到 C ;因为隧道是 &lt;code>A --&amp;gt; C&lt;/code> 的且加密的, B 不会监听到流量&lt;/li>
&lt;/ul>
&lt;h2 id="方法二--动态端口转发">方法二 : 动态端口转发&lt;/h2>
&lt;blockquote>
&lt;p>大体思路: 在A下创建 &lt;code>A --&amp;gt; B&lt;/code> 的SSH隧道,把 B 作为代理(Proxy), 就可以实现 : A 使用&lt;code>SOCKS5&lt;/code>协议通过 B 来访问到 C 的22端口&lt;br>
具体实现如下 :&lt;/p>
&lt;/blockquote>
&lt;h3 id="1b安装ssh服务-1">1#B安装SSH服务&lt;/h3>
&lt;p>(在 &lt;code>方法一&lt;/code> 中有具体实现, 略)&lt;/p>
&lt;h3 id="2a建立-a----b-的隧道">2#A建立 &lt;code>A --&amp;gt; B&lt;/code> 的隧道&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>本人使用的是&lt;code>PuTTY&lt;/code>的工具, 使用其他工具或PowerShell也是可以的&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 A 电脑上使用&lt;code>PuTTY&lt;/code>建立起与 B 的SSH隧道 (动态端口转发)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在 A 上配置(基于文章开头假设的网络图) :&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712215702.png" alt="">&lt;/p>
&lt;ul>
&lt;li>
&lt;p>点击open,会出现登录,注意:这里登录的是 B 电脑,也就是要输入B的windows的用户名和密码;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>到这里,你已经建立起 &lt;code>A --&amp;gt; B&lt;/code> 的隧道了, 注意: 请不要关闭&lt;code>PuTTY&lt;/code>窗口, 否则隧道会被关闭&lt;/p>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>&lt;code>PuTTY&lt;/code>如上设置,相当于使用命令 &lt;code>ssh -D 127.0.0.1:6666 192.168.1.107&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;h3 id="3a通过代理连接-c-电脑">3#A通过代理连接 C 电脑&lt;/h3>
&lt;ul>
&lt;li>终于到最后一步了, 很简单, 在 A 电脑上开启新的&lt;code>PuTTY&lt;/code>窗口, 设置 A 本地的 刚才自定义的 6666端口为代理端口, 请求 C 就可以啦&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712214629.png" alt="">&lt;/p>
&lt;h2 id="方法三--vmware配置端口转发">方法三 : VMware配置端口转发&lt;/h2>
&lt;blockquote>
&lt;p>这是一个比较普遍的做法, 在网上也容易找到相关文章&lt;br>
大体思路: 在&lt;code>VMware&lt;/code>上配置 监听父windows的端口X,把A端口转发到VMware下的虚拟机端口Y, 局域网的电脑只有访问windows的端口X就相当于访问虚拟机的端口Y啦, 是不是很容易&lt;br>
具体实现如下 :&lt;/p>
&lt;/blockquote>
&lt;h3 id="1b配置vmware">1#B配置VMware&lt;/h3>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712220946.png" alt="">&lt;/p>
&lt;h3 id="2b配置防火墙">2#B配置防火墙&lt;/h3>
&lt;ul>
&lt;li>打开 控制面板 ==&amp;gt; 系统和安全 ==&amp;gt; &lt;code>Windows Defender&lt;/code> 防火墙 ==&amp;gt; 启用或关闭&lt;code>windows defender&lt;/code>防火墙;选择关闭防火墙; (或者在 入站规则 添加允许 上一步自定义的6666端口)&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712202126.png" alt="">&lt;/p>
&lt;h3 id="3a通过-b-连接-c-电脑">3#A通过 B 连接 C 电脑&lt;/h3>
&lt;ul>
&lt;li>终于到最后一步了, 很简单, 在 A 电脑直接用&lt;code>PuTTY&lt;/code>请求 B 的 6666端口, 就可以登录 C 啦&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712222247.png" alt="">&lt;/p>
&lt;p>&lt;strong>&amp;hellip; 以上&lt;/strong>&lt;/p></description></item><item><title>VMware自定义虚拟网卡(添加网络)</title><link>https://twbworld.github.io/post/vmware_customize_network/</link><pubDate>Sun, 31 May 2020 14:07:40 +0800</pubDate><guid>https://twbworld.github.io/post/vmware_customize_network/</guid><description>&lt;blockquote>
&lt;p>我的VMware版本: 15.5.2&lt;/p>
&lt;/blockquote>
&lt;h2 id="一-创建虚拟网络">一 创建虚拟网络&lt;/h2>
&lt;ol>
&lt;li>VMware菜单==&amp;gt;编辑==&amp;gt;虚拟网络编辑器&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531154440.png" alt="">&lt;/p>
&lt;ol start="2">
&lt;li>(这一步可略过)移除所有默认的&amp;quot;网络&amp;quot;&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531154849.png" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>点击&amp;quot;添加网络&amp;quot;, 选择&amp;quot;VMnet8&amp;quot;&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531155509.png" alt="">&lt;/p>
&lt;ol start="4">
&lt;li>
&lt;ul>
&lt;li>上方列表点击选择刚才添加的网络&amp;quot;VMnet8&amp;quot;;&lt;/li>
&lt;li>选择NAT模式;&lt;/li>
&lt;li>设置子网IP;一般设置&amp;quot;192.168.xxx.0&amp;quot;,我这设置为&amp;quot;192.168.2.0&amp;quot;&lt;/li>
&lt;li>设置子网掩码&amp;quot;255.255.255.0&amp;quot;,一般子网掩码固定;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531155727.png" alt="">&lt;/p>
&lt;ol start="5">
&lt;li>点击&amp;quot;NAT设置&amp;quot;;设置&amp;quot;网关IP&amp;quot;, 一般为&amp;quot;192.168.xxx.1&amp;quot;, 所以我这设置网关为&amp;quot;192.168.2.1&amp;quot;;点击&amp;quot;确定&amp;quot; (还有端口转发,一般用于局域网PC链接VMware里的虚拟机所使用)&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531160526.png" alt="">&lt;/p>
&lt;ol start="6">
&lt;li>点击&amp;quot;DHCP设置&amp;quot;; 这里可以设置网关分配给VMware下的虚拟机的起始IP和结束IP; 因为网关已经占用了192.168.xxx.1,所以这自定义起始IP可以为&amp;quot;192.168.xxx.2&amp;quot;, 结束IP为&amp;quot;192.168.xxx.254&amp;quot;, 点击&amp;quot;确认&amp;quot;, 回到上一层, 再次点击&amp;quot;确认&amp;quot;;&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531161155.png" alt="">&lt;/p>
&lt;h2 id="二-使用虚拟网络">二 使用虚拟网络&lt;/h2>
&lt;ol>
&lt;li>查看 控制面板==&amp;gt;网络和Internet==&amp;gt;网络和共享中心==&amp;gt;更改适配器设置; 可看到, 虚拟网卡已创建成功;&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531162022.png" alt="">&lt;/p>
&lt;ol start="2">
&lt;li>选择新添加的网卡;右键选择&amp;quot;属性&amp;quot;;双击&amp;quot;协议版本4&amp;quot;;设置IP;我这里设置了100;也可以设大一点,点击&amp;quot;确认&amp;quot;&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>如果缺少这一步,可能会出现宿主机SSH链接不上虚拟机的情况(或者出现需要长时间才连通,连上后,短时间内又断开的情况);原因可能是因为网卡的IP占用了网关IP&amp;quot;192.168.xxx.1&amp;quot;, 导致虚拟机的数据到不了在外一层的宿主机&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531163409.png" alt="">&lt;/p>
&lt;ol start="3">
&lt;li>虚拟网卡已创建成功,最后还要选择使用新创建的网卡;选择你要使用刚才新建网卡的虚拟机, 右键选择&amp;quot;设置&amp;quot;, &amp;ldquo;硬件&amp;rdquo;==&amp;gt;&amp;ldquo;网络适配器&amp;rdquo; ,右侧点击&amp;quot;自定义:特定虚拟网络&amp;quot;, 选择新建的&amp;quot;VMnet8(NAT 模式)&amp;quot;, 点击&amp;quot;确定&amp;quot;&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>这一步非常关键,我曾经缺少这一步,导致虚拟机连不上网&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531165342.png" alt="">&lt;/p>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531165906.png" alt="">&lt;/p>
&lt;ol start="4">
&lt;li>到此,虚拟机应该就可以上网了,如果不行;请重启虚拟机的network; 或者VMware最右下角的&amp;quot;网络适配器&amp;quot;重新连接&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531171518.png" alt="">&lt;/p>
&lt;ol start="5">
&lt;li>同时还可以在虚拟机里设置固定的IP,IP地址要根据&amp;quot;起始IP&amp;quot;和结束&amp;quot;IP&amp;quot;设置; 例如,我在Centos8系统上, 设置了IP:&amp;ldquo;192.168.2.2&amp;rdquo;&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531171957.png" alt="">&lt;/p></description></item><item><title>Centos源码安装Mysql8笔记</title><link>https://twbworld.github.io/post/install_mysql8_note/</link><pubDate>Sat, 30 May 2020 20:47:16 +0800</pubDate><guid>https://twbworld.github.io/post/install_mysql8_note/</guid><description>&lt;h2 id="笔记一-安装时发生警告">笔记一: 安装时,发生警告&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
--character-set-server: &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span> is currently an alias &lt;span style="color:#66d9ef">for&lt;/span> the character set UTF8MB3, but will be an alias &lt;span style="color:#66d9ef">for&lt;/span> UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous
--collation-server: &lt;span style="color:#e6db74">&amp;#39;utf8_general_ci&amp;#39;&lt;/span> is a collation of the deprecated character set UTF8MB3. Please consider using UTF8MB4 with an appropriate collation instead
&lt;/code>&lt;/pre>&lt;/div>&lt;p>原因 :&lt;/p>
&lt;blockquote>
&lt;p>安装mysql8的时候,配置了官方不推荐的&amp;quot;utf8&amp;quot;,其实&amp;quot;utf8&amp;quot;就是mysql中&amp;quot;UTF8MB3&amp;quot;的别名,然而又同时存在着&amp;quot;UTF8MB4&amp;quot;,所有,建议改为&amp;quot;UTF8MB4&amp;quot;;&lt;/p>
&lt;/blockquote>
&lt;p>解决 :&lt;/p>
&lt;blockquote>
&lt;p>把cmake的参数 &lt;code>-DDEFAULT_CHARSET=utf8&lt;/code> 改为 &lt;code>-DDEFAULT_CHARSET=utf8mb4 &lt;/code> , &lt;code>-DDEFAULT_COLLATION=utf8_general_ci&lt;/code> 改为 &lt;code>-DDEFAULT_COLLATION=utf8mb4_unicode_ci&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>给出完整cmake命令 :&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
&lt;span style="color:#75715e"># 切换到mysql8解压后的目录&lt;/span>
cd /usr/local/mysql8/
&lt;span style="color:#75715e"># 新建并切换build目录&lt;/span>
mkdir build
cd build
&lt;span style="color:#75715e"># 编译前的配置;其中的&amp;#34;DCMAKE_INSTALL_PREFIX&amp;#34;, &amp;#34;DMYSQL_DATADIR&amp;#34;, &amp;#34;DWITH_BOOST&amp;#34; 按照自己的情况配置&lt;/span>
cmake .. -DCMAKE_INSTALL_PREFIX&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DMYSQL_DATADIR&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DSYSCONFDIR&lt;span style="color:#f92672">=&lt;/span>/etc &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_MYISAM_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_INNOBASE_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_MEMORY_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWTH_READLINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DMYSQL_TCP_PORT&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">3306&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DENABLED_LOCAL_INFILE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_PARTITION_STORAGE_ENGINE&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DEXTRA_CHARSETS&lt;span style="color:#f92672">=&lt;/span>all -DDEFAULT_CHARSET&lt;span style="color:#f92672">=&lt;/span>utf8mb4 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DDEFAULT_COLLATION&lt;span style="color:#f92672">=&lt;/span>utf8mb4_unicode_ci &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span>-DWITH_BOOST&lt;span style="color:#f92672">=&lt;/span>/usr/local/boost_1_70_0
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>安装后,可以看到 &lt;code>/etc/my.cnf&lt;/code> 设置为 &lt;code>collation-server = utf8mb4_unicode_ci&lt;/code> &lt;code>character-set-server = utf8mb4&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h2 id="笔记二-创建mycnf">笔记二: 创建my.cnf&lt;/h2>
&lt;p>在/etc目录下没有发现my.cnf(我的mysql版本是mysql-8.0.20), 只能自己创建了 :&lt;/p>
&lt;p>&lt;code>vim /etc/my.cnf&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
&lt;span style="color:#75715e"># 客户端设置&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>client&lt;span style="color:#f92672">]&lt;/span>
port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3306&lt;/span>
&lt;span style="color:#75715e"># 默认情况下，socket文件应为/usr/local/mysql/mysql.socket,所以可以ln -s xx /tmp/mysql.sock&lt;/span>
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;span style="color:#75715e"># 服务端设置&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>mysqld&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 基础信息&lt;/span>
&lt;span style="color:#75715e">#Mysql服务的唯一编号 每个mysql服务Id需唯一&lt;/span>
server-id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e">#服务端口号 默认3306&lt;/span>
port &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3306&lt;/span>
&lt;span style="color:#75715e"># 启动mysql服务进程的用户&lt;/span>
user &lt;span style="color:#f92672">=&lt;/span> mysql
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 安装目录相关&lt;/span>
&lt;span style="color:#75715e"># mysql安装根目录&lt;/span>
basedir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8
&lt;span style="color:#75715e"># mysql数据文件所在位置&lt;/span>
datadir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/data
&lt;span style="color:#75715e"># 临时目录 比如load data infile会用到,一般都是使用/tmp&lt;/span>
tmpdir &lt;span style="color:#f92672">=&lt;/span> /tmp
&lt;span style="color:#75715e"># 设置socke文件地址&lt;/span>
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 事务隔离级别，默认为可重复读（REPEATABLE-READ）。（此级别下可能参数很多间隙锁，影响性能，但是修改又影响主从复制及灾难恢复，建议还是修改代码逻辑吧）&lt;/span>
&lt;span style="color:#75715e"># 隔离级别可选项目：READ-UNCOMMITTED READ-COMMITTED REPEATABLE-READ SERIALIZABLE&lt;/span>
&lt;span style="color:#75715e"># transaction_isolation = READ-COMMITTED&lt;/span>
transaction_isolation &lt;span style="color:#f92672">=&lt;/span> REPEATABLE-READ
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库引擎与字符集相关设置&lt;/span>
&lt;span style="color:#75715e"># mysql 5.1 之后，默认引擎就是InnoDB了&lt;/span>
default_storage_engine &lt;span style="color:#f92672">=&lt;/span> InnoDB
&lt;span style="color:#75715e"># 内存临时表默认引擎，默认InnoDB&lt;/span>
default_tmp_storage_engine &lt;span style="color:#f92672">=&lt;/span> InnoDB
&lt;span style="color:#75715e">#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）&lt;/span>
character-set-server &lt;span style="color:#f92672">=&lt;/span> utf8mb4
&lt;span style="color:#75715e">#数据库字符集对应一些排序等规则，注意要和character-set-server对应&lt;/span>
collation-server &lt;span style="color:#f92672">=&lt;/span> utf8mb4_unicode_ci
&lt;span style="color:#75715e"># 设置client连接mysql时的字符集,防止乱码&lt;/span>
&lt;span style="color:#75715e"># init_connect=&amp;#39;SET NAMES utf8&amp;#39;&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库连接相关设置&lt;/span>
&lt;span style="color:#75715e"># 最大连接数，可设最大值16384，一般考虑根据同时在线人数设置一个比较综合的数字，鉴于该数值增大并不太消耗系统资源，建议直接设10000&lt;/span>
&lt;span style="color:#75715e"># 如果在访问时经常出现Too Many Connections的错误提示，则需要增大该参数值&lt;/span>
max_connections &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span>
&lt;span style="color:#75715e"># 默认值100，最大错误连接数，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST&lt;/span>
&lt;span style="color:#75715e"># 考虑高并发场景下的容错，建议加大。&lt;/span>
max_connect_errors &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">10000&lt;/span>
&lt;span style="color:#75715e"># MySQL打开的文件描述符限制，默认最小1024;&lt;/span>
&lt;span style="color:#75715e"># 当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，&lt;/span>
&lt;span style="color:#75715e"># 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。&lt;/span>
open_files_limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">65535&lt;/span>
&lt;span style="color:#75715e"># 注意：仍然可能出现报错信息Can&amp;#39;t create a new thread；此时观察系统cat /proc/mysql进程号/limits，观察进程ulimit限制情况&lt;/span>
&lt;span style="color:#75715e"># 过小的话，考虑修改系统配置表，/etc/security/limits.conf和/etc/security/limits.d/90-nproc.conf&lt;/span>
&lt;span style="color:#75715e"># MySQL默认的wait_timeout 值为8个小时, interactive_timeout参数需要同时配置才能生效&lt;/span>
&lt;span style="color:#75715e"># MySQL连接闲置超过一定时间后(单位：秒，此处为1800秒)将会被强行关闭&lt;/span>
interactive_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1800&lt;/span>
wait_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1800&lt;/span>
&lt;span style="color:#75715e"># 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中 &lt;/span>
&lt;span style="color:#75715e"># 官方建议back_log = 50 + (max_connections / 5),封顶数为900&lt;/span>
back_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">900&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 数据库数据交换设置&lt;/span>
&lt;span style="color:#75715e"># 该参数限制服务器端，接受的数据包大小，如果有BLOB子段，建议增大此值，避免写入或者更新出错。有BLOB子段，建议改为1024M&lt;/span>
max_allowed_packet &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 内存，cache与buffer设置&lt;/span>
&lt;span style="color:#75715e"># 内存临时表的最大值,默认16M，此处设置成128M&lt;/span>
tmp_table_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 用户创建的内存表的大小，默认16M，往往和tmp_table_size一起设置，限制用户临师表大小。&lt;/span>
&lt;span style="color:#75715e"># 超限的话，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下，增大IO压力，建议内存大，增大该数值。&lt;/span>
max_heap_table_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 表示这个mysql版本是否支持查询缓存。ps：SHOW STATUS LIKE &amp;#39;qcache%&amp;#39;，与缓存相关的状态变量。&lt;/span>
&lt;span style="color:#75715e"># have_query_cache&lt;/span>
&lt;span style="color:#75715e"># 在一个事务中binlog为了记录SQL状态所持有的cache大小&lt;/span>
&lt;span style="color:#75715e"># 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.&lt;/span>
&lt;span style="color:#75715e"># 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中&lt;/span>
&lt;span style="color:#75715e"># 如果事务比此值大, 会使用磁盘上的临时文件来替代.&lt;/span>
&lt;span style="color:#75715e"># 此缓冲在每个连接的事务第一次更新状态时被创建&lt;/span>
binlog_cache_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e">#*** MyISAM 相关选项&lt;/span>
&lt;span style="color:#75715e"># 指定索引缓冲区的大小, 为MYISAM数据表开启供线程共享的索引缓存,对INNODB引擎无效。相当影响MyISAM的性能。&lt;/span>
&lt;span style="color:#75715e"># 不要将其设置大于你可用内存的30%,因为一部分内存同样被OS用来缓冲行数据&lt;/span>
&lt;span style="color:#75715e"># 甚至在你并不使用MyISAM 表的情况下, 你也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.&lt;/span>
&lt;span style="color:#75715e"># 默认值 8M，建议值：对于内存在4GB左右的服务器该参数可设置为256M或384M。注意：该参数值设置的过大反而会是服务器整体效率降低！&lt;/span>
key_buffer_size &lt;span style="color:#f92672">=&lt;/span> 64M
&lt;span style="color:#75715e"># 为每个扫描MyISAM的线程分配参数设置的内存大小缓冲区。 &lt;/span>
&lt;span style="color:#75715e"># 默认值128kb，建议值：16G内存建议1M，4G：128kb或者256kb吧&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。&lt;/span>
&lt;span style="color:#75715e"># 一般不需要太关心该数值，稍微增大就可以了，&lt;/span>
read_buffer_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">262144&lt;/span>
&lt;span style="color:#75715e"># 支持任何存储引擎&lt;/span>
&lt;span style="color:#75715e"># MySQL的随机读缓冲区大小，适当增大，可以提高性能。&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。&lt;/span>
read_rnd_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># order by或group by时用到 &lt;/span>
&lt;span style="color:#75715e"># 支持所有引擎，innodb和myisam有自己的innodb_sort_buffer_size和myisam_sort_buffer_size设置&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M.&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。&lt;/span>
sort_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># 此缓冲被使用来优化全联合(full JOINs 不带索引的联合)&lt;/span>
&lt;span style="color:#75715e"># 类似的联合在极大多数情况下有非常糟糕的性能表现,但是将此值设大能够减轻性能影响.&lt;/span>
&lt;span style="color:#75715e"># 通过 “Select_full_join” 状态变量查看全联合的数量&lt;/span>
&lt;span style="color:#75715e"># 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。&lt;/span>
&lt;span style="color:#75715e"># 默认值256kb;建议值：16G内存，设置8M.&lt;/span>
join_buffer_size &lt;span style="color:#f92672">=&lt;/span> 1M
&lt;span style="color:#75715e"># 缓存linux文件描述符信息，加快数据文件打开速度&lt;/span>
&lt;span style="color:#75715e"># 它影响myisam表的打开关闭，但是不影响innodb表的打开关闭。&lt;/span>
&lt;span style="color:#75715e"># 默认值2000，建议值：根据状态变量Opened_tables去设定&lt;/span>
table_open_cache &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2000&lt;/span>
&lt;span style="color:#75715e"># 缓存表定义的相关信息，加快读取表信息速度&lt;/span>
&lt;span style="color:#75715e"># 默认值1400，最大值2000，建议值：基本不改。&lt;/span>
table_definition_cache &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1400&lt;/span>
&lt;span style="color:#75715e"># 该参数是myssql 5.6后引入的，目的是提高并发。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，建议值：cpu核数，并且&amp;lt;=16&lt;/span>
table_open_cache_instances &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># 当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁。可重用，减小了系统开销。&lt;/span>
&lt;span style="color:#75715e"># 默认值为9，建议值：两种取值方式，方式一，根据物理内存，1G —&amp;gt; 8；2G —&amp;gt; 16； 3G —&amp;gt; 32； &amp;gt;3G —&amp;gt; 64；&lt;/span>
&lt;span style="color:#75715e"># 方式二，根据show status like &amp;#39;threads%&amp;#39;，查看Threads_connected值。&lt;/span>
thread_cache_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16&lt;/span>
&lt;span style="color:#75715e"># 默认值256k,建议值：16/32G内存，512kb，其他一般不改变，如果报错：Thread stack overrun，就增大看看,&lt;/span>
&lt;span style="color:#75715e"># 注意，每个线程分配内存空间，所以总内存空间。。。你懂得。&lt;/span>
thread_stack &lt;span style="color:#f92672">=&lt;/span> 512k
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 日志文件相关设置，一般只开启三种日志，错误日志，慢查询日志，二进制日志。普通查询日志不开启。&lt;/span>
&lt;span style="color:#75715e"># 普通查询日志，默认值off，不开启&lt;/span>
general_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 普通查询日志存放地址&lt;/span>
general_log_file &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-general.log
&lt;span style="color:#75715e"># 全局动态变量，默认3，范围：1～3&lt;/span>
&lt;span style="color:#75715e"># 表示错误日志记录的信息，1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息。&lt;/span>
log_error_verbosity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
&lt;span style="color:#75715e"># 错误日志文件地址&lt;/span>
log_error &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-error.log
&lt;span style="color:#75715e"># 开启慢查询&lt;/span>
slow_query_log &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 开启慢查询时间，此处为1秒，达到此值才记录数据&lt;/span>
long_query_time &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># 检索行数达到此数值，才记录慢查询日志中&lt;/span>
min_examined_row_limit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">100&lt;/span>
&lt;span style="color:#75715e"># mysql 5.6.5新增，用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认值为0，不限制。&lt;/span>
log_throttle_queries_not_using_indexes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 慢查询日志文件地址&lt;/span>
slow_query_log_file &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-slow.log
&lt;span style="color:#75715e"># 开启记录没有使用索引查询语句&lt;/span>
log-queries-not-using-indexes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 开启二进制日志&lt;/span>
log_bin &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log/mysql-bin.log
&lt;span style="color:#75715e"># mysql清除过期日志的时间，默认值30*24*60*60，&lt;/span>
binlog_expire_logs_seconds&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">604800&lt;/span>
&lt;span style="color:#75715e"># 如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于1GB或小于4096字节。 默认值是1GB。&lt;/span>
max_binlog_size &lt;span style="color:#f92672">=&lt;/span> 1000M
&lt;span style="color:#75715e"># binlog的格式也有三种：STATEMENT，ROW，MIXED。mysql 5.7.7后，默认值从 MIXED 改为 ROW&lt;/span>
&lt;span style="color:#75715e"># 关于binlog日志格式问题，请查阅网络资料&lt;/span>
binlog_format &lt;span style="color:#f92672">=&lt;/span> row
&lt;span style="color:#75715e"># 默认值N=1，使binlog在每N次binlog写入后与硬盘同步，ps：1最慢&lt;/span>
&lt;span style="color:#75715e"># sync_binlog = 1 &lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># innodb选项&lt;/span>
&lt;span style="color:#75715e"># 说明：该参数可以提升扩展性和刷脏页性能。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，建议值：4-8；并且必须小于innodb_buffer_pool_instances&lt;/span>
innodb_page_cleaners &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 说明：一般8k和16k中选择，8k的话，cpu消耗小些，selcet效率高一点，一般不用改&lt;/span>
&lt;span style="color:#75715e"># 默认值：16k；建议值：不改，&lt;/span>
innodb_page_size &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">16384&lt;/span>
&lt;span style="color:#75715e"># 说明：InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.&lt;/span>
&lt;span style="color:#75715e"># 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的60%-80%&lt;/span>
&lt;span style="color:#75715e"># 注意别设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率&lt;/span>
&lt;span style="color:#75715e"># 默认值：128M，建议值：物理内存的60%-80%&lt;/span>
innodb_buffer_pool_size &lt;span style="color:#f92672">=&lt;/span> 512M
&lt;span style="color:#75715e"># 说明:只有当设置 innodb_buffer_pool_size 值大于1G时才有意义，小于1G，instances默认为1，大于1G，instances默认为8&lt;/span>
&lt;span style="color:#75715e"># 但是网络上有评价，最佳性能，每个实例至少1G大小。&lt;/span>
&lt;span style="color:#75715e"># 默认值：1或8，建议值：innodb_buffer_pool_size/innodb_buffer_pool_instances &amp;gt;= 1G&lt;/span>
innodb_buffer_pool_instances &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：mysql 5.7 新特性，defines the chunk size for online InnoDB buffer pool resizing operations.&lt;/span>
&lt;span style="color:#75715e"># 实际缓冲区大小必须为innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances*倍数，取略大于innodb_buffer_pool_size&lt;/span>
&lt;span style="color:#75715e"># 默认值128M，建议值：默认值就好，乱改反而容易出问题，它会影响实际buffer pool大小。&lt;/span>
innodb_buffer_pool_chunk_size &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e"># 在启动时把热数据加载到内存。默认值为on，不修改&lt;/span>
innodb_buffer_pool_load_at_startup &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 在关闭时把热数据dump到本地磁盘。默认值为on，不修改&lt;/span>
innodb_buffer_pool_dump_at_shutdown &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：影响Innodb缓冲区的刷新算法，建议从小到大配置，直到zero free pages；innodb_lru_scan_depth * innodb_buffer_pool_instances defines the amount of work performed by the page cleaner thread each second.&lt;/span>
&lt;span style="color:#75715e"># 默认值1024，建议值: 未知&lt;/span>
innodb_lru_scan_depth &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1024&lt;/span>
&lt;span style="color:#75715e"># 说明：事务等待获取资源等待的最长时间，单位为秒，看具体业务情况，一般默认值就好&lt;/span>
&lt;span style="color:#75715e"># 默认值：50，建议值：看业务。&lt;/span>
innodb_lock_wait_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">60&lt;/span>
&lt;span style="color:#75715e"># 说明：设置了Mysql后台任务（例如页刷新和merge dadta from buffer pool）每秒io操作的上限。&lt;/span>
&lt;span style="color:#75715e"># 默认值：200，建议值：方法一，单盘sata设100，sas10，raid10设200，ssd设2000，fushion-io设50000；方法二，通过测试工具获得磁盘io性能后，设置IOPS数值/2。&lt;/span>
innodb_io_capacity &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">2000&lt;/span>
&lt;span style="color:#75715e"># 说明：该参数是所有缓冲区线程io操作的总上限。&lt;/span>
&lt;span style="color:#75715e"># 默认值：innodb_io_capacity的两倍。建议值：例如用iometer测试后的iops数值就好&lt;/span>
innodb_io_capacity_max &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4000&lt;/span>
&lt;span style="color:#75715e"># 说明：控制着innodb数据文件及redo log的打开、刷写模式，三种模式：fdatasync(默认)，O_DSYNC，O_DIRECT&lt;/span>
&lt;span style="color:#75715e"># fdatasync：数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># O_DSYNC： 数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># O_DIRECT： 数据文件，buffer pool-&amp;gt;磁盘； 日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；&lt;/span>
&lt;span style="color:#75715e"># 默认值为空，建议值：使用SAN或者raid，建议用O_DIRECT，不懂测试的话，默认生产上使用O_DIRECT&lt;/span>
innodb_flush_method &lt;span style="color:#f92672">=&lt;/span> O_DIRECT
&lt;span style="color:#75715e"># 说明：mysql5.7之后默认开启，意思是，每张表一个独立表空间。&lt;/span>
&lt;span style="color:#75715e"># 默认值1，开启&lt;/span>
innodb_file_per_table &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：The path where InnoDB creates undo tablespaces.通常等于undo log文件的存放目录。&lt;/span>
&lt;span style="color:#75715e"># 默认值./;自行设置&lt;/span>
innodb_undo_directory &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log
&lt;span style="color:#75715e"># 说明：5.7.5后开始使用，在线收缩undo log使用的空间。&lt;/span>
&lt;span style="color:#75715e"># 默认值：关闭，建议值：开启&lt;/span>
innodb_undo_log_truncate &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：结合innodb_undo_log_truncate，实现undo空间收缩功能&lt;/span>
&lt;span style="color:#75715e"># 默认值：1G，建议值，不改。&lt;/span>
innodb_max_undo_log_size &lt;span style="color:#f92672">=&lt;/span> 1G
&lt;span style="color:#75715e"># 说明：重作日志文件的存放目录&lt;/span>
innodb_log_group_home_dir &lt;span style="color:#f92672">=&lt;/span> /usr/local/mysql8/log
&lt;span style="color:#75715e"># 说明：日志文件的大小&lt;/span>
&lt;span style="color:#75715e"># 默认值:48M,建议值：根据你系统的磁盘空间和日志增长情况调整大小&lt;/span>
innodb_log_file_size &lt;span style="color:#f92672">=&lt;/span> 128M
&lt;span style="color:#75715e"># 说明：日志组中的文件数量，mysql以循环方式写入日志&lt;/span>
&lt;span style="color:#75715e"># 默认值2，建议值：根据你系统的磁盘空间和日志增长情况调整大小&lt;/span>
innodb_log_files_in_group &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span>
&lt;span style="color:#75715e"># 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间&lt;/span>
innodb_log_buffer_size &lt;span style="color:#f92672">=&lt;/span> 16M
&lt;span style="color:#75715e"># 说明：可以控制log从系统buffer刷入磁盘文件的刷新频率，增大可减轻系统负荷&lt;/span>
&lt;span style="color:#75715e"># 默认值是1；建议值不改。系统性能一般够用。&lt;/span>
innodb_flush_log_at_timeout &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：参数可设为0，1，2；&lt;/span>
&lt;span style="color:#75715e"># 参数0：表示每秒将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。&lt;/span>
&lt;span style="color:#75715e"># 参数1：表示每次事物提交，将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。&lt;/span>
&lt;span style="color:#75715e"># 参数2：表示每次事物提交，将log buffer内容刷新到系统buffer中，隔1秒后再调用系统flush操作写入磁盘文件。&lt;/span>
innodb_flush_log_at_trx_commit &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。&lt;/span>
&lt;span style="color:#75715e"># 值默认是2000，建议值：参考数据库表总数再进行调整，一般够用不用调整。&lt;/span>
innodb_open_files &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">8192&lt;/span>
&lt;span style="color:#75715e"># innodb处理io读写的后台并发线程数量，根据cpu核来确认，取值范围：1-64&lt;/span>
&lt;span style="color:#75715e"># 默认值：4，建议值：与逻辑cpu数量的一半保持一致。&lt;/span>
innodb_read_io_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
innodb_write_io_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量&lt;/span>
innodb_thread_concurrency &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#75715e"># 默认值为4，建议不变。InnoDB中的清除操作是一类定期回收无用数据的操作。mysql 5.5之后，支持多线程清除操作。&lt;/span>
innodb_purge_threads &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">4&lt;/span>
&lt;span style="color:#75715e"># 说明：mysql缓冲区分为new blocks和old blocks；此参数表示old blocks占比；&lt;/span>
&lt;span style="color:#75715e"># 默认值：37，建议值，一般不动&lt;/span>
innodb_old_blocks_pct &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">37&lt;/span>
&lt;span style="color:#75715e"># 说明：新数据被载入缓冲池，进入old pages链区，当1秒后再次访问，则提升进入new pages链区。&lt;/span>
&lt;span style="color:#75715e"># 默认值：1000&lt;/span>
innodb_old_blocks_time&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#ae81ff">1000&lt;/span>
&lt;span style="color:#75715e"># 说明：开启异步io，可以提高并发性，默认开启。&lt;/span>
&lt;span style="color:#75715e"># 默认值为1，建议不动&lt;/span>
innodb_use_native_aio &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#75715e"># 说明：默认为空，使用data目录，一般不改。&lt;/span>
innodb_data_home_dir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data
&lt;span style="color:#75715e"># 说明：Defines the name, size, and attributes of InnoDB system tablespace data files.&lt;/span>
&lt;span style="color:#75715e"># 默认值，不指定，默认为ibdata1:12M:autoextend&lt;/span>
innodb_data_file_path &lt;span style="color:#f92672">=&lt;/span> ibdata1:12M:autoextend
&lt;span style="color:#75715e"># 说明：The crash recovery mode。只有紧急情况需要恢复数据的时候，才改为大于1-6之间数值，含义查下官网。&lt;/span>
&lt;span style="color:#75715e"># 默认值为0；&lt;/span>
&lt;span style="color:#75715e">#innodb_force_recovery = 0&lt;/span>
&lt;span style="color:#75715e">##########################################################################################################&lt;/span>
&lt;span style="color:#75715e"># 其他。。。。&lt;/span>
&lt;span style="color:#75715e"># 参考http://www.kuqin.com/database/20120815/328905.html&lt;/span>
&lt;span style="color:#75715e"># skip-external-locking&lt;/span>
&lt;span style="color:#75715e"># 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。&lt;/span>
&lt;span style="color:#75715e"># 缺点：所有远程主机连接授权都要使用IP地址方式，因为只认得ip地址了。&lt;/span>
&lt;span style="color:#75715e"># skip_name_resolve = 0&lt;/span>
&lt;span style="color:#75715e"># 默认值为off,timestamp列会自动更新为当前时间，设置为on|1，timestamp列的值就要显式更新&lt;/span>
explicit_defaults_for_timestamp &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>mysqldump&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e"># quick选项强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中&lt;/span>
quick
max_allowed_packet &lt;span style="color:#f92672">=&lt;/span> 16M
&lt;span style="color:#f92672">[&lt;/span>mysql&lt;span style="color:#f92672">]&lt;/span>
&lt;span style="color:#75715e"># mysql命令行工具不使用自动补全功能，建议还是改为&lt;/span>
&lt;span style="color:#75715e"># no-auto-rehash&lt;/span>
auto-rehash
socket &lt;span style="color:#f92672">=&lt;/span> /tmp/mysql.sock
&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建my.cnf后&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">&lt;span style="color:#75715e"># 切换到安装目录&lt;/span>
cd /usr/local/mysql8
&lt;span style="color:#75715e"># 创建相关文件&lt;/span>
mkdir data log
chown -R mysql:mysql data log
&lt;span style="color:#75715e"># 初始化mysql, --defaults-file的参数就是刚才创建的配置文件, --basedir的参数就是mysql安装目录, --datadir的参数就是mysql数据目录&lt;/span>
./bin/mysqld --defaults-file&lt;span style="color:#f92672">=&lt;/span>/etc/my.cnf --initialize --user&lt;span style="color:#f92672">=&lt;/span>mysql --basedir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/ --datadir&lt;span style="color:#f92672">=&lt;/span>/usr/local/mysql8/data/
&lt;span style="color:#75715e"># 会返回类似代码&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013169&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span> /usr/local/mysql8/bin/mysqld &lt;span style="color:#f92672">(&lt;/span>mysqld 8.0.20&lt;span style="color:#f92672">)&lt;/span> initializing of server in progress as process &lt;span style="color:#ae81ff">48055&lt;/span>
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013576&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>InnoDB&lt;span style="color:#f92672">]&lt;/span> InnoDB initialization has started.
&lt;span style="color:#f92672">[&lt;/span>System&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-013577&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>InnoDB&lt;span style="color:#f92672">]&lt;/span> InnoDB initialization has ended.
&lt;span style="color:#f92672">[&lt;/span>Note&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>MY-010454&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">[&lt;/span>Server&lt;span style="color:#f92672">]&lt;/span> A temporary password is generated &lt;span style="color:#66d9ef">for&lt;/span> root@localhost: &lt;span style="color:#f92672">=&lt;/span>tsSl-.Wt3ud
&lt;span style="color:#75715e"># &amp;#34;root@localhost:&amp;#34; 后边跟着就是mysql为root生成的临时密码,记下来,开启mysql后,可以用这个密码登录(如果没返回上述代码,则查看日志,如: vim log/mysql-error.log)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>开启并修改root密码&lt;/p>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">
cd /usr/local/mysql8
&lt;span style="color:#75715e"># 开启mysql&lt;/span>
./support-files/mysql.server start
&lt;span style="color:#75715e"># 登录并输入刚才记下的临时密码&lt;/span>
./bin/mysql -uroot -p
&lt;span style="color:#75715e"># 修改root密码&lt;/span>
mysql&amp;gt; alter user &lt;span style="color:#e6db74">&amp;#39;root&amp;#39;&lt;/span>@&lt;span style="color:#e6db74">&amp;#39;localhost&amp;#39;&lt;/span> identified by &lt;span style="color:#e6db74">&amp;#34;123456&amp;#34;&lt;/span>;
&lt;/code>&lt;/pre>&lt;/div>&lt;hr>
&lt;h2 id="笔记三-开关mysql">笔记三: 开关mysql&lt;/h2>
&lt;div class="highlight">&lt;pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-sh" data-lang="sh">cd /usr/local/mysql8
&lt;span style="color:#75715e"># 开启mysql进程&lt;/span>
./bin/mysqld -u mysql
&lt;span style="color:#75715e"># 关闭mysql进程&lt;/span>
./bin/mysqladmin -uroot shutdown
&lt;span style="color:#75715e"># 开启mysqld的守护进程,实际上是开启mysqld,当mysqld意外关闭时,mysqld_safe自动重启mysqld(可添加--skip-grant-tables参数,root可免密登录)&lt;/span>
./bin/mysqld_safe --user&lt;span style="color:#f92672">=&lt;/span>mysql &amp;amp;
&lt;span style="color:#75715e"># 关闭mysqld的守护进程&lt;/span>
./bin/mysqladmin -uroot shutdown
&lt;span style="color:#75715e"># 开启mysql服务,实际是开启mysqld_safe&lt;/span>
./support-files/mysql.server start
&lt;span style="color:#75715e"># 关闭mysql服务&lt;/span>
./support-files/mysql.server stop
&lt;span style="color:#75715e"># 登录mysql&lt;/span>
./bin/mysql -uroot -p
&lt;span style="color:#75715e"># 软连接(软连接的源文件路径要写成绝对路径)&lt;/span>
ln -s /usr/local/mysql8/bin/* /usr/local/bin/
&lt;span style="color:#75715e"># 启动设置&lt;/span>
cp support-files/mysql.server /etc/init.d/mysql.server
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>搭建博客的准备</title><link>https://twbworld.github.io/post/blog_ready/</link><pubDate>Sun, 17 May 2020 19:06:47 +0800</pubDate><guid>https://twbworld.github.io/post/blog_ready/</guid><description>&lt;blockquote>
&lt;p>最近想建立自己的博客网站,便于在开发过程中写一些笔记;&lt;br>
但进入了未知领域,面临了怎么抉择的问题; 毕竟谁也不情愿一开始就因选择了自己不适合的,最后半途而悔&lt;/p>
&lt;/blockquote>
&lt;h2 id="平台的选择">平台的选择&lt;/h2>
&lt;p>进入我的备选名单的有:&lt;/p>
&lt;ul>
&lt;li>CSDN&lt;/li>
&lt;li>博客园&lt;/li>
&lt;li>WordPress&lt;/li>
&lt;li>Github Pages&lt;/li>
&lt;li>知乎&lt;/li>
&lt;/ul>
&lt;p>先讲结论,我最终选择了Github Pages&lt;/p>
&lt;h3 id="wordpress">WordPress&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>自己搭建的博客,自由度非常高&lt;/li>
&lt;li>历经多年,插件丰富&lt;/li>
&lt;li>对phper友好PHP&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>浪费大量 时间 / 精力 / 金钱 去维护网站(服务器的维护,域名,SEO,还有服务器安全方面的考虑,等等)&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>时间宝贵,老子只想静静的写文章,不愿在无意义的事上浪费有限的时间&lt;/p>
&lt;/blockquote>
&lt;h3 id="知乎">知乎&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>前端界面较前卫&lt;/li>
&lt;li>平台的文章质量也很高,也有大量的程序猿聚集在此&lt;/li>
&lt;li>平台流量大,本人平时也喜欢逛知乎,有些许个人感情&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>平台信息有点杂,文章五花八门,而且这几年很多在知乎上带节奏,以及一些搞营销的,比较反感&lt;/li>
&lt;li>知乎对MarkDown的支持不友好&lt;/li>
&lt;/ul>
&lt;h3 id="csdn博客园">CSDN/博客园&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>CSDN/博客园 的搜索引擎优化是做的不错&lt;/li>
&lt;li>程序猿社区,专注于技术博客,不像知乎给人的感觉很杂&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>平台界面老旧(点名批评博客园,强迫症看着难受)&lt;/li>
&lt;li>CSDN的下载文件有收费模式&lt;/li>
&lt;li>内容限制于平台,插广告都困难&lt;/li>
&lt;/ul>
&lt;h3 id="github-pages">Github Pages&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>使用Git管理&lt;/li>
&lt;li>静态网站,比较好维护&lt;/li>
&lt;li>搜索引擎优化,服务器的维护等等这些,全权交给github好了,不需要浪费过多的精力&lt;/li>
&lt;li>自由度较高,可以使用各种主题和插件,没有平台限制,插广告放个&amp;quot;看板娘&amp;quot;啥的&lt;/li>
&lt;li>可使用自己的域名,且免费支持https&lt;/li>
&lt;li>写博客使用MarkDown,就要有图床;可使用Github仓库作为图床,托管图片和静态资源&lt;/li>
&lt;li>如果搭配GitHub Actions的免费CI/CD服务(即push代码即可实现部署代码等工作), 那么 Git仓库 + 图床 + CI/CD 都在GitHub的生态下, 体验一级棒&lt;/li>
&lt;li>Github是未来[呐喊], Github是未来[呐喊], Github是未来[呐喊]&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>gh-pages屏蔽了百度蜘蛛,用百度搜索引擎无法搜索出Github Pages的文章(但另一方面,百度相比Google的搜索质量差太多了;有&amp;quot;条件&amp;quot;的程序猿都善用Google吧?)解决办法并不是没有,&lt;a href="https://vercel.com/" target="_blank" rel="noopener">zeit.co&lt;/a> 可提供CDN服务&lt;/li>
&lt;/ul>
&lt;hr>
&lt;blockquote>
&lt;p>如果您也决定使用gh-pages搭建博客,那就会面临着一个选择, 博客框架/静态网站生成器 的选择(强迫症又要犯了!)&lt;/p>
&lt;/blockquote>
&lt;h2 id="博客框架的选择">博客框架的选择&lt;/h2>
&lt;blockquote>
&lt;p>我所理解的静态网站生成器: 在生成器框架下写MarkDown文章,使用生成器把MarkDown文章编译成生成HTML&lt;/p>
&lt;/blockquote>
&lt;p>主流选择也就那么几个:&lt;/p>
&lt;ul>
&lt;li>Jekyll&lt;/li>
&lt;li>Hexo&lt;/li>
&lt;li>VuePress&lt;/li>
&lt;li>Hugo&lt;/li>
&lt;/ul>
&lt;p>先讲结论,经一番思想斗争,本人选择了Hugo&lt;/p>
&lt;h3 id="jekyll">Jekyll&lt;/h3>
&lt;p>Jekyll是GitHub创始人使用Ruby写的,同时也是gh-Pages默认的静态网站生成器&lt;br>
但其速度较慢,特别是文章多的时候,特别明显&lt;/p>
&lt;h3 id="hexo">Hexo&lt;/h3>
&lt;p>Hexo是js写的,js的用户群体较大,Hexo中文文档比较齐全,国内获得了较大的使用人群&lt;/p>
&lt;h3 id="vuepress">VuePress&lt;/h3>
&lt;p>较新的静态网站生成器,热度也不低,但同时也不太稳定; 其名可知,对熟悉Vue的同学较为友好,且Vue在交互性上有巨大的优势&lt;/p>
&lt;h3 id="hugo">Hugo&lt;/h3>
&lt;p>优点:&lt;/p>
&lt;ul>
&lt;li>天下武功唯快不破,使用golang开发; 即使应对庞大的文章生成量,速度是用秒来计算的,简直秒杀对手&lt;/li>
&lt;li>&amp;ldquo;Google出品,必属精品&amp;rdquo;,相信Hugo会随着go的影响力在国内越走越远(本人也正有学go的想法)&lt;/li>
&lt;li>一个技巧(专治&amp;quot;选择困难症&amp;quot;),利用了搜索引擎来对比了Hexo和Hugo的搜索热度,Hugo的相关文章数是Hexo的100多倍,全球用户量庞大,Hugo所可选的博客模板也不少
&lt;img src="https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200517212636.png" alt="">&lt;/li>
&lt;/ul>
&lt;p>缺点:&lt;/p>
&lt;ul>
&lt;li>虽然全球用户量庞大,但缺乏中文文档, 国内用户群体少, Hugo的相关中文文章也就少; Hugo会不会是在国内的一支&amp;quot;潜力股&amp;quot; ?&lt;/li>
&lt;/ul></description></item><item><title>订阅</title><link>https://twbworld.github.io/post/proxy/</link><pubDate>Tue, 23 Feb 2021 00:00:00 +0800</pubDate><guid>https://twbworld.github.io/post/proxy/</guid><description>&lt;h2 id="1费用">1#费用&lt;/h2>
&lt;h3 id="月付">月付&lt;/h3>
&lt;blockquote>
&lt;p>如想要更低的价 , 或者 担心每月忘记续费 , 可选择 &lt;em>&lt;strong>年付&lt;/strong>&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>流量(G/月)&lt;/th>
&lt;th>价格(￥)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>50&lt;/td>
&lt;td>9&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>100&lt;/td>
&lt;td>15&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>250&lt;/td>
&lt;td>29&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>500&lt;/td>
&lt;td>49&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="年付">年付&lt;/h3>
&lt;h4 id="年付8折计算">年付8折计算&lt;/h4>
&lt;p>以 &lt;code>100G/月&lt;/code> 为例计算 :&lt;br>
&lt;code>15(元/月) X 12(月) X 0.8(折扣) = 144(元/年)&lt;/code>&lt;/p>
&lt;h3 id="ps">PS&lt;/h3>
&lt;ul>
&lt;li>现在 , 可免费试用1个月, 50-100g不等 (亏本吖)&lt;/li>
&lt;li>如果月底前就把流量用光了, 联系可免费续10%流量&lt;/li>
&lt;li>如果觉得可以, 把我推荐给身边的朋友哟, 可适当奖励哟&lt;/li>
&lt;li>每月1号流量重新开始算, 所以请在1号前续费&lt;/li>
&lt;li>&lt;a href="https://fanqianghou.com/" target="_blank" rel="noopener">&lt;code>Fq&lt;/code> 后,可做啥?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="2联系">2#联系&lt;/h2>
&lt;p>+wx: &lt;em>&lt;strong>&lt;code>twbhub&lt;/code>&lt;/strong>&lt;/em>&lt;/p>
&lt;h2 id="3教程">3#教程&lt;/h2>
&lt;h4 id="android">Android&lt;/h4>
&lt;p>点击&lt;a href="http://oneindex.twbhub.com/0/?/oneindex_share/Android.docx" target="_blank" style="">下载&lt;/a>&lt;/p>
&lt;h4 id="ios">iOS&lt;/h4>
&lt;p>点击&lt;a href="http://oneindex.twbhub.com/0/?/oneindex_share/iOS.docx" target="_blank" style="">下载&lt;/a>&lt;/p>
&lt;h4 id="windows">Windows&lt;/h4>
&lt;p>点击&lt;a href="http://oneindex.twbhub.com/0/?/oneindex_share/Windows.docx" target="_blank" style="">下载&lt;/a>&lt;/p>
&lt;h4 id="macos">macOS&lt;/h4>
&lt;p>点击&lt;a href="http://oneindex.twbhub.com/0/?/oneindex_share/macOS.docx" target="_blank" style="">下载&lt;/a>&lt;/p></description></item></channel></rss>