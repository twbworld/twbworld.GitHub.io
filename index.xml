<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>忐忑の博客</title>
    <link>https://twbworld.github.io/</link>
      <atom:link href="https://twbworld.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>忐忑の博客</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><copyright>[![忐忑的博客](https://img.shields.io/badge/©-2020—2020_忐忑-yellow)](/authors/admin/) [![备案号](https://img.shields.io/badge/粤ICP备-20059599号-eb0500)](http://www.beian.miit.gov.cn/)   [![忐忑的博客](https://img.shields.io/github/tag/twbworld/hugo-blog?logo=github)](https://github.com/twbworld/hugo-blog) [![Hugo](https://img.shields.io/badge/powered-hugo-ff4088?logo=hugo)](https://gohugo.io/) [![wowchemy](https://img.shields.io/badge/theme-wowchemy-00d1b2)](https://wowchemy.com/)</copyright><lastBuildDate>Sun, 04 Oct 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://twbworld.github.io/media/avatar.jpg</url>
      <title>忐忑の博客</title>
      <link>https://twbworld.github.io/</link>
    </image>
    
    <item>
      <title>学习笔记</title>
      <link>https://twbworld.github.io/post/2020/10/04/node/</link>
      <pubDate>Sun, 04 Oct 2020 00:00:00 +0000</pubDate>
      <guid>https://twbworld.github.io/post/2020/10/04/node/</guid>
      <description>&lt;h2 id=&#34;扩展知识&#34;&gt;扩展知识&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;Windows&lt;/code&gt; 下配置文件,注意 &lt;code&gt;\n&lt;/code&gt; 和 &lt;code&gt;\r&lt;/code&gt; 和 &lt;code&gt;\t&lt;/code&gt; 会被转义,要把 &lt;code&gt;\&lt;/code&gt; 改成 &lt;code&gt;/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;双系统制作&#34;&gt;双系统制作&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/mengxiangjia_linxi/article/details/78965103&#34;&gt;https://blog.csdn.net/mengxiangjia_linxi/article/details/78965103&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;电脑已有 &lt;code&gt;Windows系统&lt;/code&gt; 的前提下,用 &lt;code&gt;UltraISO&lt;/code&gt; 把 &lt;code&gt;centos系统&lt;/code&gt; 刻入U盘&lt;/li&gt;
&lt;li&gt;启动系统U盘(新机用 &lt;code&gt;uefi启动&lt;/code&gt; ),在系统选择页面,按下 &lt;code&gt;tab健&lt;/code&gt; 修改启动项,把 &lt;code&gt;LABEL=CentOS\x207\x20x86_64&lt;/code&gt; 改为 &lt;code&gt;/dev/sdb4&lt;/code&gt; (不一定是 &lt;code&gt;sdb4&lt;/code&gt; ,可能是 &lt;code&gt;sda4&lt;/code&gt; , &lt;code&gt;sdc4&lt;/code&gt; 等等,具体百度)&lt;/li&gt;
&lt;li&gt;安装系统界面,选择硬盘,自动分配分区得以回收空间&lt;/li&gt;
&lt;li&gt;重做 &lt;code&gt;PE启动盘&lt;/code&gt; ,启动盘用 &lt;code&gt;NTBOOT&lt;/code&gt; 软件做 &lt;code&gt;双系统引导修复&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;常用-命令快捷键&#34;&gt;常用 命令&amp;amp;&amp;amp;快捷键&lt;/h2&gt;
&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;..&lt;/td&gt;
&lt;td&gt;上一级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cd -&lt;/td&gt;
&lt;td&gt;上一次目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+C&lt;/td&gt;
&lt;td&gt;强制中断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+U&lt;/td&gt;
&lt;td&gt;清除输入命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;!v&lt;/td&gt;
&lt;td&gt;执行上一条以&amp;rsquo;v&amp;rsquo;开头的命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ll&lt;/td&gt;
&lt;td&gt;ls -l 缩写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|grep&lt;/td&gt;
&lt;td&gt;过滤结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+a/e&lt;/td&gt;
&lt;td&gt;命令最前/后&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clear&lt;/td&gt;
&lt;td&gt;清屏(或ctrl+L)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pwd&lt;/td&gt;
&lt;td&gt;当前目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cat&lt;/td&gt;
&lt;td&gt;查看文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mkdir/mv/cp/rm&lt;/td&gt;
&lt;td&gt;文件名操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\cp&lt;/td&gt;
&lt;td&gt;不使用alias&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;useradd&lt;/td&gt;
&lt;td&gt;创建新用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;which&lt;/td&gt;
&lt;td&gt;查找命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chown&lt;/td&gt;
&lt;td&gt;设置文件拥有者&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod&lt;/td&gt;
&lt;td&gt;设置u/g/o权限&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setfacl -R -m u:apache:rwx /var&lt;/td&gt;
&lt;td&gt;设置单独用户的权限(getfacl查看)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chattr&lt;/td&gt;
&lt;td&gt;设置文件属性,如设置成禁止删除文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ps -ef(ps aux)&lt;/td&gt;
&lt;td&gt;查看所有进程&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pstree -p&lt;/td&gt;
&lt;td&gt;查看进程树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pkill httpd&lt;/td&gt;
&lt;td&gt;关闭某进程(或killall)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uptime&lt;/td&gt;
&lt;td&gt;计算机负载&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;top&lt;/td&gt;
&lt;td&gt;实时负载(可安装htop加强版)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;df -h&lt;/td&gt;
&lt;td&gt;磁盘占用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;du -h &amp;ndash;max-depth=1&lt;/td&gt;
&lt;td&gt;目录下各个文件大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pkill -kill -t pts/1&lt;/td&gt;
&lt;td&gt;强退指定用户&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;who&lt;/td&gt;
&lt;td&gt;在线用户(或缩写w)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;last&lt;/td&gt;
&lt;td&gt;用户登录历史记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id&lt;/td&gt;
&lt;td&gt;查看用户所在的组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lsof -i:80&lt;/td&gt;
&lt;td&gt;查看端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;man&lt;/td&gt;
&lt;td&gt;命令帮助(可安装中文软件)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;netstat -antup | grep nginx&lt;/td&gt;
&lt;td&gt;查看进程或端口等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;curl ifconfig.me&lt;/td&gt;
&lt;td&gt;查看公网ip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rpm -qa|grep&lt;/td&gt;
&lt;td&gt;查看应用程序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yum install -y nginx&lt;/td&gt;
&lt;td&gt;安装软件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pkill -HUP nginx&lt;/td&gt;
&lt;td&gt;系统级别重载配置文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;systemctl status nginx.service&lt;/td&gt;
&lt;td&gt;查看状态(或service nginx status)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig iptables off&lt;/td&gt;
&lt;td&gt;永久关闭防火墙&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig iptables on&lt;/td&gt;
&lt;td&gt;永久关闭后重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ln&lt;/td&gt;
&lt;td&gt;建立连接,用于设置系统变量的第一步&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;nohup &amp;lt;shell&amp;gt;&lt;/td&gt;
&lt;td&gt;在后台运行shell命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tree -LNFC 2&lt;/td&gt;
&lt;td&gt;tree软件常用命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tar -xaf&lt;/td&gt;
&lt;td&gt;识别压缩文件类型,进行解压(-caf)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find / -name &amp;ldquo;*.txt&amp;rdquo; | xargs grep &amp;ldquo;hello&amp;rdquo;&lt;/td&gt;
&lt;td&gt;查找文件内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cat &amp;lt;filename&amp;gt; | openssl dgst -sha256 -binary | openssl base64 -A&lt;/td&gt;
&lt;td&gt;计算文件sha256校验值(css校验方法:&lt;code&gt;&amp;lt;link href=&amp;quot;filename.css&amp;quot; integrity=&amp;quot;sha256-h20CPZ0QyXlBuAw7A+KluUYx/3pK+c7lYEpqLTlxjYQ=&amp;quot;&amp;gt;&lt;/code&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sha256sum filename&lt;/td&gt;
&lt;td&gt;计算文件md5校验值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker container list -aq |xargs docker container rm&lt;/td&gt;
&lt;td&gt;docker清理容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker volume ls -q |xargs docker volume rm&lt;/td&gt;
&lt;td&gt;docker清理卷&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;git&#34;&gt;Git&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;初始化为git管理仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git status&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;仓库状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;工作区版本库对比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit --amend&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;修改已commit的备注&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git commit –am &amp;lt;备注&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;直接跳过add命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset --hard HEAD&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;还原最新版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset --hard &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;还原指定版&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reset HEAD &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;放弃暂存区的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout -- &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;放弃工作区的修改&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout . &amp;amp;&amp;amp; git clean -df&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清除所有新增的文件目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git checkout –b &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建并切换分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch –d &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch -D &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;丢弃未合并的分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch -r -d origin/&amp;lt;name&amp;gt; &amp;amp;&amp;amp; git push origin :&amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除远程分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git branch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git merge &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;合并分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git mergetool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;解决冲突的合并工具&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git tag -a &amp;lt;name&amp;gt; -m &amp;lt;备注&amp;gt; &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建并指定标签信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git tag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看所有标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git show &amp;lt;name&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看标签信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;保存当前工作现场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash pop&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;恢复并删除工作现场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查看工作现场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash apply &amp;lt;stash@{0}&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;恢复工作现场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git stash drop &amp;lt;stash@{0}&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除工作现场&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git push -u origin master&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;首次推送&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git clone &amp;lt;远程项目地址&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;克隆远程仓库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git reflog &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;命令历史&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git revert &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;撤销某个版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git cherry-pick &amp;lt;commit-id&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提取某个分支的某个版本到当前分支&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git check-ignore -v &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查哪个规则忽略了文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git rm -rf --cached . &amp;amp;&amp;amp; git add -A&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清徐缓存,用于更新gitignore&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git diff &amp;lt;commit-id&amp;gt; &amp;lt;commit-id&amp;gt; --stat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较两个版本变化了的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git submodule add &amp;lt;远程项目地址&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;添加子模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git submodule update --init&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;下载子模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git submodule update --remote&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;更新所有子模块&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git remote show origin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;详细的远程分支的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git log --oneline --graph --decorate --all -9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可视化显示版本树&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global alias.lg &amp;quot;log --color --graph --all --oneline  --decorate --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可视化显示版本树配置别名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global core.filemode false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭git对文件权限的监视&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global core.quotepath false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正常显示中文文件名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;git config --global color.ui true&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;彩色显示&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;vim&#34;&gt;Vim&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;效果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;!&amp;lt;shell&amp;gt;&lt;/td&gt;
&lt;td&gt;执行系统命令&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;u&lt;/td&gt;
&lt;td&gt;后退&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + r&lt;/td&gt;
&lt;td&gt;前进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;i/I/a/A/o/O&lt;/td&gt;
&lt;td&gt;前/行首/后/行尾/上行/下行 插入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;b/e/^/$/H/M/L/gg/G&lt;/td&gt;
&lt;td&gt;移动光标到 跳前/跳后/行首/行尾/窗头/窗中/窗尾/头部/尾部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + b/f/d/u&lt;/td&gt;
&lt;td&gt;翻一页/半页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;删除到行尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dG&lt;/td&gt;
&lt;td&gt;向下删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dd&lt;/td&gt;
&lt;td&gt;删除当前行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yy&lt;/td&gt;
&lt;td&gt;复制&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;粘贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ddp&lt;/td&gt;
&lt;td&gt;与下行互换位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yyp&lt;/td&gt;
&lt;td&gt;新增一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ggvG&lt;/td&gt;
&lt;td&gt;全选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set number&lt;/td&gt;
&lt;td&gt;显示行数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vim +X &amp;lt;filename&amp;gt;&lt;/td&gt;
&lt;td&gt;文件加密&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:&amp;lt;number&amp;gt;&lt;/td&gt;
&lt;td&gt;跳到指定行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;/&amp;lt;name&amp;gt;&lt;/td&gt;
&lt;td&gt;搜索(按 n/N 向 下/上 查找)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;sublime&#34;&gt;Sublime&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+L&lt;/td&gt;
&lt;td&gt;所有选中的行,在行后后出现光标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+M&lt;/td&gt;
&lt;td&gt;选中括号里的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+M&lt;/td&gt;
&lt;td&gt;光标在括号前后跳&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+[ / ]&lt;/td&gt;
&lt;td&gt;隐藏/显示 内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+J&lt;/td&gt;
&lt;td&gt;多行成一行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+KK&lt;/td&gt;
&lt;td&gt;删除行后的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+K+U / L&lt;/td&gt;
&lt;td&gt;选中的内容 大写/小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+F2&lt;/td&gt;
&lt;td&gt;标记行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;F6&lt;/td&gt;
&lt;td&gt;检错&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+.&lt;/td&gt;
&lt;td&gt;补充标签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+数字&lt;/td&gt;
&lt;td&gt;跳转tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shift+pgup&lt;/td&gt;
&lt;td&gt;向下选择&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;vimium&#34;&gt;Vimium&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;td&gt;搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;j/k&lt;/td&gt;
&lt;td&gt;滚动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gg/G&lt;/td&gt;
&lt;td&gt;头/底部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;d/u&lt;/td&gt;
&lt;td&gt;翻页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;td&gt;打开连接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x/X&lt;/td&gt;
&lt;td&gt;关闭/恢复标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;J/K&lt;/td&gt;
&lt;td&gt;上/下一个标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;yy&lt;/td&gt;
&lt;td&gt;复制链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H/L&lt;/td&gt;
&lt;td&gt;后退/前进记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;刷新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;新建标签页&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;chrome&#34;&gt;chrome&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+0&lt;/td&gt;
&lt;td&gt;恢复100%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+j&lt;/td&gt;
&lt;td&gt;下载页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+Shift+Delete&lt;/td&gt;
&lt;td&gt;清除数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl+u&lt;/td&gt;
&lt;td&gt;html源码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;windows&#34;&gt;windows&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Win+←&lt;/td&gt;
&lt;td&gt;小化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;win+v&lt;/td&gt;
&lt;td&gt;粘贴板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Win+i&lt;/td&gt;
&lt;td&gt;设置页&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Shift+Ctrl+Esc&lt;/td&gt;
&lt;td&gt;任务管理器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+F4&lt;/td&gt;
&lt;td&gt;关机&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+1/Enter/双击&lt;/td&gt;
&lt;td&gt;查看文件属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+↑&lt;/td&gt;
&lt;td&gt;上一级目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt+2(Shift+Ctrl+n)&lt;/td&gt;
&lt;td&gt;新建文件夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;右击+v+d&lt;/td&gt;
&lt;td&gt;隐藏图标(等等操作)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+win+D&lt;/td&gt;
&lt;td&gt;新建桌面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ctrl+win+←&lt;/td&gt;
&lt;td&gt;返回桌面(老板键)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;linux-1&#34;&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;端口号&amp;lt;1024为系统预留端口&lt;/li&gt;
&lt;li&gt;uid &amp;lt; 500 为系统用户&lt;/li&gt;
&lt;li&gt;非&lt;code&gt;root&lt;/code&gt;用户不能监听&amp;lt;1024的端口(所以一般&lt;code&gt;root&lt;/code&gt;启动&lt;code&gt;nginx&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;bnoody为Linux非登录用户,其作为nginx运行用户可保证安全&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Linux&lt;/code&gt;的共享:&lt;code&gt;NFS&lt;/code&gt;协议&lt;/li&gt;
&lt;li&gt;&lt;code&gt;windows&lt;/code&gt;与&lt;code&gt;linux&lt;/code&gt;共享:&lt;code&gt;SMB&lt;/code&gt;协议(&lt;code&gt;Samba&lt;/code&gt;软件)&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;权限&lt;/th&gt;
&lt;th&gt;符号&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可执行&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;可以进入该目录,无法读取该目录中的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可执行可读&lt;/td&gt;
&lt;td&gt;xr&lt;/td&gt;
&lt;td&gt;可以进入该目录并读取该目录中的内容,不能创建文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可执行可写&lt;/td&gt;
&lt;td&gt;xw&lt;/td&gt;
&lt;td&gt;可以创建文件但是不能读取&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;git-1&#34;&gt;Git&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;初始配置Git&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;设置本地用户和邮箱&lt;br&gt;
&lt;code&gt;git config --global user.name &amp;lt;your_name&amp;gt; &amp;amp;&amp;amp; git config --global user.email &amp;lt;your_email&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地生成公钥&lt;br&gt;
&lt;code&gt;ssh-keygen -t rsa -C &amp;lt;your_email&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到公钥,复制到github账号(即添加过公钥的用户才被允许管理github项目)&lt;/li&gt;
&lt;li&gt;测试公钥&lt;br&gt;
&lt;code&gt;ssh -T git@github.com&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;到github创建项目&lt;/li&gt;
&lt;li&gt;本地创建项目并初始化&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;关联远程库和本地&lt;br&gt;
&lt;code&gt;git remote add &amp;lt;自定义远程仓库名,如origin&amp;gt; &amp;lt;远程项目地址&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;可查看本地关联的所有仓库主机&lt;br&gt;
&lt;code&gt;git remote -v 或者 git remote show origin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把项目添加到缓存区&lt;br&gt;
&lt;code&gt;git add . 和 git commit –m &amp;lt;备注&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;提交项目到origin仓库的master分支&lt;br&gt;
&lt;code&gt;git push origin master (添加&amp;quot;--tags&amp;quot;可同时上传tag)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git hook :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;第三方仓库git hook&lt;/li&gt;
&lt;li&gt;服务器部署git裸仓库
&lt;a href=&#34;http://kongfangyu.com/2016/02/12/git-deploy&#34;&gt;http://kongfangyu.com/2016/02/12/git-deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;备注规范 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;feat: 新功能&lt;/li&gt;
&lt;li&gt;fix: 修复 bug&lt;/li&gt;
&lt;li&gt;docs: 文档变动&lt;/li&gt;
&lt;li&gt;style: 格式调整，对代码实际运行没有改动，例如添加空行、格式化等&lt;/li&gt;
&lt;li&gt;refactor: bug 修复和添加新功能之外的代码改动,重构大改动&lt;/li&gt;
&lt;li&gt;perf: 提升性能的改动&lt;/li&gt;
&lt;li&gt;test: 添加或修正测试代码&lt;/li&gt;
&lt;li&gt;chore: 构建过程或辅助工具和库（如文档生成）的更改&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编译安装&#34;&gt;编译安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 配置&lt;/span&gt;
./configure --prefix&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/nginx
&lt;span style=&#34;color:#75715e&#34;&gt;# 清除编译文件&lt;/span&gt;
make clean
&lt;span style=&#34;color:#75715e&#34;&gt;# 编译&lt;/span&gt;
make
&lt;span style=&#34;color:#75715e&#34;&gt;# 安装&lt;/span&gt;
make install
&lt;span style=&#34;color:#75715e&#34;&gt;# 软连接&lt;/span&gt;
ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx
&lt;span style=&#34;color:#75715e&#34;&gt;# 开机自启&lt;/span&gt;
vim /etc/init.d/nginx &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod a+x /etc/init.d/nginx
&lt;span style=&#34;color:#75715e&#34;&gt;# 加入chkconfig管理列表&lt;/span&gt;
chkconfig --add /etc/init.d/nginx
chkconfig nginx on
systemctl status nginx.service

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;yum安装指定版本&#34;&gt;yum安装指定版本&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1. 到官网找到对应版本的rpm包,如:http://nginx.org/packages
2. 下载rpm包:wget http://nginx.org/packages/.../xxx.rpm
3. 安装:yum install -y xxx.rpm
4. /etc/rc.d/rc.local是系统启动后执行的文件,可在里添加自启的命令(但不推荐用这方式)
5. /etc/profile是系统变量的文件
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;网络&#34;&gt;网络&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt; :需要三次握手,建立了 &lt;code&gt;TCP&lt;/code&gt; 虚拟通道,之后, &lt;code&gt;TCP&lt;/code&gt; 运输 &lt;code&gt;HTTP流&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SSL&lt;/code&gt; : 位于 &lt;code&gt;TCP&lt;/code&gt; 与 &lt;code&gt;HTTP&lt;/code&gt; 之间,作为 &lt;code&gt;HTTP&lt;/code&gt; 的安全供应商，全权负责 &lt;code&gt;HTTP&lt;/code&gt; 的安全加密工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TLS&lt;/code&gt; : 在 &lt;code&gt;SSL3.0&lt;/code&gt; 版本的基础上，重新设计并命名了这个协议，其全新的名字为 &lt;code&gt;TLS&lt;/code&gt; ,形成: &lt;code&gt;TCP连接时间&lt;/code&gt; + &lt;code&gt;TLS 连接时间&lt;/code&gt; + &lt;code&gt;HTTP交易时间&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HTTPS&lt;/code&gt; : 通常将 &lt;code&gt;TLS&lt;/code&gt; 安全保护的 &lt;code&gt;HTTP&lt;/code&gt; 通信，称之为 &lt;code&gt;HTTPS&lt;/code&gt; ，以区别于没有 &lt;code&gt;TLS&lt;/code&gt; 安全防护的 &lt;code&gt;HTTP&lt;/code&gt; 明文通信。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HTTP/2&lt;/code&gt; : 第一次页面与第二次页面都是同一个网站服务器,重用第一个页面 &lt;code&gt;TCP&lt;/code&gt; 连接&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;QUIC&lt;/code&gt; : &lt;code&gt;http/2&lt;/code&gt; 去掉 &lt;code&gt;TCP&lt;/code&gt; ,改用不需要连接的 &lt;code&gt;UDP&lt;/code&gt; ,形成: &lt;code&gt;UDP / QUIC&lt;/code&gt; ,第一次 &lt;code&gt;2.5RTT&lt;/code&gt; ,完成 &lt;code&gt;QUIC&lt;/code&gt; 交易的连接的 &lt;code&gt;Session ID&lt;/code&gt; 会缓存在浏览器内存里,第二次,使用 &lt;code&gt;Session ID&lt;/code&gt; ,重连 &lt;code&gt;TLS&lt;/code&gt; 连接是一个 &lt;code&gt;0 RTT&lt;/code&gt; 事件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;HTTP/3&lt;/code&gt; : 把 &lt;code&gt;QUIC&lt;/code&gt; 与 &lt;code&gt;HTTP&lt;/code&gt; 分离,形成: &lt;code&gt;UDP / QUIC / HTTP&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;IPv4&lt;/code&gt; 进行路由，使用 &lt;code&gt;TCP&lt;/code&gt; 进行连接层面的流量控制，使用 &lt;code&gt;SSL/TLS&lt;/code&gt; 协议实现传输安全，使用 &lt;code&gt;DNS&lt;/code&gt; 进行域名解析，使用 &lt;code&gt;HTTP&lt;/code&gt; 进行应用数据的传输。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IP&lt;/code&gt; 是网络层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TCP&lt;/code&gt; 是传输层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络层 &lt;code&gt;ARP&lt;/code&gt; : 保存 &lt;code&gt;IP&lt;/code&gt; 与 &lt;code&gt;mac&lt;/code&gt; 地址的映射列表,没有则会广播&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TCP/IP&lt;/code&gt; 连接 + &lt;code&gt;http&lt;/code&gt; 传输 &amp;ndash;&amp;gt; 网卡 &amp;ndash;&amp;gt; 内核(通过资源包的四元组信息,信息的其中之二是访问的 &lt;code&gt;IP+端口&lt;/code&gt; ) &amp;ndash;&amp;gt; &lt;code&gt;socket&lt;/code&gt;(它是文件系统,是资源,储存着端对端的四元组信息,被进程使用) &amp;ndash;&amp;gt; 进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;socket&lt;/code&gt; 是网络与进程的中介&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;隧道&#34;&gt;隧道&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/39382183&#34;&gt;https://www.zhihu.com/question/39382183&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;隧道是一种技术,有 &lt;code&gt;SSH隧道&lt;/code&gt; 和 &lt;code&gt;http隧道&lt;/code&gt; 和 &lt;code&gt;UDP隧道(p2p)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;隧道的中间服务器是不参与流量分析的,只用来传输流量,只是用于简单的过度&lt;/li&gt;
&lt;li&gt;代理是可以参与流量的处理的,比如 &lt;code&gt;http代理&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;但 &lt;code&gt;http代理&lt;/code&gt; 不能传输 &lt;code&gt;https流量&lt;/code&gt; ,因为 &lt;code&gt;https&lt;/code&gt; 是端对端的加密,没有中间人&lt;/li&gt;
&lt;li&gt;为了解决不能代理 &lt;code&gt;https流量&lt;/code&gt; , &lt;code&gt;http隧道&lt;/code&gt; 配合 &lt;code&gt;http&lt;/code&gt; 的 &lt;code&gt;CONNECT报文&lt;/code&gt; 解决了这个问题;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SOCKS5&lt;/code&gt; 方式可以代替 &lt;code&gt;CONNECT报文&lt;/code&gt; 的方法, &lt;code&gt;CONNECT报文&lt;/code&gt; 只能用于 &lt;code&gt;http流量&lt;/code&gt; ,而 &lt;code&gt;SOCKS5&lt;/code&gt; 可以传输任意协议,如 &lt;code&gt;https&lt;/code&gt; 或 &lt;code&gt;ftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;大致原理: &lt;code&gt;本地---(1)---&amp;gt;代理---(2)---&amp;gt;服务器&lt;/code&gt;; 本地与代理建立动态端口隧道,过程&lt;code&gt;(1)&lt;/code&gt; 使用 &lt;code&gt;SOCKS5&lt;/code&gt; 或 &lt;code&gt;http&lt;/code&gt; 的 &lt;code&gt;CONNECT报文(包裹着https流量)&lt;/code&gt; , 过程 &lt;code&gt;(2)&lt;/code&gt; 使用 &lt;code&gt;https&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zsythink.net/archives/2450&#34;&gt;https://www.zsythink.net/archives/2450&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;动态转发(科学上网)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# socks5代理的建立&lt;/span&gt;
ssh -N -f -D 127.0.0.1:6666 root@121.199.63.39

&lt;span style=&#34;color:#75715e&#34;&gt;# 原理:本地(127.0.0.1:6666)与代理(121.199.63.39)服务器建立隧道后,本地(127.0.0.1)使用socks5协议在外层加密https协议,通过本地代理端口(6666)-(隧道)-代理(121.199.63.39)-https访问服务端(https://www.google.com)&lt;/span&gt;
curl -x socks5://127.0.0.1:6666 https://www.google.com &lt;span style=&#34;color:#75715e&#34;&gt;#http为例&lt;/span&gt;
ssh -o ProxyCommand&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;nc -X 5 -x 127.0.0.1:6666 %h %p&amp;#34;&lt;/span&gt; https://www.google.com &lt;span style=&#34;color:#75715e&#34;&gt;#ssh为例,参数-X默认socks5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;本地转发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh -N -f -L 192.168.2.2:6666:121.199.63.39:22 root@121.199.63.39
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;远程转发&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh -N -f -R 121.199.63.39:6666:127.0.0.1:22 root@121.199.63.39
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;121.199.63.39&lt;/code&gt; 的 &lt;code&gt;22&lt;/code&gt; 端口,登录 &lt;code&gt;121.199.63.39localhost&lt;/code&gt; 的 &lt;code&gt;6666&lt;/code&gt; 端口&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;ssh -J root@121.199.63.39:22 -p6666 localhost
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;ftp&#34;&gt;Ftp&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;关闭防火墙&lt;/li&gt;
&lt;li&gt;安装 &lt;code&gt;ftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;修改三份文件 &lt;code&gt;ftpusers&lt;/code&gt; &lt;code&gt;user_list&lt;/code&gt; &lt;code&gt;vsftpd.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重启 &lt;code&gt;ftp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;防火墙配置文件允许 &lt;code&gt;21&lt;/code&gt; 端口&lt;/li&gt;
&lt;li&gt;开启防火墙&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ftp&lt;/code&gt; 限制用户访问目录思路:修改 &lt;code&gt;/etc/vsftpd/vsftpd.conf&lt;/code&gt; 文件中 &lt;code&gt;chroot_local_user&lt;/code&gt; , &lt;code&gt;chroot_list_enable&lt;/code&gt; , &lt;code&gt;chroot_list_file&lt;/code&gt; 三项; 修改用户默认进入的家目录,则修改 &lt;code&gt;/etc/passwd&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;vsftpd.conf&lt;/code&gt; 文件参考配置 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;listen_ipv6&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
pam_service_name&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;vsftpd
tcp_wrappers&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
write_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
local_umask&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;022&lt;/span&gt;             &lt;span style=&#34;color:#75715e&#34;&gt;#用户ftp创建目录的权限掩码,022即为755&lt;/span&gt;
listen&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NO                   &lt;span style=&#34;color:#75715e&#34;&gt;#监听,yes可能导致无法启动ftp&lt;/span&gt;
anonymous_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NO         &lt;span style=&#34;color:#75715e&#34;&gt;#拒绝匿名用户&lt;/span&gt;
local_root&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/www/html    &lt;span style=&#34;color:#75715e&#34;&gt;#本地用户初始目录&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#登录限制&lt;/span&gt;
local_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
userlist_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
userlist_deny&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;NO
userlist_file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/vsftpd/user_list
&lt;span style=&#34;color:#75715e&#34;&gt;#目录限制&lt;/span&gt;
chroot_local_user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
chroot_list_enable&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
chroot_list_file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/vsftpd/chroot_list
allow_writeable_chroot&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;YES
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;nginx&#34;&gt;Nginx&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; (web服务器)偏向于 &lt;code&gt;静态资源&lt;/code&gt; ,处理高并发,可用 &lt;code&gt;反向代理&lt;/code&gt; 从而实现 &lt;code&gt;负载均衡&lt;/code&gt; (类似 &lt;code&gt;dns&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Apache&lt;/code&gt; 偏向于&lt;code&gt; PHP&lt;/code&gt; 的动态资源,bug少稳定&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;负载均衡&lt;/code&gt; 实现思路: &lt;code&gt;动静态资源分离&lt;/code&gt; ,主服务器使用 &lt;code&gt;Nginx&lt;/code&gt; ,动态资源则 &lt;code&gt;反向代理&lt;/code&gt; 到本机或集群的 &lt;code&gt;Apache&lt;/code&gt; 服务器(一台服务器安装两个 &lt;code&gt;Apache&lt;/code&gt; 服务可防止 &lt;code&gt;宕机&lt;/code&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;linux&lt;/code&gt; 有端口复用(套接字端口共享)功能( &lt;code&gt;nginx&lt;/code&gt; 开启 &lt;code&gt;reuseport&lt;/code&gt; );从内核层面做 &lt;code&gt;负载均衡&lt;/code&gt; ,避免 &lt;code&gt;锁竞争&lt;/code&gt; ( &lt;code&gt;惊群效应&lt;/code&gt; ): &lt;a href=&#34;https://www.zhihu.com/question/51618274&#34;&gt;https://www.zhihu.com/question/51618274&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 启用 &lt;code&gt;PHP&lt;/code&gt; 需要配置文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 等软件自启,需要参考官方的启动代码,添加到 &lt;code&gt;/etc/init.d/&lt;/code&gt; 下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 支持缓存&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 支持 &lt;code&gt;gzip&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Nginx实现负载均衡需要源码的同步, 使用 &lt;code&gt;rsync&lt;/code&gt; (或+ &lt;code&gt;sersync&lt;/code&gt; )实现集群服务器源码同步,源服务器执行的命令:&lt;br&gt;
&lt;code&gt;rsync -avH --progress --delete --exclude-from=/etc/exclude.txt --password-file=/etc/pw.txt /var/www/html/ username@192.168.43.175::module1&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中按顺序是:含有忽略同步列表的 &lt;code&gt;exclude.txt&lt;/code&gt; 文件,含有密码的 &lt;code&gt;pw.txt&lt;/code&gt; 文件,源服务器的同步目录, &lt;code&gt;username&lt;/code&gt; 用户名,ip地址,对应的模块
&lt;a href=&#34;https://blog.51cto.com/chenfei123/1707746&#34;&gt;https://blog.51cto.com/chenfei123/1707746&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;负载均衡&lt;/code&gt; 和 &lt;code&gt;前后端分离&lt;/code&gt; 配置 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#后端应反向给Apache代理&lt;/span&gt;
upstream proxys &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    server 127.0.0.1:8080 weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2;
    server 192.168.43.175:9090 weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3;
    ip_hash;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#前端应反向给Nginx代理&lt;/span&gt;
upstream proxys2 &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    server 127.0.0.1:8081 weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;3;
    server 192.168.43.175:9090 weight&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;2;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    listen 80;
    server_name www.centos.top centos.top;
    index index.html index.htm index.php;
    location / &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        proxy_pass http://proxys;
        proxy_http_version 1.1;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        add_header X-Slave $upstream_addr;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    location ~* &lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;css|js|png|jpg|jpeg|gif|txt|ico&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;$|^~/static &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       proxy_pass http://proxys2;
       proxy_set_header Host $http_host;
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       add_header X-Slave $upstream_addr;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#前端请求代理的配置&lt;/span&gt;
server &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    listen 8081;
    server_name www.centos.top centos.top;
    location / &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
       root /var/www/html/tp/public;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;缓存&lt;/code&gt; 和 &lt;code&gt;gzip&lt;/code&gt; 配置 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;http &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#75715e&#34;&gt;# 开启缓存&lt;/span&gt;
  proxy_connect_timeout 10;
  proxy_read_timeout 180;
  proxy_send_timeout 5;
  proxy_buffer_size 16k;
  proxy_buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; 32k;
  proxy_busy_buffers_size 96k;
  proxy_temp_file_write_size 96k;
  proxy_temp_path /tmp/temp_dir;
  proxy_cache_path /tmp/cache levels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1:2 keys_zone&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;cache_one:100m inactive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1d max_size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;10g;

  server
  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      listen &lt;span style=&#34;color:#ae81ff&#34;&gt;8081&lt;/span&gt; reuseport;
      server_name localhost;
      root /usr/share/nginx/tp/public/;

      location /
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


  server
  &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#75715e&#34;&gt;#开启gzip压缩资源&lt;/span&gt;
      gzip  on;
      gzip_vary on;
      gzip_proxied any;
      gzip_comp_level 6;
      gzip_buffers &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt; 8k;
      gzip_http_version 1.0;
      gzip_min_length 100;
      gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;

      &lt;span style=&#34;color:#75715e&#34;&gt;#资源文件缓存&lt;/span&gt;
      location ~* &lt;span style=&#34;color:#ae81ff&#34;&gt;\.&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;css|js|json|png|jpg|jpeg|gif|txt|ico|bmp|swf&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;$|^~/static/
      &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
          proxy_pass http://127.0.0.1:8081;
          proxy_redirect off;
          proxy_set_header Host $host;
          proxy_cache cache_one; &lt;span style=&#34;color:#75715e&#34;&gt;#cache_one在http设置层proxy_cache_path定义&lt;/span&gt;
          proxy_cache_valid &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;302&lt;/span&gt; 24h;
          proxy_cache_valid &lt;span style=&#34;color:#ae81ff&#34;&gt;301&lt;/span&gt; 30d;
          proxy_cache_valid any 5m;
          expires 90d;
          add_header wall  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hey!这文件进行了缓存和压缩哟!&amp;#34;&lt;/span&gt;;
      &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据库读写分离&#34;&gt;数据库读写分离&lt;/h2&gt;
&lt;p&gt;实现 &lt;code&gt;读写分离&lt;/code&gt; 分为两大步 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.jianshu.com/p/bfca0cdfb169&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;主从同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;读写分离;有两种方式 :
&lt;ul&gt;
&lt;li&gt;通过程序实现,如TP框架,性能最好;&lt;/li&gt;
&lt;li&gt;使用代理工具,如 :
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.jianshu.com/p/cb7ec06dae05&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mycat&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.jianshu.com/p/cadf337274c1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mysql-Proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mysql&lt;/code&gt; 之间可相互主从同步,避免 &lt;code&gt;单点&lt;/code&gt; ;当有主从数据库发生宕机,可使用 &lt;code&gt;percona-tooldit&lt;/code&gt; 工具解决恢复宕机后主从数据不同步的问题
&lt;a href=&#34;https://blog.51cto.com/moerjinrong/2352317&#34;&gt;https://blog.51cto.com/moerjinrong/2352317&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Mysql-Proxy&lt;/code&gt; 配置文件 &lt;code&gt;mysql-proxy.cnf&lt;/code&gt; 参考 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;mysql-proxy&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;#运行mysql-proxy用户&lt;/span&gt;
user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root
  &lt;span style=&#34;color:#75715e&#34;&gt;#主从mysql共有的用户&lt;/span&gt;
admin-username&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;proxy
  &lt;span style=&#34;color:#75715e&#34;&gt;#用户的密码&lt;/span&gt;
admin-password&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;root
  &lt;span style=&#34;color:#75715e&#34;&gt;#mysql-proxy运行ip(不能是127.0.0.1)和端口,不加端口,默认4040&lt;/span&gt;
proxy-address&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.1.1:4040
  &lt;span style=&#34;color:#75715e&#34;&gt;#slave从数据库Ip地址,默认端口3306&lt;/span&gt;
proxy-read-only-backend-addresses&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.1.2:3306
  &lt;span style=&#34;color:#75715e&#34;&gt;#master主数据库Ip地址,默认端口3306&lt;/span&gt;
proxy-backend-addresses&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;192.168.1.3:3306
  &lt;span style=&#34;color:#75715e&#34;&gt;#读写分离配置文件&lt;/span&gt;
proxy-lua-script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/lib64/mysql-proxy/lua/rw-splitting.lua
  &lt;span style=&#34;color:#75715e&#34;&gt;#管理脚本&lt;/span&gt;
admin-lua-script&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/lib64/mysql-proxy/lua/admin.lua
  &lt;span style=&#34;color:#75715e&#34;&gt;#日志&lt;/span&gt;
log-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/var/log/mysql-proxy.log
  &lt;span style=&#34;color:#75715e&#34;&gt;#日志级别,高到低有error|warning|info|message|debug&lt;/span&gt;
log-level&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;info
  &lt;span style=&#34;color:#75715e&#34;&gt;#以守护进程方式运行&lt;/span&gt;
daemon&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true
  &lt;span style=&#34;color:#75715e&#34;&gt;#崩溃时,尝试重启&lt;/span&gt;
keepalive&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;true

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;数据库&#34;&gt;数据库&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;mysql8&lt;/code&gt; 特性 :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;utf8mb4&lt;/code&gt; 储存表情符号&lt;/li&gt;
&lt;li&gt;默认 &lt;code&gt;InnoDB&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;降序索引&lt;/li&gt;
&lt;li&gt;JSON支持,直接操作json里的数据&lt;/li&gt;
&lt;li&gt;跳过锁等待&lt;/li&gt;
&lt;li&gt;用户角色管理权限&lt;/li&gt;
&lt;li&gt;&lt;code&gt;innodb_dedicated_server&lt;/code&gt; 自适应参数,自动配置 &lt;code&gt;mysql&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt; 只做缓存使用,避免进行 &lt;code&gt;持久性&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;队列&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;事务&lt;/code&gt; (总之一句话:专人专事)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;redis&lt;/code&gt; 和 &lt;code&gt;DB&lt;/code&gt; 一致性方案:只读 &lt;code&gt;redis&lt;/code&gt; ,当更新 &lt;code&gt;DB&lt;/code&gt; 之后把受影响的缓存全部干掉(注意:是干掉,不是更新),并且设定过期时间: &lt;a href=&#34;https://www.zhihu.com/question/319817091&#34;&gt;https://www.zhihu.com/question/319817091&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出现不能连接数据库的情况,除了防火墙,也可能是数据库没有设置对外添加权限&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;出现用户不能登录的情况,可能是默认登录了 &lt;code&gt;匿名用户&lt;/code&gt; , 要把用户名为 &lt;code&gt;&#39;&#39;&lt;/code&gt; 的用户清除&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;MyISAM&lt;/code&gt; 存储引擎偏向于大量查询和插入事件,表锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;InnoDB&lt;/code&gt; 存储引擎偏向于增删改事件,支持事务,支持索引行锁&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;索引才用 &lt;code&gt;for update&lt;/code&gt; 锁库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库类型&lt;br&gt;
&lt;a href=&#34;http://www.jb51.net/article/55853.htm&#34;&gt;http://www.jb51.net/article/55853.htm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;免密码登录&lt;br&gt;
&lt;code&gt;skip-grant-tables&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;数据库导出&lt;br&gt;
&lt;code&gt;mysqldump -uroot -p dbname &amp;gt; dbname.sql&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建数据库&lt;br&gt;
&lt;code&gt;CREATE DATABASE mydb CHARACTER SET utf8 COLLATE utf8_general_ci&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入数据&lt;br&gt;
&lt;code&gt;insert into $twb (id,name,tel) values(&#39;2&#39;,&#39;tab&#39;,null)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除数据&lt;br&gt;
&lt;code&gt;delete from twb where id = 1;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改数据&lt;br&gt;
&lt;code&gt;update twb set id=&#39;2&#39;,name=&#39;tab&#39; where id=1;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;插入字段&lt;br&gt;
&lt;code&gt;alter table twb add id varchar(32)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;删除字段&lt;br&gt;
&lt;code&gt;alter table twb drop id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;去掉name重复的&lt;br&gt;
&lt;code&gt;SELECT DISTINCT name FROM twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算个数&lt;br&gt;
&lt;code&gt;select count(*) from twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算总和&lt;br&gt;
&lt;code&gt;select sum(*) from twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算平均&lt;br&gt;
&lt;code&gt;select sum(*)/count(*) from twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算平均&lt;br&gt;
&lt;code&gt;select avg(name) from twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最小值&lt;br&gt;
&lt;code&gt;select min(name) from twb&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;双重查询,查询指定最小值对应的的所有字段&lt;br&gt;
&lt;code&gt;SELECT * FROM twb WHERE name=(SELECT max(name)FROM twb)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;根据指定字段分类&lt;br&gt;
&lt;code&gt;select * from twb group by name;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;表的联合查询&lt;br&gt;
&lt;code&gt;SELECT * FROM twb as a INNER JOIN twb2 as b on a.name=b.id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;左查询,就是当twb跟twb2的的值不相对应则以twb为主要,twb2多出的值则省略&lt;br&gt;
&lt;code&gt;SELECT * FROM twb as a left outer JOIN twb2 as b on a.name=b.id&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;php&#34;&gt;PHP&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;php7特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用绝对路径&lt;/li&gt;
&lt;li&gt;重定向后使用exit&lt;/li&gt;
&lt;li&gt;array_walk&lt;/li&gt;
&lt;li&gt;&amp;amp;引用节省内存&lt;/li&gt;
&lt;li&gt;+= array()&lt;/li&gt;
&lt;li&gt;isset($a{1})&lt;/li&gt;
&lt;li&gt;$_SERVER[&amp;lsquo;REQUEST_TIME&amp;rsquo;]&lt;/li&gt;
&lt;li&gt;strtr&lt;/li&gt;
&lt;li&gt;高亮PHP代码highlight_file&lt;/li&gt;
&lt;li&gt;2 &amp;lt;=&amp;gt; 1&lt;/li&gt;
&lt;li&gt;echo &amp;ldquo;\u{41}&amp;quot;,PHP_EOL;&lt;/li&gt;
&lt;li&gt;use some\namespace{ClassA, ClassB, ClassC as C};&lt;/li&gt;
&lt;li&gt;function arraysSum(int &amp;hellip;$ints): string&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; $b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;;}
 $bb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; (){&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;$b;};
 &lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; $bb&lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;call&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;bug&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;[] &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; []; &lt;span style=&#34;color:#75715e&#34;&gt;//为false
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

$a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.3&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;0.1&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;json_encode&lt;/span&gt;($a);
&lt;span style=&#34;color:#ae81ff&#34;&gt;0.55&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;55&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//为false
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fastcgi&lt;/code&gt;就是执行 &lt;code&gt;cgi协议&lt;/code&gt; 的,用于定义 &lt;code&gt;Nginx&lt;/code&gt; 调用 &lt;code&gt;php&lt;/code&gt; 时的数据格式,并减少对 &lt;code&gt;php.ini&lt;/code&gt; 的读取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;php-fpm&lt;/code&gt;就是 &lt;code&gt;Nginx&lt;/code&gt; 服务调用的程序,管理 &lt;code&gt;fastcgi&lt;/code&gt; 进程&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;php-cli&lt;/code&gt;就是 &lt;code&gt;shell&lt;/code&gt; 命令行调用的程序&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;|||nochange|||&lt;/code&gt;表示 &lt;code&gt;input&lt;/code&gt; 输入框为空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;htmlentities&lt;/code&gt; / &lt;code&gt;htmlspecialchars&lt;/code&gt; 可以过滤成 &lt;code&gt;html格式&lt;/code&gt; , 防止 &lt;code&gt;XSS&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;addslashes&lt;/code&gt; 防止 &lt;code&gt;sql注入&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;explain&lt;/code&gt; 用于测试 &lt;code&gt;sql语句&lt;/code&gt; 性能&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引用字符串方式: &lt;code&gt;Nowdoc&lt;/code&gt; / &lt;code&gt;Heredoc&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;中文简体格式
&lt;code&gt;header(&#39;Content-type:text/html;charset=utf-8&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决textarea标签回车编码问题
&lt;code&gt;str_replace(&amp;quot; &amp;quot;,&amp;quot; &amp;quot;,str_replace(&amp;quot;\n&amp;quot;,&amp;quot;&amp;lt;br/&amp;gt;&amp;quot;,$data))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单入口写上: &lt;code&gt;session_start()&lt;/code&gt; 才可以使用 &lt;code&gt;$_SESSION&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;跳转到#页面
&lt;code&gt;header(&#39;Location:#&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;php格式插入html遍历&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;?&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;php&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;foreach&lt;/span&gt; ($twb &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; $x &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; $y){ &lt;span style=&#34;color:#75715e&#34;&gt;?&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;    &amp;lt;li&amp;gt;&amp;lt;?php echo $y[&amp;#39;z&amp;#39;] ?&amp;gt;&amp;lt;/li&amp;gt;
&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;lt;?php } ?&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;解决ajax夸域&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Access-Control-Allow-Origin:twb.com&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;//可以用*允许所有
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Content-Type:application/json; charset=utf-8&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Access-Control-Allow-Methods: GET, POST, DELETE&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内容返回&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_start&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//开启echo缓存区
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;//输出
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ob_end_flush&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;//输出全部内容到浏览器,包括echo
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rand(x,y)&lt;/td&gt;
&lt;td&gt;在xy之间取随机数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;implode(&amp;lsquo;xx&amp;rsquo;,&#39;$twb&#39;)&lt;/td&gt;
&lt;td&gt;用xx隔开twb中每个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;explode()&lt;/td&gt;
&lt;td&gt;把字符串打散为数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arry_merge()&lt;/td&gt;
&lt;td&gt;打散混乱数组重新排列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in_array($xy,$twb)&lt;/td&gt;
&lt;td&gt;数组$twb是否含$xy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;mb_substr($twb,x,y,&amp;lsquo;utf-8&amp;rsquo;)&lt;/td&gt;
&lt;td&gt;截取字符串,从第x个字符开始截取y个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strtotime()&lt;/td&gt;
&lt;td&gt;将任何英文文本的日期或时间描述解析为 Unix 时间戳.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;字符串类型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addcslashes()&lt;/td&gt;
&lt;td&gt;返回在指定的字符前添加反斜杠的字符串.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addslashes()&lt;/td&gt;
&lt;td&gt;返回在预定义的字符前添加反斜杠的字符串.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chop()&lt;/td&gt;
&lt;td&gt;删除字符串右侧的空白字符或其他字符..&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chunk_split()&lt;/td&gt;
&lt;td&gt;把字符串分割为一系列更小的部分.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;html_entity_decode()&lt;/td&gt;
&lt;td&gt;把 HTML 实体转换为字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;htmlentities()&lt;/td&gt;
&lt;td&gt;把字符转换为 HTML 实体.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;htmlspecialchars_decode()&lt;/td&gt;
&lt;td&gt;把一些预定义的 HTML 实体转换为字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;htmlspecialchars()&lt;/td&gt;
&lt;td&gt;把一些预定义的字符转换为 HTML 实体.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;join()&lt;/td&gt;
&lt;td&gt;implode() 的别名.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ltrim()&lt;/td&gt;
&lt;td&gt;移除字符串左侧的空白字符或其他字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;md5()&lt;/td&gt;
&lt;td&gt;计算字符串的 MD5 散列.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;number_format()&lt;/td&gt;
&lt;td&gt;以千位分组来格式化数字.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;parse_str()&lt;/td&gt;
&lt;td&gt;把查询字符串解析到变量中.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rtrim()&lt;/td&gt;
&lt;td&gt;移除字符串右侧的空白字符或其他字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sha1()&lt;/td&gt;
&lt;td&gt;计算字符串的 SHA-1 散列.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;similar_text()&lt;/td&gt;
&lt;td&gt;计算两个字符串的相似度.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sprintf()&lt;/td&gt;
&lt;td&gt;把格式化的字符串写入变量中.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str_pad()&lt;/td&gt;
&lt;td&gt;把字符串填充为新的长度.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str_repeat()&lt;/td&gt;
&lt;td&gt;把字符串重复指定的次数.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str_replace()&lt;/td&gt;
&lt;td&gt;替换字符串中的一些字符(对大小写敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str_shuffle()&lt;/td&gt;
&lt;td&gt;随机地打乱字符串中的所有字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str_split()&lt;/td&gt;
&lt;td&gt;把字符串分割到数组中.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strip_tags()&lt;/td&gt;
&lt;td&gt;剥去字符串中的 HTML 和 PHP 标签.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stripcslashes()&lt;/td&gt;
&lt;td&gt;删除由 addcslashes() 函数添加的反斜杠.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stripslashes()&lt;/td&gt;
&lt;td&gt;删除由 addslashes() 函数添加的反斜杠.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stripos()&lt;/td&gt;
&lt;td&gt;返回字符串第一次出现的位置(大小写不敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strpos()&lt;/td&gt;
&lt;td&gt;返回字符串第一次出现的位置(大小写敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stristr()&lt;/td&gt;
&lt;td&gt;查找字符串第一次出现的位置(大小写不敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strrchr()&lt;/td&gt;
&lt;td&gt;查找字符串最后一次出现.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strripos()&lt;/td&gt;
&lt;td&gt;查找字符串最后一次出现的位置(大小写不敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strrpos()&lt;/td&gt;
&lt;td&gt;查找字符串最后一次出现的位置(大小写敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strstr()&lt;/td&gt;
&lt;td&gt;查找字符串第一次出现(大小写敏感)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strchr()&lt;/td&gt;
&lt;td&gt;查找字符串第一次出现,strstr() 的别名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strrev()&lt;/td&gt;
&lt;td&gt;反转字符串.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strlen()&lt;/td&gt;
&lt;td&gt;返回字符串的长度.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strtolower()&lt;/td&gt;
&lt;td&gt;把字符串转换为小写字母.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strtoupper()&lt;/td&gt;
&lt;td&gt;把字符串转换为大写字母.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strtr()&lt;/td&gt;
&lt;td&gt;转换字符串中特定的字符.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substr()&lt;/td&gt;
&lt;td&gt;返回字符串的一部分.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substr_count()&lt;/td&gt;
&lt;td&gt;计算子串在字符串中出现的次数.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;substr_replace()&lt;/td&gt;
&lt;td&gt;把字符串的一部分替换为另一个字符串.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucfirst()&lt;/td&gt;
&lt;td&gt;把字符串中的首字符转换为大写.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ucwords()&lt;/td&gt;
&lt;td&gt;把字符串中每个单词的首字符转换为大写.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数组函数&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_change_key_case()&lt;/td&gt;
&lt;td&gt;把数组中所有键更改为小写或大写.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_chunk()&lt;/td&gt;
&lt;td&gt;把一个数组分割为新的数组块.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_column()&lt;/td&gt;
&lt;td&gt;返回输入数组中某个单一列的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_combine()&lt;/td&gt;
&lt;td&gt;通过合并两个数组来创建一个新数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_count_values()&lt;/td&gt;
&lt;td&gt;用于统计数组中所有值出现的次数.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_diff()&lt;/td&gt;
&lt;td&gt;比较数组,返回差集(只比较键值)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_fill()&lt;/td&gt;
&lt;td&gt;用给定的键值填充数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_fill_keys()&lt;/td&gt;
&lt;td&gt;用指定键名的给定键值填充数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_filter()&lt;/td&gt;
&lt;td&gt;用回调函数过滤数组中的元素.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_flip()&lt;/td&gt;
&lt;td&gt;交换数组中的键和值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_intersect()&lt;/td&gt;
&lt;td&gt;比较数组,返回交集(只比较键值)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_key_exists()&lt;/td&gt;
&lt;td&gt;检查指定的键名是否存在于数组中.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_keys()&lt;/td&gt;
&lt;td&gt;返回数组中所有的键名.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_map()&lt;/td&gt;
&lt;td&gt;把数组中的每个值发送到用户自定义函数,返回新的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_merge()&lt;/td&gt;
&lt;td&gt;把一个或多个数组合并为一个数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_multisort()&lt;/td&gt;
&lt;td&gt;对多个数组或多维数组进行排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_pad()&lt;/td&gt;
&lt;td&gt;用值将数组填补到指定长度.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_pop()&lt;/td&gt;
&lt;td&gt;删除数组的最后一个元素(出栈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_push()&lt;/td&gt;
&lt;td&gt;将一个或多个元素插入数组的末尾(入栈)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_replace()&lt;/td&gt;
&lt;td&gt;使用后面数组的值替换第一个数组的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_reverse()&lt;/td&gt;
&lt;td&gt;以相反的顺序返回数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_search()&lt;/td&gt;
&lt;td&gt;搜索数组中给定的值并返回键名.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_shift()&lt;/td&gt;
&lt;td&gt;删除数组中首个元素,并返回被删除元素的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_slice()&lt;/td&gt;
&lt;td&gt;返回数组中被选定的部分.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_splice()&lt;/td&gt;
&lt;td&gt;删除并替换数组中指定的元素.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_sum()&lt;/td&gt;
&lt;td&gt;返回数组中值的和.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_udiff()&lt;/td&gt;
&lt;td&gt;比较数组,返回差集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_unique()&lt;/td&gt;
&lt;td&gt;删除数组中的重复值.(集合的概念)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_unshift()&lt;/td&gt;
&lt;td&gt;在数组开头插入一个或多个元素.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;array_values()&lt;/td&gt;
&lt;td&gt;返回数组中所有的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;arsort()&lt;/td&gt;
&lt;td&gt;对关联数组按照键值进行降序排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;asort()&lt;/td&gt;
&lt;td&gt;对关联数组按照键值进行升序排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compact()&lt;/td&gt;
&lt;td&gt;创建包含变量名和它们的值的数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;count()&lt;/td&gt;
&lt;td&gt;返回数组中元素的数目.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;current()&lt;/td&gt;
&lt;td&gt;返回数组中的当前元素.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;extract()&lt;/td&gt;
&lt;td&gt;从数组中将变量导入到当前的符号表.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;in_array()&lt;/td&gt;
&lt;td&gt;检查数组中是否存在指定的值.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;key()&lt;/td&gt;
&lt;td&gt;从关联数组中取得键名.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;krsort()&lt;/td&gt;
&lt;td&gt;对数组按照键名逆向排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ksort()&lt;/td&gt;
&lt;td&gt;对数组按照键名排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list()&lt;/td&gt;
&lt;td&gt;把数组中的值赋给一些变量.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range()&lt;/td&gt;
&lt;td&gt;创建包含指定范围单元的数组.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rsort()&lt;/td&gt;
&lt;td&gt;对数组逆向排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shuffle()&lt;/td&gt;
&lt;td&gt;将数组打乱.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sizeof()&lt;/td&gt;
&lt;td&gt;count() 的别名.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort()&lt;/td&gt;
&lt;td&gt;对数组排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uasort()&lt;/td&gt;
&lt;td&gt;使用用户自定义的比较函数对数组中的键值进行排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;uksort()&lt;/td&gt;
&lt;td&gt;使用用户自定义的比较函数对数组中的键名进行排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usort()&lt;/td&gt;
&lt;td&gt;使用用户自定义的比较函数对数组进行排序.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;前端&#34;&gt;前端&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以设置类似&lt;code&gt;cookie&lt;/code&gt; , 它可永久保存&lt;br&gt;
&lt;code&gt;localStorage.setItem(name, val)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;死链&lt;br&gt;
&lt;code&gt;&amp;lt;a href=&amp;quot;javascript:void(0);&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;CSS加载JS样式&lt;br&gt;
&lt;code&gt;behavior:url()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择div内第二个li,类似js&lt;br&gt;
&lt;code&gt;div li:first-child+li{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;选择form下类型为text的input标签&lt;br&gt;
&lt;code&gt;form input[type=&amp;quot;text&amp;quot;]{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居中CSS背景图片&lt;br&gt;
&lt;code&gt;background-position:center&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居中HTML图片&lt;br&gt;
&lt;code&gt;&amp;lt;div align=&amp;quot;center&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;居中div&lt;br&gt;
&lt;code&gt;{top:0;left:0;bottom:0;right:0;margin:auto}/margin:0 auto;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;单行文字水平/垂直居中&lt;br&gt;
&lt;code&gt;text-decoration:center;/line-height:10px;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行文字垂直居中:div1&amp;gt;div2&amp;gt;p&lt;br&gt;
&lt;code&gt;div1{display:table;/*转换成表格*/} div2{display:table-cell;vertical-align:middle;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;li中间向两边分布&lt;br&gt;
&lt;code&gt;ul{text-align:center}li{display: inline-block;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;li水平分布,ul宽度平均分割给li&lt;br&gt;
&lt;code&gt;ul{display:flex}li{flex:1;text-align:center}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;li水平分布,类似最左和最右浮动两边的效果&lt;br&gt;
&lt;code&gt;div{overflow:hidden;width:11px} div ul{width:12px}   li{width:5px;margin_right:1px}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;轮播图不能有滚动条&lt;br&gt;
&lt;code&gt;在ul父级加overflow:hidden;width:100%;position: relative;//position用于ul居中&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;清除浮动,class是twb就可以清除浮动&lt;br&gt;
&lt;code&gt;.twb:after{content:&amp;quot;&amp;quot;; display:block; height:0; visibility:hidden; clear:both;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;鼠标悬浮图片放大&lt;br&gt;
&lt;code&gt;.div:hover img{transform: scale(1.03);transition: all 1s ease 0s;-webkit-transform: scale(1.03);-webkit-transform: all 1s ease 0s;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;iframe高度
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;inner&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;$header&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.header&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#75715e&#34;&gt;//如果页面有头部,则要减去
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;innerWidth&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; window)) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;client&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;documentElement&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;body&lt;/span&gt;;
}
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Height&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$header&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;outerHeight&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;.iframe&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;({
    &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;height&lt;/span&gt;,
    &lt;span style=&#34;color:#a6e22e&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;100%&amp;#34;&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&amp;hellip; 以上&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>制作多分区启动盘</title>
      <link>https://twbworld.github.io/post/2020/09/28/multi_partition_startup_disk/</link>
      <pubDate>Mon, 28 Sep 2020 22:20:13 +0800</pubDate>
      <guid>https://twbworld.github.io/post/2020/09/28/multi_partition_startup_disk/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;有些小伙伴手里有上百G甚至上T移动硬盘&lt;br&gt;
平时制作启动硬盘,除了启动分区,都是只剩一个分区提供自己使用的&lt;br&gt;
那么问题来了:怎么保留启动盘的功能,又能把硬盘分成多个分区呢?&lt;br&gt;
搜索引擎也很少有相关文章&lt;br&gt;
那么,今天就带大家制作一个多分区启动盘&lt;br&gt;
作者尝试了无数次才成功的,呕心沥血之作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所使用到的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;硬盘(本文章使用U盘展示,建议硬盘,毕竟日常生活中的十几或几十G的U盘,也没必要进行分区了)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;微PE(作者使用的版本是&lt;code&gt;2.1&lt;/code&gt;;也可以使用&amp;quot;大白菜&amp;quot;或&amp;quot;老毛桃&amp;quot;,有广告植入,不建议)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;微PE下载(不需要安装): &lt;a href=&#34;http://www.wepe.com.cn/download.html&#34;&gt;http://www.wepe.com.cn/download.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UltraISO(作者使用的版本是&lt;code&gt;9.7&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;UltraISO下载: &lt;a href=&#34;https://cn.ultraiso.net/xiazai.html&#34;&gt;https://cn.ultraiso.net/xiazai.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;DiskGenius(作者使用的版本是&lt;code&gt;5.1&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;DiskGenius下载: &lt;a href=&#34;https://www.diskgenius.cn/download.php&#34;&gt;https://www.diskgenius.cn/download.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1获取微pe的系统iso&#34;&gt;1#获取&lt;code&gt;微PE&lt;/code&gt;的系统ISO&lt;/h2&gt;
&lt;p&gt;(1) 双击打开下载好的 &lt;code&gt;微PE&lt;/code&gt; 安装包,看到以下界面,单击右下角的光盘图标
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929001640.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 接下来,要把 &lt;code&gt;微PE&lt;/code&gt; 自带的ISO镜像保存到电脑,选择保存的位置, &lt;code&gt;光盘卷标&lt;/code&gt; 也就是盘符的名称,也建议改成喜欢的名称,如&amp;quot;pe盘&amp;quot;,最后点击 &lt;code&gt;立即生成ISO&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003752.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2写入iso到硬盘&#34;&gt;2#写入ISO到硬盘&lt;/h2&gt;
&lt;p&gt;(1) 插入硬盘,准备格式化&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PS: 备份数据!!!!!备份数据!!!!!备份数据!!!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;(2) 打开安装好的 &lt;code&gt;UltraISO&lt;/code&gt; ,菜单栏依次点击 &lt;code&gt;文件-&amp;gt;打开&lt;/code&gt; ; 选择上一步保存好的ISO文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003225.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 可以看到,左侧栏出现的ISO文件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003656.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(4) 接着,菜单栏依次点击 &lt;code&gt;启动-&amp;gt;写入硬盘映像&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929003959.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(5) 出现一个弹窗, &lt;code&gt;硬盘驱动器&lt;/code&gt; 选择正确的硬盘,首先,需要把硬盘格式化,点击&lt;code&gt;格式化&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929004608.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(6) 最后,正式把ISO文件写入硬盘,点击 &lt;code&gt;写入&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929004749.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3备份启动分区&#34;&gt;3#备份启动分区&lt;/h2&gt;
&lt;p&gt;(1) 打开安装好的 &lt;code&gt;DiskGenius&lt;/code&gt; ,在左侧栏找到对应的硬盘,单击选中上一步生成的盘
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010004.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 菜单栏依次点击 &lt;code&gt;工具-&amp;gt;备份分区到镜像文件&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010254.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 出现一个弹窗, 点击 &lt;code&gt;选择文件路径&lt;/code&gt; ,选择一个目录,输入自定义的&lt;code&gt;pmf&lt;/code&gt;文件的名称,点击 &lt;code&gt;打开&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929010619.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(4) 点击 &lt;code&gt;开始&lt;/code&gt; ,成功后,会生成一个&lt;code&gt;.pmf&lt;/code&gt;后缀文件,这个文件就是你的启动盘备份文件
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929011108.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4硬盘分区&#34;&gt;4#硬盘分区&lt;/h2&gt;
&lt;p&gt;(1) &lt;code&gt;DiskGenius&lt;/code&gt; 左侧栏选中对应的硬盘,点击 &lt;code&gt;快速分区&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929011443.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 可以看到一个弹窗;这一步是成功的关键,要严格按照以下的规定(作者经过无数次的尝试,得出来的结论) :&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;分区表类型&lt;/code&gt; 一定为 &lt;code&gt;MBR&lt;/code&gt; ; 不要问为什么,我也不知道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;分区数目&lt;/code&gt; 最多为3个; 不要问为什么,我也不知道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;高级设置&lt;/code&gt; 以第一个作为启动分区,所以第一个分区选择 &lt;code&gt;FAT32&lt;/code&gt;, 其余为 &lt;code&gt;NTFS&lt;/code&gt; ; 不要问为什么,我也不知道&lt;/li&gt;
&lt;li&gt;&lt;code&gt;高级设置&lt;/code&gt; 把所有的 &lt;code&gt;主分区&lt;/code&gt; 勾上; 不要问为什么,我也不知道&lt;/li&gt;
&lt;li&gt;至于各分区的容量,卷标名称等,请自定义
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013018.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;(3) 分区后,可以看到作为启动分区已经显示 &lt;code&gt;活动&lt;/code&gt; 了
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013528.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5恢复启动分区&#34;&gt;5#恢复启动分区&lt;/h2&gt;
&lt;p&gt;(1) &lt;code&gt;DiskGenius&lt;/code&gt; ,在左侧栏找到对应的硬盘,单击选中上一步作为启动的分区
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929013709.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 菜单栏依次点击 &lt;code&gt;工具-&amp;gt;从镜像文件还原分区&lt;/code&gt;
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929014447.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 出现弹窗, 点击 &lt;code&gt;选择文件&lt;/code&gt; , 选择在 &lt;code&gt;第三步&lt;/code&gt; 生成的 &lt;code&gt;pmf&lt;/code&gt; 文件
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929014834.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(4) 到此为止,成功制作了一个 多分区启动硬盘&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是,这样制作的多分区启动硬盘, &lt;code&gt;BIOS&lt;/code&gt; 只能使用 &lt;code&gt;Legacy&lt;/code&gt; 启动模式来启动硬盘(新型的 &lt;code&gt;UEFI&lt;/code&gt; 无法启动PE), 如下图例子(华硕的BIOS)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200929015346.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;hellip; 以上&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSH隧道连接局域网下的虚拟机</title>
      <link>https://twbworld.github.io/post/2020/07/12/use_tunnel_to_connect_to_virtual_machines_in_the_lan/</link>
      <pubDate>Sun, 12 Jul 2020 18:18:13 +0800</pubDate>
      <guid>https://twbworld.github.io/post/2020/07/12/use_tunnel_to_connect_to_virtual_machines_in_the_lan/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;连接局域网下的虚拟机,在网上找到的做法通常是:在VMware配置端口转发&lt;br&gt;
最近了解隧道技术,突发奇想:能不能使用SSH隧道连接局域网下的虚拟机呢?&lt;br&gt;
在网上找到的相关资料不多,经过自己摸索,终于实现了&lt;br&gt;
使用SSH隧道连接局域网下的虚拟机,主要有两种方式可以实现&lt;br&gt;
1: 本地端口转发; 2: 动态端口转发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先,假设网络图如下,A和B在同一局域网下,我们的目的是: 实现 A 连接到 C 的SSH服务
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712191744.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;方法一--本地端口转发&#34;&gt;方法一 : 本地端口转发&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大体思路: 在A下创建 &lt;code&gt;A --&amp;gt; C&lt;/code&gt; 的SSH隧道,就可以访问A下的指定端口,通过隧道转发,访问到C的22端口了&lt;br&gt;
具体实现如下 :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1b安装ssh服务&#34;&gt;1#B安装SSH服务&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文章 &lt;a href=&#34;https://www.cnblogs.com/sparkdev/p/10166061.html&#34;&gt;https://www.cnblogs.com/sparkdev/p/10166061.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这是非常关键的一步(作为小白,我刚开始就异想天开,直接就想通过A连接到C,直到多次尝试失败并且想通了)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;我的电脑 B 的系统是&lt;code&gt;windows10 1909&lt;/code&gt;,自带了&lt;code&gt;OpenSSH Server&lt;/code&gt;软件;如果版本是&lt;code&gt;wondows10 1809&lt;/code&gt;以下或&lt;code&gt;wondows7&lt;/code&gt;的同学,可以网上搜索windows怎么安装&lt;code&gt;openSSH&lt;/code&gt;服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(1) Win10打开 设置(&lt;code&gt;Win + I&lt;/code&gt;) ==&amp;gt; 应用 ==&amp;gt; 应用和功能 ==&amp;gt; 可选功能 =&amp;gt; 添加功能 =&amp;gt; OpenSSH服务器(点击安装)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712195856.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(2) 打开 任务管理器(&lt;code&gt;Shift + Ctrl + Esc&lt;/code&gt;) ==&amp;gt; 任务 ==&amp;gt; 左下角点击&amp;quot;打开服务&amp;quot;; 找到两个OpenSSH服务,右键开启&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712200951.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;(3) 打开 控制面板 ==&amp;gt; 系统和安全  ==&amp;gt; &lt;code&gt;Windows Defender&lt;/code&gt; 防火墙 ==&amp;gt; 启用或关闭&lt;code&gt;windows defender&lt;/code&gt;防火墙;选择关闭防火墙; (或者在入站规则添加允许22端口)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712202126.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;到此, B已经配置完成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2a建立-a----c-的隧道&#34;&gt;2#A建立 &lt;code&gt;A --&amp;gt; C&lt;/code&gt; 的隧道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本人使用的是&lt;code&gt;PuTTY&lt;/code&gt;的工具, 使用其他工具或&lt;code&gt;PowerShell&lt;/code&gt;也是可以的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首先保证 C 关闭&lt;code&gt;iptables&lt;/code&gt;或&lt;code&gt;nftables&lt;/code&gt;防火墙 (或配置允许22端口)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&amp;quot;中间人&amp;quot; B ; 在 A 电脑上使用&lt;code&gt;PuTTY&lt;/code&gt;建立起与 C 的SSH隧道 (本地端口转发)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 A 上配置(基于文章开头假设的网络图) :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712204730.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击open,会出现登录,注意:这里登录的是 B 电脑,也就是要输入B的windows的用户名和密码;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到这里,你已经建立起 &lt;code&gt;A --&amp;gt; C&lt;/code&gt; 的隧道了, 注意: 请不要关闭&lt;code&gt;PuTTY&lt;/code&gt;窗口, 否则隧道会被关闭&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;PuTTY&lt;/code&gt;如上设置,相当于使用命令 &lt;code&gt;ssh -L 127.0.0.1:6666:192.168.2.2:22 192.168.1.107&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3a通过隧道连接-c-电脑&#34;&gt;3#A通过隧道连接 C 电脑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;终于到最后一步了, 很简单, 在 A 电脑开启新的&lt;code&gt;PuTTY&lt;/code&gt;窗口, 请求 A 本地的 刚才自定义的 6666端口就可以啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712210036.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;恭喜你, 成功通过SSH隧道连接到 C ;因为隧道是 &lt;code&gt;A --&amp;gt; C&lt;/code&gt; 的且加密的, B 不会监听到流量&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法二--动态端口转发&#34;&gt;方法二 : 动态端口转发&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;大体思路: 在A下创建 &lt;code&gt;A --&amp;gt; B&lt;/code&gt; 的SSH隧道,把 B 作为代理(Proxy), 就可以实现 : A 使用&lt;code&gt;SOCKS5&lt;/code&gt;协议通过 B 来访问到 C 的22端口&lt;br&gt;
具体实现如下 :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1b安装ssh服务-1&#34;&gt;1#B安装SSH服务&lt;/h3&gt;
&lt;p&gt;(在 &lt;code&gt;方法一&lt;/code&gt; 中有具体实现, 略)&lt;/p&gt;
&lt;h3 id=&#34;2a建立-a----b-的隧道&#34;&gt;2#A建立 &lt;code&gt;A --&amp;gt; B&lt;/code&gt; 的隧道&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;本人使用的是&lt;code&gt;PuTTY&lt;/code&gt;的工具, 使用其他工具或PowerShell也是可以的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在 A 电脑上使用&lt;code&gt;PuTTY&lt;/code&gt;建立起与 B 的SSH隧道 (动态端口转发)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 A 上配置(基于文章开头假设的网络图) :&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712215702.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;点击open,会出现登录,注意:这里登录的是 B 电脑,也就是要输入B的windows的用户名和密码;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到这里,你已经建立起 &lt;code&gt;A --&amp;gt; B&lt;/code&gt; 的隧道了, 注意: 请不要关闭&lt;code&gt;PuTTY&lt;/code&gt;窗口, 否则隧道会被关闭&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;PuTTY&lt;/code&gt;如上设置,相当于使用命令 &lt;code&gt;ssh -D 127.0.0.1:6666 192.168.1.107&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3a通过代理连接-c-电脑&#34;&gt;3#A通过代理连接 C 电脑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;终于到最后一步了, 很简单, 在 A 电脑上开启新的&lt;code&gt;PuTTY&lt;/code&gt;窗口, 设置 A 本地的 刚才自定义的 6666端口为代理端口, 请求 C 就可以啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712214629.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;方法三--vmware配置端口转发&#34;&gt;方法三 : VMware配置端口转发&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个比较普遍的做法, 在网上也容易找到相关文章&lt;br&gt;
大体思路: 在&lt;code&gt;VMware&lt;/code&gt;上配置 监听父windows的端口X,把A端口转发到VMware下的虚拟机端口Y, 局域网的电脑只有访问windows的端口X就相当于访问虚拟机的端口Y啦, 是不是很容易&lt;br&gt;
具体实现如下 :&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;1b配置vmware&#34;&gt;1#B配置VMware&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712220946.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2b配置防火墙&#34;&gt;2#B配置防火墙&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开 控制面板 ==&amp;gt; 系统和安全  ==&amp;gt; &lt;code&gt;Windows Defender&lt;/code&gt; 防火墙 ==&amp;gt; 启用或关闭&lt;code&gt;windows defender&lt;/code&gt;防火墙;选择关闭防火墙; (或者在 入站规则 添加允许 上一步自定义的6666端口)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712202126.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;3a通过-b-连接-c-电脑&#34;&gt;3#A通过 B 连接 C 电脑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;终于到最后一步了, 很简单, 在 A 电脑直接用&lt;code&gt;PuTTY&lt;/code&gt;请求 B 的 6666端口, 就可以登录 C 啦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200712222247.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;hellip; 以上&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VMware自定义虚拟网卡(添加网络)</title>
      <link>https://twbworld.github.io/post/2020/05/31/vmware_customize_network/</link>
      <pubDate>Sun, 31 May 2020 14:07:40 +0800</pubDate>
      <guid>https://twbworld.github.io/post/2020/05/31/vmware_customize_network/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;我的VMware版本: 15.5.2&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;一-创建虚拟网络&#34;&gt;一 创建虚拟网络&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;VMware菜单==&amp;gt;编辑==&amp;gt;虚拟网络编辑器&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531154440.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;(这一步可略过)移除所有默认的&amp;quot;网络&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531154849.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;点击&amp;quot;添加网络&amp;quot;, 选择&amp;quot;VMnet8&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531155509.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;上方列表点击选择刚才添加的网络&amp;quot;VMnet8&amp;quot;;&lt;/li&gt;
&lt;li&gt;选择NAT模式;&lt;/li&gt;
&lt;li&gt;设置子网IP;一般设置&amp;quot;192.168.xxx.0&amp;quot;,我这设置为&amp;quot;192.168.2.0&amp;quot;&lt;/li&gt;
&lt;li&gt;设置子网掩码&amp;quot;255.255.255.0&amp;quot;,一般子网掩码固定;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531155727.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;点击&amp;quot;NAT设置&amp;quot;;设置&amp;quot;网关IP&amp;quot;, 一般为&amp;quot;192.168.xxx.1&amp;quot;, 所以我这设置网关为&amp;quot;192.168.2.1&amp;quot;;点击&amp;quot;确定&amp;quot; (还有端口转发,一般用于局域网PC链接VMware里的虚拟机所使用)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531160526.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;点击&amp;quot;DHCP设置&amp;quot;; 这里可以设置网关分配给VMware下的虚拟机的起始IP和结束IP; 因为网关已经占用了192.168.xxx.1,所以这自定义起始IP可以为&amp;quot;192.168.xxx.2&amp;quot;, 结束IP为&amp;quot;192.168.xxx.254&amp;quot;, 点击&amp;quot;确认&amp;quot;, 回到上一层, 再次点击&amp;quot;确认&amp;quot;;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531161155.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;二-使用虚拟网络&#34;&gt;二 使用虚拟网络&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;查看 控制面板==&amp;gt;网络和Internet==&amp;gt;网络和共享中心==&amp;gt;更改适配器设置; 可看到, 虚拟网卡已创建成功;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531162022.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;选择新添加的网卡;右键选择&amp;quot;属性&amp;quot;;双击&amp;quot;协议版本4&amp;quot;;设置IP;我这里设置了100;也可以设大一点,点击&amp;quot;确认&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;如果缺少这一步,可能会出现宿主机SSH链接不上虚拟机的情况(或者出现需要长时间才连通,连上后,短时间内又断开的情况);原因可能是因为网卡的IP占用了网关IP&amp;quot;192.168.xxx.1&amp;quot;, 导致虚拟机的数据到不了在外一层的宿主机&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531163409.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;虚拟网卡已创建成功,最后还要选择使用新创建的网卡;选择你要使用刚才新建网卡的虚拟机, 右键选择&amp;quot;设置&amp;quot;, &amp;ldquo;硬件&amp;rdquo;==&amp;gt;&amp;ldquo;网络适配器&amp;rdquo; ,右侧点击&amp;quot;自定义:特定虚拟网络&amp;quot;, 选择新建的&amp;quot;VMnet8(NAT 模式)&amp;quot;, 点击&amp;quot;确定&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;这一步非常关键,我曾经缺少这一步,导致虚拟机连不上网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531165342.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531165906.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;到此,虚拟机应该就可以上网了,如果不行;请重启虚拟机的network; 或者VMware最右下角的&amp;quot;网络适配器&amp;quot;重新连接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531171518.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;同时还可以在虚拟机里设置固定的IP,IP地址要根据&amp;quot;起始IP&amp;quot;和结束&amp;quot;IP&amp;quot;设置; 例如,我在Centos8系统上, 设置了IP:&amp;ldquo;192.168.2.2&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200531171957.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Centos源码安装Mysql8笔记</title>
      <link>https://twbworld.github.io/post/2020/05/30/install_mysql8_note/</link>
      <pubDate>Sat, 30 May 2020 20:47:16 +0800</pubDate>
      <guid>https://twbworld.github.io/post/2020/05/30/install_mysql8_note/</guid>
      <description>&lt;h2 id=&#34;笔记一-安装时发生警告&#34;&gt;笔记一: 安装时,发生警告&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
--character-set-server: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt; is currently an alias &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; the character set UTF8MB3, but will be an alias &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; UTF8MB4 in a future release. Please consider using UTF8MB4 in order to be unambiguous
--collation-server: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf8_general_ci&amp;#39;&lt;/span&gt; is a collation of the deprecated character set UTF8MB3. Please consider using UTF8MB4 with an appropriate collation instead

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;原因 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;安装mysql8的时候,配置了官方不推荐的&amp;quot;utf8&amp;quot;,其实&amp;quot;utf8&amp;quot;就是mysql中&amp;quot;UTF8MB3&amp;quot;的别名,然而又同时存在着&amp;quot;UTF8MB4&amp;quot;,所有,建议改为&amp;quot;UTF8MB4&amp;quot;;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决 :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;把cmake的参数 &lt;code&gt;-DDEFAULT_CHARSET=utf8&lt;/code&gt; 改为 &lt;code&gt;-DDEFAULT_CHARSET=utf8mb4 &lt;/code&gt; , &lt;code&gt;-DDEFAULT_COLLATION=utf8_general_ci&lt;/code&gt; 改为 &lt;code&gt;-DDEFAULT_COLLATION=utf8mb4_unicode_ci&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;给出完整cmake命令 :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 切换到mysql8解压后的目录&lt;/span&gt;
cd /usr/local/mysql8/

&lt;span style=&#34;color:#75715e&#34;&gt;# 新建并切换build目录&lt;/span&gt;
mkdir build
cd build

&lt;span style=&#34;color:#75715e&#34;&gt;# 编译前的配置;其中的&amp;#34;DCMAKE_INSTALL_PREFIX&amp;#34;, &amp;#34;DMYSQL_DATADIR&amp;#34;, &amp;#34;DWITH_BOOST&amp;#34; 按照自己的情况配置&lt;/span&gt;
cmake .. -DCMAKE_INSTALL_PREFIX&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/mysql8 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DMYSQL_DATADIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/mysql8/data &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DSYSCONFDIR&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWITH_MYISAM_STORAGE_ENGINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWITH_INNOBASE_STORAGE_ENGINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWITH_MEMORY_STORAGE_ENGINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWTH_READLINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DMYSQL_TCP_PORT&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3306&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DENABLED_LOCAL_INFILE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWITH_PARTITION_STORAGE_ENGINE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DEXTRA_CHARSETS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;all -DDEFAULT_CHARSET&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8mb4 &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DDEFAULT_COLLATION&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;utf8mb4_unicode_ci &lt;span style=&#34;color:#ae81ff&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&lt;/span&gt;-DWITH_BOOST&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/boost_1_70_0

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;安装后,可以看到 &lt;code&gt;/etc/my.cnf&lt;/code&gt; 设置为 &lt;code&gt;collation-server = utf8mb4_unicode_ci&lt;/code&gt; &lt;code&gt;character-set-server = utf8mb4&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;h2 id=&#34;笔记二-创建mycnf&#34;&gt;笔记二: 创建my.cnf&lt;/h2&gt;
&lt;p&gt;在/etc目录下没有发现my.cnf(我的mysql版本是mysql-8.0.20), 只能自己创建了 :&lt;/p&gt;
&lt;p&gt;&lt;code&gt;vim /etc/my.cnf&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
# 客户端设置
[client]
port = 3306
# 默认情况下，socket文件应为/usr/local/mysql/mysql.socket,所以可以ln -s xx  /tmp/mysql.sock
socket = /tmp/mysql.sock 

# 服务端设置
[mysqld]

##########################################################################################################
# 基础信息
#Mysql服务的唯一编号 每个mysql服务Id需唯一
server-id = 1

#服务端口号 默认3306
port = 3306

# 启动mysql服务进程的用户
user = mysql

##########################################################################################################
# 安装目录相关
# mysql安装根目录
basedir = /usr/local/mysql8

# mysql数据文件所在位置
datadir = /usr/local/mysql8/data

# 临时目录 比如load data infile会用到,一般都是使用/tmp
tmpdir  = /tmp

# 设置socke文件地址
socket  = /tmp/mysql.sock


##########################################################################################################
# 事务隔离级别，默认为可重复读（REPEATABLE-READ）。（此级别下可能参数很多间隙锁，影响性能，但是修改又影响主从复制及灾难恢复，建议还是修改代码逻辑吧）
# 隔离级别可选项目：READ-UNCOMMITTED  READ-COMMITTED  REPEATABLE-READ  SERIALIZABLE
# transaction_isolation = READ-COMMITTED
transaction_isolation = REPEATABLE-READ

##########################################################################################################
# 数据库引擎与字符集相关设置

# mysql 5.1 之后，默认引擎就是InnoDB了
default_storage_engine = InnoDB
# 内存临时表默认引擎，默认InnoDB
default_tmp_storage_engine = InnoDB

#数据库默认字符集,主流字符集支持一些特殊表情符号（特殊表情符占用4个字节）
character-set-server = utf8mb4

#数据库字符集对应一些排序等规则，注意要和character-set-server对应
collation-server = utf8mb4_unicode_ci

# 设置client连接mysql时的字符集,防止乱码
# init_connect=&#39;SET NAMES utf8&#39;


##########################################################################################################
# 数据库连接相关设置
# 最大连接数，可设最大值16384，一般考虑根据同时在线人数设置一个比较综合的数字，鉴于该数值增大并不太消耗系统资源，建议直接设10000
# 如果在访问时经常出现Too Many Connections的错误提示，则需要增大该参数值
max_connections = 10000

# 默认值100，最大错误连接数，如果有超出该参数值个数的中断错误连接，则该主机将被禁止连接。如需对该主机进行解禁，执行：FLUSH HOST
# 考虑高并发场景下的容错，建议加大。
max_connect_errors = 10000

# MySQL打开的文件描述符限制，默认最小1024;
# 当open_files_limit没有被配置的时候，比较max_connections*5和ulimit -n的值，哪个大用哪个，
# 当open_file_limit被配置的时候，比较open_files_limit和max_connections*5的值，哪个大用哪个。
open_files_limit = 65535

# 注意：仍然可能出现报错信息Can&#39;t create a new thread；此时观察系统cat /proc/mysql进程号/limits，观察进程ulimit限制情况
# 过小的话，考虑修改系统配置表，/etc/security/limits.conf和/etc/security/limits.d/90-nproc.conf

# MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效
# MySQL连接闲置超过一定时间后(单位：秒，此处为1800秒)将会被强行关闭
interactive_timeout = 1800 
wait_timeout = 1800 

# 在MySQL暂时停止响应新请求之前的短时间内多少个请求可以被存在堆栈中 
# 官方建议back_log = 50 + (max_connections / 5),封顶数为900
back_log = 900

##########################################################################################################
# 数据库数据交换设置
# 该参数限制服务器端，接受的数据包大小，如果有BLOB子段，建议增大此值，避免写入或者更新出错。有BLOB子段，建议改为1024M
max_allowed_packet = 128M

##########################################################################################################
# 内存，cache与buffer设置


# 内存临时表的最大值,默认16M，此处设置成128M
tmp_table_size = 64M
# 用户创建的内存表的大小，默认16M，往往和tmp_table_size一起设置，限制用户临师表大小。
# 超限的话，MySQL就会自动地把它转化为基于磁盘的MyISAM表，存储在指定的tmpdir目录下，增大IO压力，建议内存大，增大该数值。
max_heap_table_size = 64M



# 表示这个mysql版本是否支持查询缓存。ps：SHOW STATUS LIKE &#39;qcache%&#39;，与缓存相关的状态变量。
# have_query_cache



# 在一个事务中binlog为了记录SQL状态所持有的cache大小
# 如果你经常使用大的,多声明的事务,你可以增加此值来获取更大的性能.
# 所有从事务来的状态都将被缓冲在binlog缓冲中然后在提交后一次性写入到binlog中
# 如果事务比此值大, 会使用磁盘上的临时文件来替代.
# 此缓冲在每个连接的事务第一次更新状态时被创建
binlog_cache_size = 1M



#*** MyISAM 相关选项
# 指定索引缓冲区的大小, 为MYISAM数据表开启供线程共享的索引缓存,对INNODB引擎无效。相当影响MyISAM的性能。
# 不要将其设置大于你可用内存的30%,因为一部分内存同样被OS用来缓冲行数据
# 甚至在你并不使用MyISAM 表的情况下, 你也需要仍旧设置起 8-64M 内存由于它同样会被内部临时磁盘表使用.
# 默认值 8M，建议值：对于内存在4GB左右的服务器该参数可设置为256M或384M。注意：该参数值设置的过大反而会是服务器整体效率降低！
key_buffer_size = 64M

# 为每个扫描MyISAM的线程分配参数设置的内存大小缓冲区。 
# 默认值128kb，建议值：16G内存建议1M，4G：128kb或者256kb吧
# 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。
# 一般不需要太关心该数值，稍微增大就可以了，
read_buffer_size = 262144 

# 支持任何存储引擎
# MySQL的随机读缓冲区大小，适当增大，可以提高性能。
# 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M
# 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为128kb*连接数；极端情况128kb*maxconnectiosns，会超级大，所以要考虑日常平均连接数。
read_rnd_buffer_size = 1M

# order by或group by时用到 
# 支持所有引擎，innodb和myisam有自己的innodb_sort_buffer_size和myisam_sort_buffer_size设置
# 默认值256kb；建议值：得参考连接数，16G内存，有人推荐8M.
# 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。
sort_buffer_size = 1M

# 此缓冲被使用来优化全联合(full JOINs 不带索引的联合)
# 类似的联合在极大多数情况下有非常糟糕的性能表现,但是将此值设大能够减轻性能影响.
# 通过 “Select_full_join” 状态变量查看全联合的数量
# 注意，该缓冲区是每个连接独占的，所以总缓冲区大小为 1M*连接数；极端情况1M*maxconnectiosns，会超级大。所以要考虑日常平均连接数。
# 默认值256kb;建议值：16G内存，设置8M.
join_buffer_size = 1M

# 缓存linux文件描述符信息，加快数据文件打开速度
# 它影响myisam表的打开关闭，但是不影响innodb表的打开关闭。
# 默认值2000，建议值：根据状态变量Opened_tables去设定
table_open_cache = 2000

# 缓存表定义的相关信息，加快读取表信息速度
# 默认值1400，最大值2000，建议值：基本不改。
table_definition_cache = 1400
# 该参数是myssql 5.6后引入的，目的是提高并发。
# 默认值1，建议值：cpu核数，并且&amp;lt;=16
table_open_cache_instances = 2

# 当客户端断开之后，服务器处理此客户的线程将会缓存起来以响应下一个客户而不是销毁。可重用，减小了系统开销。
# 默认值为9，建议值：两种取值方式，方式一，根据物理内存，1G  —&amp;gt; 8；2G  —&amp;gt; 16； 3G  —&amp;gt; 32； &amp;gt;3G  —&amp;gt; 64；
# 方式二，根据show status like  &#39;threads%&#39;，查看Threads_connected值。
thread_cache_size = 16

# 默认值256k,建议值：16/32G内存，512kb，其他一般不改变，如果报错：Thread stack overrun，就增大看看,
# 注意，每个线程分配内存空间，所以总内存空间。。。你懂得。
thread_stack = 512k


##########################################################################################################
# 日志文件相关设置，一般只开启三种日志，错误日志，慢查询日志，二进制日志。普通查询日志不开启。

# 普通查询日志，默认值off，不开启
general_log = 0
# 普通查询日志存放地址
general_log_file = /usr/local/mysql8/log/mysql-general.log

# 全局动态变量，默认3，范围：1～3
# 表示错误日志记录的信息，1：只记录error信息；2：记录error和warnings信息；3：记录error、warnings和普通的notes信息。
log_error_verbosity = 2
# 错误日志文件地址
log_error = /usr/local/mysql8/log/mysql-error.log


# 开启慢查询
slow_query_log = 1

# 开启慢查询时间，此处为1秒，达到此值才记录数据
long_query_time = 3

# 检索行数达到此数值，才记录慢查询日志中
min_examined_row_limit = 100

# mysql 5.6.5新增，用来表示每分钟允许记录到slow log的且未使用索引的SQL语句次数，默认值为0，不限制。
log_throttle_queries_not_using_indexes = 0

# 慢查询日志文件地址
slow_query_log_file = /usr/local/mysql8/log/mysql-slow.log

# 开启记录没有使用索引查询语句
log-queries-not-using-indexes = 1


# 开启二进制日志
log_bin = /usr/local/mysql8/log/mysql-bin.log
# mysql清除过期日志的时间，默认值30*24*60*60，
binlog_expire_logs_seconds=604800
# 如果二进制日志写入的内容超出给定值，日志就会发生滚动。你不能将该变量设置为大于1GB或小于4096字节。 默认值是1GB。
max_binlog_size = 1000M
# binlog的格式也有三种：STATEMENT，ROW，MIXED。mysql 5.7.7后，默认值从 MIXED 改为 ROW
# 关于binlog日志格式问题，请查阅网络资料
binlog_format = row
# 默认值N=1，使binlog在每N次binlog写入后与硬盘同步，ps：1最慢
# sync_binlog = 1 

##########################################################################################################
# innodb选项

# 说明：该参数可以提升扩展性和刷脏页性能。
# 默认值1，建议值：4-8；并且必须小于innodb_buffer_pool_instances
innodb_page_cleaners = 4

# 说明：一般8k和16k中选择，8k的话，cpu消耗小些，selcet效率高一点，一般不用改
# 默认值：16k；建议值：不改，
innodb_page_size = 16384

# 说明：InnoDB使用一个缓冲池来保存索引和原始数据, 不像MyISAM.这里你设置越大,你在存取表里面数据时所需要的磁盘I/O越少.
# 在一个独立使用的数据库服务器上,你可以设置这个变量到服务器物理内存大小的60%-80%
# 注意别设置的过大，会导致system的swap空间被占用，导致操作系统变慢，从而减低sql查询的效率
# 默认值：128M，建议值：物理内存的60%-80%
innodb_buffer_pool_size = 512M

# 说明:只有当设置 innodb_buffer_pool_size 值大于1G时才有意义，小于1G，instances默认为1，大于1G，instances默认为8
# 但是网络上有评价，最佳性能，每个实例至少1G大小。
# 默认值：1或8，建议值：innodb_buffer_pool_size/innodb_buffer_pool_instances &amp;gt;= 1G
innodb_buffer_pool_instances = 1

# 说明：mysql 5.7 新特性，defines the chunk size for online InnoDB buffer pool resizing operations.
# 实际缓冲区大小必须为innodb_buffer_pool_chunk_size*innodb_buffer_pool_instances*倍数，取略大于innodb_buffer_pool_size
# 默认值128M，建议值：默认值就好，乱改反而容易出问题，它会影响实际buffer pool大小。
innodb_buffer_pool_chunk_size = 128M 

# 在启动时把热数据加载到内存。默认值为on，不修改
innodb_buffer_pool_load_at_startup = 1
# 在关闭时把热数据dump到本地磁盘。默认值为on，不修改
innodb_buffer_pool_dump_at_shutdown = 1

# 说明：影响Innodb缓冲区的刷新算法，建议从小到大配置，直到zero free pages；innodb_lru_scan_depth * innodb_buffer_pool_instances defines the amount of work performed by the page cleaner thread each second.
# 默认值1024，建议值: 未知
innodb_lru_scan_depth = 1024

# 说明：事务等待获取资源等待的最长时间，单位为秒，看具体业务情况，一般默认值就好
# 默认值：50，建议值：看业务。
innodb_lock_wait_timeout = 60

# 说明：设置了Mysql后台任务（例如页刷新和merge dadta from buffer pool）每秒io操作的上限。
# 默认值：200，建议值：方法一，单盘sata设100，sas10，raid10设200，ssd设2000，fushion-io设50000；方法二，通过测试工具获得磁盘io性能后，设置IOPS数值/2。
innodb_io_capacity = 2000
# 说明：该参数是所有缓冲区线程io操作的总上限。
# 默认值：innodb_io_capacity的两倍。建议值：例如用iometer测试后的iops数值就好
innodb_io_capacity_max = 4000

# 说明：控制着innodb数据文件及redo log的打开、刷写模式，三种模式：fdatasync(默认)，O_DSYNC，O_DIRECT
# fdatasync：数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；
# O_DSYNC：  数据文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；日志文件，buffer pool-&amp;gt;磁盘；
# O_DIRECT： 数据文件，buffer pool-&amp;gt;磁盘；           日志文件，buffer pool-&amp;gt;os buffer-&amp;gt;磁盘；
# 默认值为空，建议值：使用SAN或者raid，建议用O_DIRECT，不懂测试的话，默认生产上使用O_DIRECT
innodb_flush_method = O_DIRECT


# 说明：mysql5.7之后默认开启，意思是，每张表一个独立表空间。
# 默认值1，开启
innodb_file_per_table = 1

# 说明：The path where InnoDB creates undo tablespaces.通常等于undo log文件的存放目录。
# 默认值./;自行设置
innodb_undo_directory = /usr/local/mysql8/log
# 说明：5.7.5后开始使用，在线收缩undo log使用的空间。
# 默认值：关闭，建议值：开启
innodb_undo_log_truncate = 1
# 说明：结合innodb_undo_log_truncate，实现undo空间收缩功能
# 默认值：1G，建议值，不改。
innodb_max_undo_log_size = 1G

# 说明：重作日志文件的存放目录
innodb_log_group_home_dir = /usr/local/mysql8/log
# 说明：日志文件的大小
# 默认值:48M,建议值：根据你系统的磁盘空间和日志增长情况调整大小
innodb_log_file_size = 128M
# 说明：日志组中的文件数量，mysql以循环方式写入日志
# 默认值2，建议值：根据你系统的磁盘空间和日志增长情况调整大小
innodb_log_files_in_group = 3
# 此参数确定些日志文件所用的内存大小，以M为单位。缓冲区更大能提高性能，但意外的故障将会丢失数据。MySQL开发人员建议设置为1－8M之间
innodb_log_buffer_size = 16M



# 说明：可以控制log从系统buffer刷入磁盘文件的刷新频率，增大可减轻系统负荷
# 默认值是1；建议值不改。系统性能一般够用。
innodb_flush_log_at_timeout = 1
# 说明：参数可设为0，1，2；
# 参数0：表示每秒将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。
# 参数1：表示每次事物提交，将log buffer内容刷新到系统buffer中，再调用系统flush操作写入磁盘文件。
# 参数2：表示每次事物提交，将log buffer内容刷新到系统buffer中，隔1秒后再调用系统flush操作写入磁盘文件。
innodb_flush_log_at_trx_commit = 1


# 说明：限制Innodb能打开的表的数据，如果库里的表特别多的情况，请增加这个。
# 值默认是2000，建议值：参考数据库表总数再进行调整，一般够用不用调整。
innodb_open_files = 8192

# innodb处理io读写的后台并发线程数量，根据cpu核来确认，取值范围：1-64
# 默认值：4，建议值：与逻辑cpu数量的一半保持一致。
innodb_read_io_threads = 4
innodb_write_io_threads = 4
# 默认设置为 0,表示不限制并发数，这里推荐设置为0，更好去发挥CPU多核处理能力，提高并发量
innodb_thread_concurrency = 0
# 默认值为4，建议不变。InnoDB中的清除操作是一类定期回收无用数据的操作。mysql 5.5之后，支持多线程清除操作。
innodb_purge_threads = 4 

# 说明：mysql缓冲区分为new blocks和old blocks；此参数表示old blocks占比；
# 默认值：37，建议值，一般不动
innodb_old_blocks_pct = 37
# 说明：新数据被载入缓冲池，进入old pages链区，当1秒后再次访问，则提升进入new pages链区。
# 默认值：1000
innodb_old_blocks_time=1000
# 说明：开启异步io，可以提高并发性，默认开启。
# 默认值为1，建议不动
innodb_use_native_aio = 1

# 说明：默认为空，使用data目录，一般不改。
innodb_data_home_dir=/usr/local/mysql8/data
# 说明：Defines the name, size, and attributes of InnoDB system tablespace data files.
# 默认值，不指定，默认为ibdata1:12M:autoextend
innodb_data_file_path = ibdata1:12M:autoextend


# 说明：The crash recovery mode。只有紧急情况需要恢复数据的时候，才改为大于1-6之间数值，含义查下官网。
# 默认值为0；
#innodb_force_recovery = 0

##########################################################################################################
# 其他。。。。
# 参考http://www.kuqin.com/database/20120815/328905.html
# skip-external-locking

# 禁止MySQL对外部连接进行DNS解析，使用这一选项可以消除MySQL进行DNS解析的时间。
# 缺点：所有远程主机连接授权都要使用IP地址方式，因为只认得ip地址了。
# skip_name_resolve = 0

# 默认值为off,timestamp列会自动更新为当前时间，设置为on|1，timestamp列的值就要显式更新
explicit_defaults_for_timestamp = 1




[mysqldump]
# quick选项强制 mysqldump 从服务器查询取得记录直接输出而不是取得所有记录后将它们缓存到内存中
quick
max_allowed_packet = 16M

[mysql]
# mysql命令行工具不使用自动补全功能，建议还是改为
# no-auto-rehash
auto-rehash
socket = /tmp/mysql.sock

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建my.cnf后&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 切换到安装目录&lt;/span&gt;
cd /usr/local/mysql8

&lt;span style=&#34;color:#75715e&#34;&gt;# 创建相关文件&lt;/span&gt;
mkdir data log
chown -R mysql:mysql data log

&lt;span style=&#34;color:#75715e&#34;&gt;# 初始化mysql, --defaults-file的参数就是刚才创建的配置文件, --basedir的参数就是mysql安装目录, --datadir的参数就是mysql数据目录&lt;/span&gt;
./bin/mysqld --defaults-file&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/etc/my.cnf --initialize --user&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;mysql --basedir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/mysql8/ --datadir&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;/usr/local/mysql8/data/

&lt;span style=&#34;color:#75715e&#34;&gt;# 会返回类似代码&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;MY-013169&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /usr/local/mysql8/bin/mysqld &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;mysqld 8.0.20&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; initializing of server in progress as process &lt;span style=&#34;color:#ae81ff&#34;&gt;48055&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;MY-013576&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;InnoDB&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; InnoDB initialization has started.
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;System&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;MY-013577&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;InnoDB&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; InnoDB initialization has ended.
  &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Note&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;MY-010454&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;Server&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; A temporary password is generated &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; root@localhost: &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;tsSl-.Wt3ud
&lt;span style=&#34;color:#75715e&#34;&gt;# &amp;#34;root@localhost:&amp;#34; 后边跟着就是mysql为root生成的临时密码,记下来,开启mysql后,可以用这个密码登录(如果没返回上述代码,则查看日志,如: vim log/mysql-error.log)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;开启并修改root密码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;
cd /usr/local/mysql8

&lt;span style=&#34;color:#75715e&#34;&gt;# 开启mysql&lt;/span&gt;
./support-files/mysql.server start

&lt;span style=&#34;color:#75715e&#34;&gt;# 登录并输入刚才记下的临时密码&lt;/span&gt;
./bin/mysql -uroot -p

&lt;span style=&#34;color:#75715e&#34;&gt;# 修改root密码&lt;/span&gt;
mysql&amp;gt; alter user &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;root&amp;#39;&lt;/span&gt;@&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt; identified by &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;123456&amp;#34;&lt;/span&gt;;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;笔记三-开关mysql&#34;&gt;笔记三: 开关mysql&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/local/mysql8

# 开启mysql进程
./bin/mysqld -u mysql
# 关闭mysql进程
./bin/mysqladmin -uroot shutdown

# 开启mysqld的守护进程,实际上是开启mysqld,当mysqld意外关闭时,mysqld_safe自动重启mysqld(可添加--skip-grant-tables参数,root可免密登录)
./bin/mysqld_safe --user=mysql &amp;amp;
# 关闭mysqld的守护进程
./bin/mysqladmin -uroot shutdown

# 开启mysql服务,实际是开启mysqld_safe
./support-files/mysql.server start
# 关闭mysql服务
./support-files/mysql.server stop

# 登录mysql
./bin/mysql -uroot -p

# 软连接(软连接的源文件路径要写成绝对路径)
ln -s /usr/local/mysql8/bin/* /usr/local/bin/
# 启动设置
cp support-files/mysql.server /etc/init.d/mysql.server

&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>搭建博客的准备</title>
      <link>https://twbworld.github.io/post/2020/05/17/blog_ready/</link>
      <pubDate>Sun, 17 May 2020 19:06:47 +0800</pubDate>
      <guid>https://twbworld.github.io/post/2020/05/17/blog_ready/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;最近想建立自己的博客网站,便于在开发过程中记录一些笔记;&lt;br&gt;
但是每次进入一个未知的领域,我的强迫症就会犯了,面临了抉择的问题;毕竟每个人都不想一开始就选择了不适合自己的,学到一半才后悔最初的选择;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;平台的选择&#34;&gt;平台的选择&lt;/h2&gt;
&lt;p&gt;进入我的备选名单的有:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSDN&lt;/li&gt;
&lt;li&gt;博客园&lt;/li&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;Github Pages&lt;/li&gt;
&lt;li&gt;知乎&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先讲结论,我最终选择了Github Pages&lt;/p&gt;
&lt;h3 id=&#34;wordpress&#34;&gt;WordPress&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自己搭建的博客,自由度非常高&lt;/li&gt;
&lt;li&gt;历经多年,插件丰富&lt;/li&gt;
&lt;li&gt;因为工作原因,个人比较熟悉PHP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会浪费自己的大量精力和时间去维护网站(服务器的维护,域名,SEO,还有服务器安全方面的考虑,等等)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有不好意思,程序员的时间非常宝贵,不要把时间浪费在这种无意义的事情上,我只想静静的写博客文章&lt;/p&gt;
&lt;h3 id=&#34;知乎&#34;&gt;知乎&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网站设计比较前卫&lt;/li&gt;
&lt;li&gt;平台的文章质量也很高,也有大量的程序员聚集在此&lt;/li&gt;
&lt;li&gt;个人原因,平时也喜欢逛逛知乎的热榜,消磨时间,感情上挺适合我胃口的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知乎这个平台信息有点杂,文章五花八门,而且这几年很多在知乎上带节奏,以及一些搞营销的,比较反感&lt;/li&gt;
&lt;li&gt;听说知乎的MarkDown支持的不太好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所有,只能忍痛割爱了&lt;/p&gt;
&lt;h3 id=&#34;csdn和博客园&#34;&gt;CSDN和博客园&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;很明显,CSDN和博客园的搜索引擎优化是做的非常不错的&lt;/li&gt;
&lt;li&gt;程序员这个物种比较多&lt;/li&gt;
&lt;li&gt;专注于技术博客,不像知乎给人的感觉很杂&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台太难看,设计太老旧了,点名批评博客园,强迫症看着难受&lt;/li&gt;
&lt;li&gt;在CSDN居然有下载收费的模式,反感&lt;/li&gt;
&lt;li&gt;限制太严格,卖个广告收不行&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;github-pages&#34;&gt;Github Pages&lt;/h3&gt;
&lt;p&gt;优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以使用Git管理,这是必杀技啊&lt;/li&gt;
&lt;li&gt;静态网站,比较好维护&lt;/li&gt;
&lt;li&gt;搜索引擎优化,服务器的维护等等这些,全权交给github好了,咋们不需要浪费过多的精力&lt;/li&gt;
&lt;li&gt;自由度比较高,可以使用各种各样的主题和插件,没有平台限制,可以卖个广告,放个收款码,放个看板娘啥的&lt;/li&gt;
&lt;li&gt;可使用自己的域名,而且提供免费https证书&lt;/li&gt;
&lt;li&gt;写博客,当然要使用MarkDown语法,而要很好的使用MarkDown,就要有自己的图床;正好可以使用Github仓库作为图床,托管自己的图片和静态资源;简直是完美的衔接&lt;/li&gt;
&lt;li&gt;Github代表了未来,Github代表了未来,Github代表了未来&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Github Pages屏蔽了百度蜘蛛,用百度搜索引擎无法搜索出Github Pages的文章(但是,从另外一方面想,百度搜索出来的结果本来就是垃圾,也不必讨好你.只要不屏蔽Google就行),不过解决办法也不是没有,就是使用cdn,
&lt;a href=&#34;https://vercel.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zeit.co&lt;/a&gt; 可提供这样的服务&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;如果您也决定使用Github Pages搭建自己的个人博客,那么你就会面临着另外的一个选择(强迫症又要犯了)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;博客框架的选择&#34;&gt;博客框架的选择&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;我的理解博客框架就是:静态网站生成器;简单理解就是:按照它的规则,写MarkDown文章,它再把MarkDown格式的文章生成HTML&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;主流选择也就那么几个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jekyll&lt;/li&gt;
&lt;li&gt;Hexo&lt;/li&gt;
&lt;li&gt;Hugo&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先讲结论,经过一番思想斗争,我最终选择了Hugo&lt;/p&gt;
&lt;h3 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h3&gt;
&lt;p&gt;Jekyll是使用Ruby写的,同时也是Github Pages默认的静态网站生成器&lt;br&gt;
被我pass了的原因主要是:看到网上的人说,Jekyll速度比较慢,特别是到后期&lt;/p&gt;
&lt;h3 id=&#34;hexo&#34;&gt;Hexo&lt;/h3&gt;
&lt;p&gt;Hexo是js写的,因为这个原因,很多人使用Hexo也没压力,优点也很明显,
国内使用的人数比较多,中文文档比较齐全(当时看Hugo的文档,看得我头都疼)&lt;/p&gt;
&lt;h3 id=&#34;hugo&#34;&gt;Hugo&lt;/h3&gt;
&lt;p&gt;Hugo是使用golang写的&lt;br&gt;
优点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;天下武功真的唯快不破,由于使用go开发的,go语言天生的速度优势,生成静态文件也就几秒的时间&lt;/li&gt;
&lt;li&gt;golang是Google推出的,&amp;ldquo;Google出品,必属精品&amp;rdquo;,历史证明,golang也确实能当大任&lt;/li&gt;
&lt;li&gt;由于在之前就想学golang了,Hugo正合我意&lt;/li&gt;
&lt;li&gt;我用了一个笨方法(当&amp;quot;选择困难症&amp;quot;发作的时候,我经常使用,哈哈),利用了搜索引擎来对比了Hexo和Hugo关键词的搜索热度,结果发现,Hugo的相关文章数量是Hexo的一百多倍,Hugo使用的人更多,可能是代表未来
&lt;img src=&#34;https://cdn.jsdelivr.net/gh/twbworld/hosting@master/img/20200517212636.png&#34; alt=&#34;&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
